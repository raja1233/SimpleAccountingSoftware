namespace SDN.Settings.ViewModel
{
    using Microsoft.Practices.Prism.Commands;
    using Microsoft.Practices.Prism.Events;
    using Microsoft.Practices.Prism.Regions;
    using Microsoft.Practices.ServiceLocation;
    using SASClient.Accounts.Views;
    using SDN.Common;
    using SDN.Settings.Services;
    using SDN.UI.Entities;
    using System;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.Drawing;
    using System.IO;
    using System.Linq;
    using System.Windows;
    using System.Windows.Data;
    using System.Windows.Input;
    using System.Windows.Media.Imaging;
    public static class BitmapConversion
    {
        public static BitmapSource BitmapToBitmapSource(Bitmap source)
        {
            return System.Windows.Interop.Imaging.CreateBitmapSourceFromHBitmap(
                          source.GetHbitmap(),
                          IntPtr.Zero,
                          Int32Rect.Empty,
                          BitmapSizeOptions.FromEmptyOptions());
        }
    }
    public class CompanyViewModel : ViewModelBase
    {
        // Model.PersonnelBusinessObject personnel;

        #region Private Properties
        private readonly IEventAggregator eventAggregator;
        private readonly IRegionManager regionManager;
        /// <summary>
        /// The Company collection
        /// </summary>
        /// 
        internal void RaisePropertyChanged(string prop)
        {
            if (PropertyChanged != null) { PropertyChanged(this, new PropertyChangedEventArgs(prop)); }
        }
        int compId = 0;
        object compDetailsbackup = new object();
        public event PropertyChangedEventHandler PropertyChanged;
        private CompanyDetailsEntities _company;
        private ObservableCollection<ShippingAddressEntity> _shipaddress;
        private ObservableCollection<CountryDropDown> _countrycombo = new ObservableCollection<CountryDropDown>();
        private ObservableCollection<StateDropDown> _statecombo = new ObservableCollection<StateDropDown>();

        //private BitmapSource _bitmapSource;
        #endregion
        private string companyname = "smartData";
        byte[] Default_photo_aray;

        #region Public Properties
        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsTabViewModel"/> class.
        /// </summary>
        /// <param name="regionManager">The region manager.</param>
        public CompanyViewModel(IEventAggregator eventAggregator, IRegionManager regionManager) : this()
        {
            this.eventAggregator = eventAggregator;
            this.regionManager = regionManager;
            this.CompanyName = companyname;
            
            eventAggregator.GetEvent<CompanynameChangedEvent>().Publish(this.CompanyName);
            


        }
        public string CompanyName
        {
            get
            {
                return this.companyname;
            }
            set
            {
                this.companyname = value;
                this.OnPropertyChanged("CompanyName");
            }
        }


        private void CompanyNameChanged(string companyname)
        {
            this.CompanyName = companyname;
            this.OnPropertyChanged("CompanyName");
        }
        /// <summary>
        /// Gets or sets the product collection.
        /// </summary>
        /// <value>
        /// The product collection.
        /// </value>
        public CompanyDetailsEntities CompanyDetails
        {
            get
            {
                return this._company;
            }
            set
            {
                this._company = value;
            }
        }
        public ObservableCollection<ShippingAddressEntity> ShippingAddress
        {
            get
            {
                return this._shipaddress;
            }
            set
            {
                this._shipaddress = value;
            }
        }
        public ObservableCollection<CountryDropDown> SingleCountryList
        {
            get
            {
                return _countrycombo;
            }
        }

        public ObservableCollection<StateDropDown> SingleStateList
        {
            get
            {
                return _statecombo;
            }
        }



        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyViewModel"/> class.
        /// </summary>
        public CompanyViewModel()
        {

            string currentDirectory = Directory.GetCurrentDirectory();
            // var dataDirectory = ConfigurationManager.AppSettings["DataDirectory"];
            string filePath = Path.Combine(currentDirectory, "DefaultImage.png");
            try
            {
                FileStream fs = new FileStream(filePath, FileMode.Open, FileAccess.Read);
                Default_photo_aray = new byte[fs.Length];
                fs.Read(Default_photo_aray, 0, Convert.ToInt32(fs.Length));
                fs.Close();
            }
            catch
            {
                //  MessageBox.Show("Error:Can't Read default image of product from " + filePath, "Error", MessageBoxButton.OK, MessageBoxImage.Error);

            }
            this.LoadCompanyBackground();


            AddCompanyCommand = new RelayCommand(AddCompany, CanSave);
            // AddShippingAdd = new RelayCommand(AddShipingAddress);
            UpdateBindingGroup = new System.Windows.Data.BindingGroup { Name = "Group1" };
            //AddCompanyDetailShipAddCommand = new CompositeCommand();
            //AddCompanyDetailShipAddCommand.RegisterCommand(AddCompanyCommand,CanSave);
            //AddCompanyDetailShipAddCommand.RegisterCommand(AddShippingAdd);
            //  DeleteShippingAddress = new RelayCommand(DeleteShipping, CanSaveShippAdd);
            NewShippingAddress = new RelayCommand(NewShipping, CanSaveShippAdd);
            SameAsBillAdd = new RelayCommand(SameBillAdd);
            CancelCompanyCommand = new RelayCommand(CancelCompany);
            EnterClosingBalance = new RelayCommand(ClosingBalanceview);
        }

        #endregion

        public RelayCommand AddCompanyCommand { get; set; }
        public CompositeCommand AddCompanyDetailShipAddCommand { get; set; }
        public RelayCommand AddShippingAdd { get; set; }
        public RelayCommand NewShippingAddress { get; set; }
        public RelayCommand DeleteShippingAddress { get; set; }
        public RelayCommand SameAsBillAdd { get; set; }
        public RelayCommand CancelCompanyCommand { get; set; }
        public RelayCommand EnterClosingBalance { get; set; }


        CompanyDetailsEntities _CompInfo;

        public CompanyDetailsEntities CompInfo
        {
            get { return _CompInfo; }
            set
            {
                _CompInfo = value;
                RaisePropertyChanged("CompInfo");
            }
        }

        void AddCompany(object param)
        {
            ICompanyDetails CompanyDetails = new CompanyDetails();
            UpdateBindingGroup.CommitEdit();
            bool results = false;
            var compDetails = SelectedCompany as CompanyDetailsEntities;
            //   DateTime dDate;
            MessageBoxResult result = MessageBox.Show("Do you want to save changes?", "Save Content", MessageBoxButton.YesNo);
            switch (result)
            {
                case MessageBoxResult.Yes:
                    if (compDetails.Comp_year_start_date != null && compDetails.Comp_year_end_date != null)
                    {
                        if (compDetails.Comp_year_end_date > compDetails.Comp_year_start_date)
                            results = CompanyDetails.AddCompany(compDetails);
                        else
                        {
                            MessageBox.Show("Financial year End date should be greater than Start Date", "Validation Error", MessageBoxButton.OK);
                        }
                    }
                    else
                    {
                        results = CompanyDetails.AddCompany(compDetails);
                    }
                    break;
                case MessageBoxResult.No:
                    break;
            }


            //if (results)
            //{
            //    //// MessageBox.Show("Company Details Saved successfully!");
            //    //UpdateBindingGroup.CommitEdit();
            //    //var loadDropdown = SelectedCompany as CompanyDetailsEntities;
            //    //var shippingdetails = CompanyDetails.GetShippingDetails(compId, "Company");
            //    //if (shippingdetails.Count() > 0)
            //    //{
            //    //    loadDropdown.ShippingAddress = shippingdetails;
            //    //    var latestEntry = shippingdetails.LastOrDefault();
            //    //    loadDropdown.ShippingID = latestEntry.ShippingID;
            //    //    loadDropdown.ShipTo_City = latestEntry.ShipTo_City;
            //    //    loadDropdown.ShipTo_Country = latestEntry.ShipTo_Country;
            //    //    loadDropdown.ShipTo_Line1 = latestEntry.ShipTo_Line1;
            //    //    loadDropdown.ShipTo_Line2 = latestEntry.ShipTo_Line2;
            //    //    loadDropdown.ShipTo_PostalCode = latestEntry.ShipTo_PostalCode;
            //    //    loadDropdown.ShipTo_State = latestEntry.ShipTo_State;
            //    //}
            //}
            //else
            //    MessageBox.Show("There was some problem while updating, kindly try again later!");
        }
        public void ClosingBalanceview(object param)
        {

            SharedValues.getValue = "UnpaidSalesInvoiceTab";
            var tabview = ServiceLocator.Current.GetInstance<AccountsDetailsTabView>();

            var region = this.regionManager.Regions[RegionNames.MenuBarRegion];
            region.Add(tabview);
            if (region != null)
            {
                region.Activate(tabview);
            }

            var view = ServiceLocator.Current.GetInstance<UnpaidSalesInvoiceView>();

            var mainregion = this.regionManager.Regions[RegionNames.MainRegion];
            mainregion.Add(view);
            if (mainregion != null)
            {
                mainregion.Activate(view);
            }
            eventAggregator.GetEvent<TabVisibilityEvent>().Publish(true);
            //eventAggregator.GetEvent<SubTabVisibilityEvent>().Publish(false);
            eventAggregator.GetEvent<TitleChangedEvent>().Publish("Previous Accounting System Closing Balance");
        }
        public void NewShipping(object param)
        {
            var shipaddress = SelectedCompany as CompanyDetailsEntities;
            shipaddress.ShipTo_City = null;
            shipaddress.ShipTo_Country = null;
            shipaddress.ShippingID = 0;
            shipaddress.ShipTo_Line1 = null;
            shipaddress.ShipTo_Line2 = null;
            shipaddress.ShipTo_PostalCode = null;
            shipaddress.ShipTo_State = null;
            //SelectedCompany.ShippingAddress = null;
        }
        void SameBillAdd(object param)
        {
            var shippingaddress = SelectedCompany as CompanyDetailsEntities;
            shippingaddress.ShippingID = 0;
            shippingaddress.ShipTo_City = shippingaddress.Company_BillTo_City;
            shippingaddress.ShipTo_Country = shippingaddress.Company_BillTo_Country;
            shippingaddress.ShipTo_Line1 = shippingaddress.Company_BillTo_Line1;
            shippingaddress.ShipTo_Line2 = shippingaddress.Company_BillTo_Line2;
            shippingaddress.ShipTo_PostalCode = shippingaddress.Company_BillTo_PostalCode;
            shippingaddress.ShipTo_State = shippingaddress.Company_BillTo_State;
        }
        void CancelCompany(object param)
        {
            //var compdetails = SelectedCompany as CompanyDetailsEntities;
            ////compdetails = compDetailsbackup as CompanyDetailsEntities;
            ////var Company = new CompanyDetailsEntities();
            ////ICompanyDetails CompanyDetails = new CompanyDetails();
            ////var results = CompanyDetails.GetCompanyDetails();
            ////compdetails = results;
            //var comp = compDetailsbackup as CompanyDetailsEntities;
            //compdetails.CompanyName = comp.CompanyName;
            //compdetails.Comp_GST_Reg_No = results.Comp_GST_Reg_No;
            this.LoadCompanyBackground();
        }
        //void DeleteShipping(object param)
        //{
        //    var shipaddress = SelectedCompany as CompanyDetailsEntities;
        //    ICompanyDetails CompanyDetails = new CompanyDetails();
        //    UpdateBindingGroup.CommitEdit();
        //    MessageBoxResult result = MessageBox.Show("Do you really want to delete the shipping address?", "Confirmation", MessageBoxButton.YesNo);
        //    switch (result)
        //    {
        //        case MessageBoxResult.Yes:

        //            var results = CompanyDetails.DeleteShippingaddress(shipaddress.ShippingID);
        //                var loadDropdown = SelectedCompany as CompanyDetailsEntities;
        //                var shippingdetails = CompanyDetails.GetShippingDetails(compId, "Company");
        //            loadDropdown.ShippingAddress = shippingdetails;
        //            if (results)
        //            {
        //                MessageBox.Show("Shipping address delete Successfully", "Success");
        //            }
        //            break;
        //        case MessageBoxResult.No:

        //            break;

        //    }

        //}
        //void AddShipingAddress(object param)
        //{
        //    ICompanyDetails CompanyDetails = new CompanyDetails();
        //    UpdateBindingGroup.CommitEdit();
        //    var loadDropdown = SelectedCompany as CompanyDetailsEntities;
        //    var shippingdetails = CompanyDetails.GetShippingDetails(compId, "Company");
        //    if (shippingdetails.Count() > 0)
        //    {
        //        loadDropdown.ShippingAddress = shippingdetails;
        //        var latestEntry = shippingdetails.LastOrDefault();
        //        loadDropdown.ShippingID = latestEntry.ShippingID;
        //        loadDropdown.ShipTo_City = latestEntry.ShipTo_City;
        //        loadDropdown.ShipTo_Country = latestEntry.ShipTo_Country;
        //        loadDropdown.ShipTo_Line1 = latestEntry.ShipTo_Line1;
        //        loadDropdown.ShipTo_Line2 = latestEntry.ShipTo_Line2;
        //        loadDropdown.ShipTo_PostalCode = latestEntry.ShipTo_PostalCode;
        //        loadDropdown.ShipTo_State = latestEntry.ShipTo_State;
        //    }

        //    //this.LoadProductsBackground();
        //    //var results = CompanyDetails.AddCompany(abc);
        //}

        //public void LoadShippingAddress(int ShippingId)
        //{
        //    ICompanyDetails CompanyDetails = new CompanyDetails();
        //    var shippingdetails = CompanyDetails.GetSelectedShipDetails(ShippingId);
        //    var shipaddress = SelectedCompany as CompanyDetailsEntities;
        //    var shipinfo = shippingdetails.FirstOrDefault();
        //    shipaddress.ShippingID = shipinfo.ShippingID;
        //    shipaddress.ShipTo_City = shipinfo.ShipTo_City;
        //    shipaddress.ShipTo_Country = shipinfo.ShipTo_Country;
        //    shipaddress.ShipTo_Line1 = shipinfo.ShipTo_Line1;
        //    shipaddress.ShipTo_Line2 = shipinfo.ShipTo_Line2;
        //    shipaddress.ShipTo_PostalCode = shipinfo.ShipTo_PostalCode;
        //    shipaddress.ShipTo_State = shipinfo.ShipTo_State;
        //    OnPropertyChanged("SingleCityList");
        //}

        object _SelectedCompany;
        public object SelectedCompany
        {
            get
            {

                return _SelectedCompany;
            }
            set
            {
                if (_SelectedCompany != value)
                {
                    _SelectedCompany = value;
                    RaisePropertyChanged("SelectedCompany");
                }
            }
        }

        BindingGroup _UpdateBindingGroup;
        public BindingGroup UpdateBindingGroup
        {
            get
            {
                return _UpdateBindingGroup;
            }
            set
            {
                if (_UpdateBindingGroup != value)
                {
                    _UpdateBindingGroup = value;
                    RaisePropertyChanged("UpdateBindingGroup");
                }
            }
        }


        //public void LoadCountry()
        //{
        //    _countrycombo = new ObservableCollection<Country>(_objDataSource.CountryList());

        //}
        //ObservableCollection<StateDropDown> StateListing = new ObservableCollection<StateDropDown>();
        //public void LoadState(string countrycode)
        //{
        //    ICompanyDetails CompanyDetails = new CompanyDetails();
        //    StateListing = new ObservableCollection<StateDropDown>
        //            (from state in CompanyDetails.GetStates()
        //             where state.CountryCode.Equals(countrycode)
        //             select state);

        //    Mouse.OverrideCursor = Cursors.Wait;
        //    //this.SingleStateList.Add(StateDropDown)e.User;
        //    BackgroundWorker worker = new BackgroundWorker();

        //    //Set the WorkerReportsProgress property to true if you want the BackgroundWorker to support progress updates.
        //    //When this property is true, user code can call the ReportProgress method to raise the ProgressChanged event.
        //    worker.WorkerReportsProgress = true;

        //    //This event is raised when you call the RunWorkerAsync method. This is where you start the time-consuming operation.
        //    worker.DoWork += new DoWorkEventHandler(this.LoadProductsBackgroundState);

        //    // This event is raised when you call the ReportProgress method.
        //    worker.ProgressChanged += new ProgressChangedEventHandler(this.LoadProductsBackgroundProgressState);
        //    //The RunWorkerCompleted event is raised when the background worker has completed. 
        //    //Depending on whether the background operation completed successfully, encountered an error,
        //    //or was canceled, update the user interface accordingly
        //    worker.RunWorkerCompleted += new RunWorkerCompletedEventHandler(this.LoadProductsBackgroundCompleteState);

        //    //Starts running a background operation
        //    worker.RunWorkerAsync();

        //    //this.LoadProductsBackgroundProgressState(object, ProgressChangedEventArgs e);
        //    this.OnPropertyChanged("SingleStateList");
        //}


        #region Background Worker

        /// <summary>
        /// Loads the product models background.
        /// </summary>
        public void LoadCompanyBackground()
        {
            //int compId = 0;
            Mouse.OverrideCursor = Cursors.Wait;
            SelectedCompany = null; // Unselects last selection. Essential, as assignment below won't clear other control's SelectedItems
            var Company = new CompanyDetailsEntities();
            ICompanyDetails CompanyDetails = new CompanyDetails();
            var results = CompanyDetails.GetCompanyDetails();
            if (results != null)
            {
                compId = results.ID;
                companyname = results.CompanyName;
                compDetailsbackup = results;


            }
            else
            {
                CompanyName = "Please setup your company details";
            }
            //var shippingdetails = CompanyDetails.GetShippingDetails(compId, "Company");
            //results.ShippingAddress = shippingdetails;
            if (results.Comp_logo != null && results.Comp_logo.Length > 0)
            {
                Bitmap imageBitMap = BytesToBitmap(results.Comp_logo);
                //Bitmap bitmap = (Bitmap)Bitmap.FromFile(@"C:\Users\Ashutosh Dwivedi\Desktop\Motivationla.jpg", true);
                results.ButtonSource = BitmapConversion.BitmapToBitmapSource(imageBitMap);
            }
            else
            {
                Bitmap imageBitMap = BytesToBitmap(Default_photo_aray);
                //Bitmap bitmap = (Bitmap)Bitmap.FromFile(@"C:\Users\Ashutosh Dwivedi\Desktop\Motivationla.jpg", true);
                results.ButtonSource = BitmapConversion.BitmapToBitmapSource(imageBitMap);
            }

            int minHeight = 300;

            var height = System.Windows.SystemParameters.PrimaryScreenHeight - 155;
            bool validHeight = int.TryParse(height.ToString(), out minHeight);
            results.CompGridHeight = minHeight;

            SelectedCompany = results;
            Mouse.OverrideCursor = null;


            //Mouse.OverrideCursor = Cursors.Wait;

            ////run time-consuming operations on a background thread
            //BackgroundWorker worker = new BackgroundWorker();

            ////Set the WorkerReportsProgress property to true if you want the BackgroundWorker to support progress updates.
            ////When this property is true, user code can call the ReportProgress method to raise the ProgressChanged event.
            //worker.WorkerReportsProgress = true;

            ////This event is raised when you call the RunWorkerAsync method. This is where you start the time-consuming operation.
            //worker.DoWork += new DoWorkEventHandler(this.LoadProductsBackground);

            //// This event is raised when you call the ReportProgress method.
            //worker.ProgressChanged += new ProgressChangedEventHandler(this.LoadProductsBackgroundProgress);

            ////The RunWorkerCompleted event is raised when the background worker has completed. 
            ////Depending on whether the background operation completed successfully, encountered an error,
            ////or was canceled, update the user interface accordingly
            //worker.RunWorkerCompleted += new RunWorkerCompletedEventHandler(this.LoadProductsBackgroundComplete);

            ////Starts running a background operation
            //worker.RunWorkerAsync();
        }
        public static Bitmap BytesToBitmap(byte[] byteArray)
        {
            using (System.IO.MemoryStream ms = new System.IO.MemoryStream(byteArray))
            {
                Bitmap img = (Bitmap)Image.FromStream(ms);
                return img;
            }
        }
        public void addCompanyImage(byte[] Image)
        {
            ICompanyDetails CompanyDetails = new CompanyDetails();
            CompanyDetails.AddCompanyLogo(Image);
            var _selectedCompany = SelectedCompany as CompanyDetailsEntities;
            var results = CompanyDetails.GetCompanyDetails();
            {
                compId = results.ID;
                _selectedCompany.Comp_logo = results.Comp_logo;
                if (results.Comp_logo != null && results.Comp_logo.Length > 0)
                {
                    Bitmap imageBitMap = BytesToBitmap(results.Comp_logo);
                    //Bitmap bitmap = (Bitmap)Bitmap.FromFile(@"C:\Users\Ashutosh Dwivedi\Desktop\Motivationla.jpg", true);
                    results.ButtonSource = BitmapConversion.BitmapToBitmapSource(imageBitMap);
                    _selectedCompany.ButtonSource = BitmapConversion.BitmapToBitmapSource(imageBitMap);
                }
            }
        }




        /// <summary>
        /// Occurs when RunWorkerAsync is called.
        /// </summary>
        /// <param name="sender">The sender.</param>
        /// <param name="e">The <see cref="DoWorkEventArgs"/> instance containing the event data.</param>
        public void LoadProductsBackground(object sender, DoWorkEventArgs e)
        {
            // ICompanyDetails CompanyDetails = new CompanyDetails();

            // BackgroundWorker source = (BackgroundWorker)sender;

            //var results = CompanyDetails.GetCompanyDetails();

            // int index = 0;
            // SelectedCompany = results;

            //     Application.Current.Dispatcher.Invoke(DispatcherPriority.Background, new Action(delegate { }));
            //     source.ReportProgress(++index, results);
            //_countrycombo.Add(item);

            //_countrycombo = new ObservableCollection<CountryDropDown>(results);

        }


        //public void LoadProductsBackgroundState(object sender, DoWorkEventArgs e)
        //{
        //    ICompanyDetails CompanyDetails = new CompanyDetails();

        //    BackgroundWorker source = (BackgroundWorker)sender;

        //    int index = 0;
        //    foreach (var item in StateListing)
        //    {

        //        Application.Current.Dispatcher.Invoke(DispatcherPriority.Background, new Action(delegate { }));
        //        source.ReportProgress(++index, item);
        //        //_countrycombo.Add(item);
        //    }
        //    //_countrycombo = new ObservableCollection<CountryDropDown>(results);

        //}



        /// <summary>
        ///  Occurs when System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32) is called.
        /// </summary>
        /// <param name="sender">The sender.</param>
        /// <param name="e">The <see cref="ProgressChangedEventArgs"/> instance containing the event data.</param>
        private void LoadProductsBackgroundProgress(object sender, ProgressChangedEventArgs e)
        {

            //this.CompanyDetails.Add((CompanyDetailsEntities)e.UserState);

        }
        private void LoadProductsBackgroundProgressState(object sender, ProgressChangedEventArgs e)
        {

            this.SingleStateList.Add((StateDropDown)e.UserState);

        }

        /// <summary>
        ///  Occurs when the background operation has completed, has been canceled, or has raised an exception.
        /// </summary>
        /// <param name="sender">The sender.</param>
        /// <param name="e">The <see cref="RunWorkerCompletedEventArgs"/> instance containing the event data.</param>
        private void LoadProductsBackgroundComplete(object sender, RunWorkerCompletedEventArgs e)
        {

            Mouse.OverrideCursor = null;
            this.OnPropertyChanged("SingleCountryList");

        }

        private void LoadProductsBackgroundCompleteState(object sender, RunWorkerCompletedEventArgs e)
        {

            Mouse.OverrideCursor = null;
            this.OnPropertyChanged("SingleStateList");

        }
        public bool CanSave(object param)
        {

            if (SelectedCompany != null)
            {
                var selectedCompany = SelectedCompany as CompanyDetailsEntities;
                if (selectedCompany.CompanyName == null || selectedCompany.CompanyName == "" || selectedCompany.CompanyName == " ")
                    return false;
                else
                    return true;
            }
            else
                return false;
        }
        public bool CanSaveShippAdd(object param)
        {

            if (SelectedCompany != null)
            {
                var selectedCompany = SelectedCompany as CompanyDetailsEntities;
                if (selectedCompany.ShippingAddress.Count() > 0)
                    return true;
                else
                    return false;
            }
            else
                return false;
        }

        protected override void OnPropertyChanged(string name)
        {
            var eventHandler = this.PropertyChanged;
            if (eventHandler != null)
            {
                eventHandler(this, new PropertyChangedEventArgs(name));
            }
            switch (name)
            {
                case "Comp_year_end_date":
                    //SetData(this.Comp_year_end_date.ToString(), "StartDate");
                    break;
                case "SelectedSearchEndDate":
                    //SetData(this.SelectedSearchEndDate.ToString(), "EndDate");
                    break;
            }

            base.OnPropertyChanged(name);
        }

        public void SetData(string SearchFilter, string parameter)
        {

            if (parameter == "StartDate")
            {
                if (SearchFilter != string.Empty && SearchFilter != null)
                {
                    //this.EndDateValidation = Convert.ToDateTime(SearchFilter);
                    //this.EnableEndDropDown = true;
                }
                //else
                //this.EnableEndDropDown = false;
            }
            if (parameter == "EndDate" && SearchFilter != string.Empty && SearchFilter != null)
            {
                //this.StartEndDateTrue = true;//added after feedback
            }



        }

        #endregion Background Worker

    }
}

