
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SASDAL.Purchasing
{
    using Newtonsoft.Json;
    using SDN.UI.Entities;
    using SDN.UI.Entities.Suppliers;
    using System.Data.SqlClient;

    public class InvoiceDebitPaymentsDAL: IInvoiceDebitPaymentsDAL
    {
       public List<InvoiceDebitPaymentsEntity> GetSuppliersList(string json)
        {
            var objResponse1 = JsonConvert.DeserializeObject<List<SearchEntity>>(json);
            List<InvoiceDebitPaymentsEntity> lstInvoiceDetails = new List<InvoiceDebitPaymentsEntity>();
            try
            {
                using (SASEntitiesEDM entities = new SASEntitiesEDM())
                {
                    lstInvoiceDetails = entities.Database.SqlQuery<InvoiceDebitPaymentsEntity>("USP_InvCNPayment_Suppliers @year,@Quarter,@Month",
                        new SqlParameter("year", Convert.ToInt64(objResponse1[0].FieldValue)),
                         new SqlParameter("Quarter", Convert.ToInt64(objResponse1[1].FieldValue)),
                          new SqlParameter("Month", Convert.ToInt64(objResponse1[2].FieldValue))).ToList();
                }

            }
            catch (Exception ex)
            {
                throw ex;
            }
            return lstInvoiceDetails;
        }
        public List<InvDebitPaymentsDetailsEntity> GetUnPaidInvoices(int supplierID,string json)
        {
            var objResponse1 = JsonConvert.DeserializeObject<List<SearchEntity>>(json);
            List<InvDebitPaymentsDetailsEntity> lstInvoiceDetails = new List<InvDebitPaymentsDetailsEntity>();
            try
            {
                using (SASEntitiesEDM entities = new SASEntitiesEDM())
                {
                   lstInvoiceDetails = entities.Database.SqlQuery<InvDebitPaymentsDetailsEntity>("USP_SupplierStatementInvCNPayment @ID, @year,@Quarter,@Month",
                       new SqlParameter("ID", supplierID),
                        new SqlParameter("year", Convert.ToInt16(objResponse1[0].FieldValue)),
                         new SqlParameter("Quarter", Convert.ToInt16(objResponse1[1].FieldValue)),
                          new SqlParameter("Month", Convert.ToInt16(objResponse1[2].FieldValue))).ToList();
                }

            }
            catch(Exception ex)
            {
                throw ex;
            }
            return lstInvoiceDetails;
         }
        public bool SaveSearchJson(string jsonSearch, int ScreenId, string ScreenName)
        {
            try
            {
                using (SASEntitiesEDM entities = new SASEntitiesEDM())
                {
                    var result = entities.LastSelectionHistories.Where(x => x.Screen_Id == ScreenId).FirstOrDefault();
                    if (result != null)
                    {
                        result.Last_Selection = jsonSearch;
                        result.Last_Updated = DateTime.Now;
                        entities.SaveChanges();
                        return true;
                    }
                    else
                    {
                        LastSelectionHistory lastSelection = new LastSelectionHistory()
                        {
                            Screen_Id = ScreenId,
                            Screen_Name = ScreenName,
                            Last_Selection = jsonSearch,
                            Last_Updated = DateTime.Now
                        };
                        entities.LastSelectionHistories.Add(lastSelection);
                        entities.SaveChanges();
                        return true;
                    }
                }
            }
            catch
            {
                return false;
            }
        }
       public string GetLastSelectionData(int ScreenId)
        {
            try
            {
                using (SASEntitiesEDM entities = new SASEntitiesEDM())
                {
                    var result = entities.LastSelectionHistories.Where(x => x.Screen_Id == ScreenId).FirstOrDefault();
                    if (result != null)
                        return result.Last_Selection;
                    else
                        return null;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
    }
}
