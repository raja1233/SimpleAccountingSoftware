using SDN.Common;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SDN.UI.Entities.Sales
{
    public class CreditNoteEntity: BaseEntity
    {
        #region "Private members"
        private int id;
        private List<CustomerEntity> lstCustomers;
        private int cusId;
        private string creditNo;
        private DateTime? creditDate;
        private string customerDebitNoteNo;
        private DateTime? customerDebitNoteDate;
        private string customerDebitNoteAmount;
        private List<PandSDetailsModel> lstPandS;
        private List<ContentModel> lstContents;

        private int? quantity;
        private decimal? discount;
        private decimal? amount;
        private string amountStr;
        private string termsAndConditions;
        private decimal? totalBeforeTax = 0;
        private decimal? totalAfterTax = 0;
        private decimal? totalTax = 0;
        private string taxName;
        private string currencyName;
        private bool? excludingTax;
        private bool? includingTax;
        private ObservableCollection<SalesInvoiceDetailEntity> pqDetailsEntity;
        private SalesInvoiceDetailEntity pqEntity;
        private int? createdBy;
        private DateTime? createdDate;
        private string shipToAddress;
        private string billToAddress;
        private byte? status;
        private bool? excIncGST;
     
        private int _PIFormGridHeight;
        private int salesInvoiceID;
        private string salesInvoiceNo;
        private bool? _RubberAdjusted;
        #endregion

        #region "Public members"

        public bool? RubberAdjusted
        {
            get
            {
                return _RubberAdjusted;
            }
            set
            {
                _RubberAdjusted = value;
                OnPropertyChanged("RubberAdjusted");
            }
        }

        public int PIFormGridHeight
        {
            get
            {
                return _PIFormGridHeight;
            }
            set
            {
                _PIFormGridHeight = value;
                OnPropertyChanged("PIFormGridHeight");
            }
        }
        public int ID
        {
            get
            {
                return id;
            }
            set
            {
                id = value;
                OnPropertyChanged("ID");
            }
        }

        public int CustomerID
        {
            get
            {
                return cusId;
            }
            set
            {
                cusId = value;
                OnPropertyChanged("CustomerID");
            }
        }

        public int SalesInvoiceID
        {
            get
            {
                return salesInvoiceID;
            }
            set
            {
                salesInvoiceID = value;
                OnPropertyChanged("SalesInvoiceID");
            }
        }

        public string SalesInvoiceNo
        {
            get { return salesInvoiceNo; }
            set { salesInvoiceNo = value;
                OnPropertyChanged("SalesInvoiceNo");
            }
        }
        public SalesInvoiceDetailEntity PQEntity
        {
            get
            {
                return pqEntity;
            }
            set
            {
                pqEntity = value;
                OnPropertyChanged("PQEntity");
            }
        }

        public string TermsAndConditions
        {
            get
            {
                return termsAndConditions;
            }
            set
            {
                termsAndConditions = value;
                OnPropertyChanged("TermsAndConditions");
            }
        }

        public List<CustomerEntity> LstCustomers
        {
            get
            {
                return lstCustomers;
            }
            set
            {
                lstCustomers = value;
                OnPropertyChanged("LstCustomers");
            }
        }

        public List<ContentModel> LstContents
        {
            get
            {
                return lstContents;
            }
            set
            {
                lstContents = value;
                OnPropertyChanged("LstContents");
            }
        }

        public string CreditNo
        {
            get
            {
                return creditNo;
            }
            set
            {
                creditNo = value;
                OnPropertyChanged("CreditNo");
            }
        }

        public DateTime? CreditDate
        {
            get
            {
                return creditDate;
            }
            set
            {
                creditDate = value;
                OnPropertyChanged("CreditDate");
            }
        }
        public string CustomerDebitNoteNo
        {
            get { return customerDebitNoteNo; }
            set
            {
                customerDebitNoteNo = value;
                OnPropertyChanged("CustomerDebitNoteNo");
            }
        }

        private decimal? cdnAmount;

        public decimal? CDNAmount
        {
            get { return cdnAmount; }
            set
            {
                cdnAmount = value;
                OnPropertyChanged("CDNAmount");
            }
        }

        public string CustomerDebitNoteAmount
        {
            get
            {
                if (customerDebitNoteAmount == null)
                    return this.customerDebitNoteAmount;
                else
                {
                    if (customerDebitNoteAmount != "")
                    {
                        var balance = customerDebitNoteAmount.Replace(",", "");
                        if (Convert.ToInt32(SharedValues.decimalPlaces) == 2)
                            return Convert.ToDecimal(balance).ToString("N", new CultureInfo(SharedValues.CurrencyName));
                        if (Convert.ToInt32(SharedValues.decimalPlaces) == 3)
                            return Convert.ToDecimal(balance).ToString("N3", new CultureInfo(SharedValues.CurrencyName));
                        if (Convert.ToInt32(SharedValues.decimalPlaces) == 0)
                            return Convert.ToDecimal(balance).ToString("N0", new CultureInfo(SharedValues.CurrencyName));
                        else
                            return Convert.ToDecimal(balance).ToString("N", new CultureInfo(SharedValues.CurrencyName));
                    }
                    else
                        return this.customerDebitNoteAmount;
                }
            }
            set
            {
                customerDebitNoteAmount = value;
                OnPropertyChanged("CustomerDebitNoteAmount");
            }
        }

        public DateTime? CustomerDebitNoteDate
        {
            get
            {
                return customerDebitNoteDate;
            }
            set
            {
                customerDebitNoteDate = value;
                OnPropertyChanged("CustomerDebitNoteDate");
            }
        }

        public List<PandSDetailsModel> LstPandS
        {
            get
            {
                return lstPandS;
            }
            set
            {
                lstPandS = value;
                OnPropertyChanged("LstPandS");
            }
        }

        public int? Quantity
        {
            get
            {
                return quantity;
            }
            set
            {
                quantity = value;
                OnPropertyChanged("Quantity");
            }
        }

        public byte? Status
        {
            get
            {
                return status;
            }
            set
            {
                status = value;
                OnPropertyChanged("Status");
            }
        }

        public decimal? Discount
        {
            get
            {
                return discount;
            }
            set
            {
                discount = value;
                OnPropertyChanged("Discount");
            }
        }

        public decimal? Amount
        {
            get
            {
                return amount;
            }
            set
            {
                amount = value;
                OnPropertyChanged("Amount");
            }
        }

        public string AmountStr
        {
            get
            {
                return amountStr;
            }
            set
            {
                amountStr = value;
                OnPropertyChanged("AmountStr");
            }
        }

        public string TaxName
        {
            get
            {
                return taxName;
            }
            set
            {
                taxName = value;

            }
        }

        public string CurrencyName
        {
            get
            {
                return currencyName;
            }
            set
            {
                currencyName = value;
                OnPropertyChanged("CurrencyName");
            }
        }

        public decimal? TotalBeforeTax
        {
            get
            {
                return totalBeforeTax;
            }
            set
            {
                totalBeforeTax = value;
                OnPropertyChanged("TotalBeforeTax");
            }
        }
        public decimal? TotalAfterTax
        {
            get
            {
                return totalAfterTax;
            }
            set
            {
                totalAfterTax = value;
                OnPropertyChanged("TotalAfterTax");
            }
        }

        public decimal? Price { get; set; }

        public decimal? TotalTax
        {
            get
            {
                return totalTax;
            }
            set
            {
                totalTax = value;
                OnPropertyChanged("TotalTax");
            }
        }

        private string totalBeforeTaxStr;
        private string totalTaxStr;
        private string totalAfterTaxStr;
        public string TotalBeforeTaxStr
        {
            get
            {
                //return _InvoiceAmount;
                if (totalBeforeTaxStr == null)
                    return this.totalBeforeTaxStr;
                else
                {
                    if (totalBeforeTaxStr != "")
                    {
                        var balance = totalBeforeTaxStr.Replace(",", "");
                        if (Convert.ToInt32(SharedValues.decimalPlaces) == 2)
                            return Convert.ToDecimal(balance).ToString("N", new CultureInfo(SharedValues.CurrencyName));
                        if (Convert.ToInt32(SharedValues.decimalPlaces) == 3)
                            return Convert.ToDecimal(balance).ToString("N3", new CultureInfo(SharedValues.CurrencyName));
                        if (Convert.ToInt32(SharedValues.decimalPlaces) == 0)
                            return Convert.ToDecimal(balance).ToString("N0", new CultureInfo(SharedValues.CurrencyName));
                        else
                            return Convert.ToDecimal(balance).ToString("N", new CultureInfo(SharedValues.CurrencyName));
                    }
                    else
                        return this.totalBeforeTaxStr;
                }
            }
            set
            {
                totalBeforeTaxStr = value;
                OnPropertyChanged("TotalBeforeTaxStr");
            }

        }
        public string TotalTaxStr
        {
            get
            {
                //return _InvoiceAmount;
                if (totalTaxStr == null)
                    return this.totalTaxStr;
                else
                {
                    if (totalTaxStr != "")
                    {
                        var balance = totalTaxStr.Replace(",", "");
                        if (Convert.ToInt32(SharedValues.decimalPlaces) == 2)
                            return Convert.ToDecimal(balance).ToString("N", new CultureInfo(SharedValues.CurrencyName));
                        if (Convert.ToInt32(SharedValues.decimalPlaces) == 3)
                            return Convert.ToDecimal(balance).ToString("N3", new CultureInfo(SharedValues.CurrencyName));
                        if (Convert.ToInt32(SharedValues.decimalPlaces) == 0)
                            return Convert.ToDecimal(balance).ToString("N0", new CultureInfo(SharedValues.CurrencyName));
                        else
                            return Convert.ToDecimal(balance).ToString("N", new CultureInfo(SharedValues.CurrencyName));
                    }
                    else
                        return this.totalTaxStr;
                }
            }
            set
            {
                totalTaxStr = value;
                OnPropertyChanged("TotalTaxStr");
            }

        }
        public string TotalAfterTaxStr
        {
            get
            {
                //return _InvoiceAmount;
                if (totalAfterTaxStr == null)
                    return this.totalAfterTaxStr;
                else
                {
                    if (totalAfterTaxStr != "")
                    {
                        var balance = totalAfterTaxStr.Replace(",", "");
                        if (Convert.ToInt32(SharedValues.decimalPlaces) == 2)
                            return Convert.ToDecimal(balance).ToString("N", new CultureInfo(SharedValues.CurrencyName));
                        if (Convert.ToInt32(SharedValues.decimalPlaces) == 3)
                            return Convert.ToDecimal(balance).ToString("N3", new CultureInfo(SharedValues.CurrencyName));
                        if (Convert.ToInt32(SharedValues.decimalPlaces) == 0)
                            return Convert.ToDecimal(balance).ToString("N0", new CultureInfo(SharedValues.CurrencyName));
                        else
                            return Convert.ToDecimal(balance).ToString("N", new CultureInfo(SharedValues.CurrencyName));
                    }
                    else
                        return this.totalAfterTaxStr;
                }
            }
            set
            {
                totalAfterTaxStr = value;
                OnPropertyChanged("TotalAfterTaxStr");
            }

        }

        public int? CreatedBy
        {
            get
            {
                return createdBy;
            }
            set
            {
                createdBy = value;
                OnPropertyChanged("CreatedBy");
            }
        }
        public DateTime? CreatedDate
        {
            get
            {
                return createdDate;
            }
            set
            {
                createdDate = value;
                OnPropertyChanged("CreatedDate");
            }
        }
        
        #endregion
    }

    public class CreditNoteForm : ViewModelBase
    {
        private List<CustomerEntity> lstCustomers;
        private CreditNoteEntity cnote;


        private List<SalesInvoiceDetailEntity> invoiceDetails { get; set; }

        public CreditNoteEntity CreditNote
        {
            get
            {
                return cnote;
            }
            set
            {
                cnote = value;
                OnPropertyChanged("CreditNote");
            }
        }

        public List<SalesInvoiceDetailEntity> InvoiceDetails
        {
            get
            {
                return invoiceDetails;
            }
            set
            {
                invoiceDetails = value;
                OnPropertyChanged("InvoiceDetails");
            }
        }

        public List<CustomerEntity> LstCustomers
        {
            get
            {
                return lstCustomers;
            }
            set
            {
                lstCustomers = value;
                OnPropertyChanged("LstCustomers");
            }
        }

        public ObservableCollection<PandSDetailsModel> ProductAndServices
        {
            get;
            set;
        }

        public List<ContentModel> LstTermsAndConditions { get; set; }
    }
}
