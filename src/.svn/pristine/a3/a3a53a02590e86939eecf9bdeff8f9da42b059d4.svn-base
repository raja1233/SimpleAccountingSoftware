using Microsoft.Practices.Prism.Commands;
using Microsoft.Practices.Prism.Events;
using Microsoft.Practices.Prism.Regions;

using SDN.Common;
using SDN.UI.Entities.Login;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks; 
using System.Windows.Forms;
using System.Windows.Input;
using System.Text.RegularExpressions;
using Microsoft.Practices.ServiceLocation;
using SDN.Navigation.View;
using System.Configuration;
using Microsoft.SqlServer.Management.Smo;
using Microsoft.SqlServer.Management.Common;

namespace SDN.Navigation.ViewModel
{
    public class NewCompanyFileViewModel : ViewModelBase
    {
        #region Private Properties
        /// <summary>
        /// The region manager
        /// </summary>
        private readonly IRegionManager regionManager;

        /// <summary>
        /// The event aggregator
        /// </summary>
        private readonly IEventAggregator eventAggregator;
        private string databaseName;
        internal void RaisePropertyChanged(string prop)
        {
            if (PropertyChanged != null) { PropertyChanged(this, new PropertyChangedEventArgs(prop)); }
        }
        public event PropertyChangedEventHandler PropertyChanged;
        #endregion
        #region Public Properties
        public string DatabaseName
        {
            get
            {
                return this.databaseName;
            }
            set
            {
                this.databaseName = value;
                this.OnPropertyChanged("DatabaseName");
            }
        }
        #endregion
        #region Constructor
        public NewCompanyFileViewModel(IRegionManager regionManager, IEventAggregator eventAggregator)
        {
            this.regionManager = regionManager;
            this.eventAggregator = eventAggregator;
            DatabaseCommand = new RelayCommand(NewDatabase);
            eventAggregator.GetEvent<HeaderVisibilityChangeEvent>().Publish(false);
            eventAggregator.GetEvent<FooterVisibilityChangeEvent>().Publish(false);
            eventAggregator.GetEvent<TitleChangedEvent>().Publish("");
            eventAggregator.GetEvent<CompanynameChangedEvent>().Publish(" ");     
        }
        #endregion
        #region Relay Commands
        public RelayCommand DatabaseCommand { get; set; }
        #endregion
        #region Button Commands
        public static bool CheckDatabaseExists(string connectionString, string databaseName)
        {
            using (var connection = new SqlConnection(connectionString))
            {
                using (var command = new SqlCommand($"SELECT db_id('{databaseName}')", connection))
                {
                    connection.Open();
                    return (command.ExecuteScalar() != DBNull.Value);
                }
            }
        }
        private void NewDatabase(object param)
        {
            var name = databaseName;
            String str;
         
            if (!String.IsNullOrWhiteSpace(name))
            {
                string ConString = "Server=" + "(LocalDb)\\MSSQLLocalDB;" + ";Integrated security=SSPI ;Trusted_Connection=True;database=master";
                bool Status = CheckDatabaseExists(ConString, databaseName);
                if (Status == false)
                {
                    SqlConnection myConn = new SqlConnection
                   ("Server=" + "(LocalDb)\\MSSQLLocalDB;" + ";Integrated security=SSPI ;Trusted_Connection=True;database=master");


                    str = "CREATE DATABASE " + name;

                    SqlCommand myCommand = new SqlCommand(str, myConn);
                    try
                    {
                        myConn.Open();
                        myCommand.ExecuteNonQuery();
                        RunScript();
                        StringBuilder Con = new StringBuilder("metadata=res://*/SASEntitiesEDM.csdl|res://*/SASEntitiesEDM.ssdl|res://*/SASEntitiesEDM.msl;provider=System.Data.SqlClient;provider connection string=';data source=(LocalDb)\\MSSQLLocalDB;Trusted_Connection=True;Integrated Security=True;MultipleActiveResultSets=True;App=EntityFramework;");
                        //Con.Append("res://*/SASEntitiesEDM.csdl|res://*/SASEntitiesEDM.ssdl|res://*/SASEntitiesEDM.msl;provider=System.Data.SqlClient;provider connection string=&quot;server=SDN-450\\SQLEXPRESS;Trusted_Connection=True;Integrated Security=True;MultipleActiveResultSets=True;App=EntityFramework&quot;");
                        Con.Append("initial catalog=");
                        Con.Append(databaseName);
                        Con.Append("';");
                        string finalconnectionstring = Con.ToString();
                        var config = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None);
                        var connectionString1 = ConfigurationManager.ConnectionStrings["SASEntitiesEDM"].ConnectionString;
                        var connectionStringsSection = (ConnectionStringsSection)config.GetSection("connectionStrings");
                        connectionStringsSection.ConnectionStrings["SASEntitiesEDM"].ConnectionString = finalconnectionstring;
                        config.Save();
                        ConfigurationManager.RefreshSection("connectionStrings");
                        var connectionString = ConfigurationManager.ConnectionStrings["SASEntitiesEDM"].ConnectionString;

                        var view = ServiceLocator.Current.GetInstance<LoginUserView>();
                        IRegion region1 = this.regionManager.Regions[RegionNames.MainRegion];
                        region1.Add(view);
                        if (region1 != null)
                        {
                            region1.Activate(view);
                        }
                        eventAggregator.GetEvent<TabVisibilityEvent>().Publish(false);
                        eventAggregator.GetEvent<SubTabVisibilityEvent>().Publish(false);
                        //MessageBox.Show("Database Created Successfully", "MyApp",
                        //    MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }
                    catch (Exception ex)
                    {
                        throw ex;
                    }
                    finally
                    {
                        if (myConn.State == ConnectionState.Open)
                        {
                            myConn.Close();
                        }
                    }
                }
                else
                {
                    MessageBox.Show("Database is Already Exist");
                }
            }
            else
            {
                MessageBox.Show("Please Enter Database Name");
            }
            
           

        }
        #endregion
        #region Public Methods
        public void RunScript()
        {

            
            string sqlConnectionString = @"Integrated Security=SSPI;Persist Security Info=False;Initial Catalog=" + databaseName + ";Data Source=(LocalDb)\\MSSQLLocalDB";
            //FileInfo file = new FileInfo("D:\\SimpleAccounting script.sql");
            //string script = file.OpenText().ReadToEnd();
            //var scripts = Regex.Split(script, @"(\s+|;|\n|\r)GO", RegexOptions.Multiline);
            string exefolder = System.Windows.Forms.Application.StartupPath;
            string scriptone = System.IO.Path.Combine(exefolder, @"SAS_SchemaAndData.sql");
            string scripttwo = System.IO.Path.Combine(exefolder, @"SAS_SchemaOnly.sql");
            string scriptthree = System.IO.Path.Combine(exefolder, @"SAS_VPAndFunction.sql");
            using (SqlConnection conn = new SqlConnection(sqlConnectionString))
            {
                Server db = new Server(new ServerConnection(conn));
                string script = File.ReadAllText(scriptone);
                string script1 = File.ReadAllText(scripttwo);
                string script2 = File.ReadAllText(scriptthree);
                db.ConnectionContext.ExecuteNonQuery(script);
                db.ConnectionContext.ExecuteNonQuery(script1);
                db.ConnectionContext.ExecuteNonQuery(script2);
            }
           
        }
        #endregion
        #region BAckground methods
        protected override void OnPropertyChanged(string name)
        {
            var eventHandler = this.PropertyChanged;
            if (eventHandler != null)
            {
                eventHandler(this, new PropertyChangedEventArgs(name));
            }

            base.OnPropertyChanged(name);
        }
        #endregion
    }
}
