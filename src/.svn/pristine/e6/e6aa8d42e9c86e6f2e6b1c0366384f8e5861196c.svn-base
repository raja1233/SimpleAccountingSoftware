using Microsoft.Practices.Prism.Commands;
using Microsoft.Practices.Prism.Events;
using Microsoft.Practices.Prism.Regions;
using Newtonsoft.Json;
using SASClient.Accounts.Services;
using SASClient.CashBank.Services;
using SASClient.CloseRequest;
using SDN.Common;
using SDN.Product.ViewModel;
using SDN.Sales.Services;
using SDN.Settings.Services;
using SDN.UI.Entities;
using SDN.UI.Entities.Accounts;
using SDN.UI.Entities.HomeScreen;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;

using System.Windows.Input;

namespace SASClient.Accounts.ViewModel
{
    public  class JournalViewModel  : JournalFormEntity
    {
        #region  "private property"
        internal void RaisePropertyChanged(string prop)
        {
            if (PropertyChanged != null) { PropertyChanged(this, new PropertyChangedEventArgs(prop)); }
        }
        public event PropertyChangedEventHandler PropertyChanged;
        private string _DateErrors;
        private DateTime? _JournalDateCalender;
        ICompanyDetails CompanyD = new CompanyDetails();
        private readonly IRegionManager regionManager;
        private readonly IEventAggregator eventAggregator;
        private ObservableCollection<JGridViewModel> _JournalDetailsEntity;
        private ObservableCollection<JGridViewModel> SelectedList;
        private static IEnumerable<JournalFormEntity> JournalList;
        private ObservableCollection<JGridViewModel> TempList;
        private IJournalFormRepository journalRepository = new JournalFormRepository();
        private ObservableCollection<JournalFormEntity> _JournalServices;
        private static bool _IsSave = false;
        StackList itemlist = new StackList();
        private bool isNew;
        private string  casErrors;
        #endregion
        #region  "public property"
        public string DateErrors
        {
            get
            {
                return _DateErrors;
            }
            set
            {
                _DateErrors = value;
                OnPropertyChanged("DateErrors");
            }
        }
        public DateTime? JournalDateCalender
        {
            get
            {
                return _JournalDateCalender;
            }
            set
            {
                _JournalDateCalender = value;
                OnPropertyChanged("JournalDateCalender");
            }
        }
        public ObservableCollection<JGridViewModel> JournalDetailsEntity
        {
            get
            {
                return _JournalDetailsEntity;
            }
            set
            {
                _JournalDetailsEntity = value;
                OnPropertyChanged("JournalDetailsEntity");
            }
        }
        public bool IsNew
        {
            get { return isNew; }
            set
            {
                isNew = value;
                OnPropertyChanged("IsNew");
            }
        }

        public string CASErrors
        {
            get { return casErrors; }
            set
            {
                casErrors = value;
                OnPropertyChanged("CASErrors");
            }
        }
        public ObservableCollection<JournalFormEntity> JournalServices
        {
            get
            {
                return _JournalServices;
            }
            set
            {
                if (_JournalServices != value)
                {
                    _JournalServices = value;
                    OnPropertyChanged("JournalServices");
                }
            }
        }
        #endregion
        #region "Constructor"
        public JournalViewModel(IRegionManager regionManager, IEventAggregator eventAggregator)
        {
            this.regionManager = regionManager;
            this.eventAggregator = eventAggregator;
            LoadSupplierBackground();
            SelectedList = new ObservableCollection<JGridViewModel>();
            CloseCommand = new DelegateCommand(Close);
            JournalDetailsEntity = new ObservableCollection<JGridViewModel>();
             //SaveCommand = new RelayCommand(SaveCountAndAdjustStock);
             NewJournalCommand = new RelayCommand(GetNewJpornal);
            SaveCommand = new RelayCommand(SaveJournalData,CanSave);
            JournalDate = DateTime.Now;
            if (!String.IsNullOrEmpty(SharedValues.NewClick))
            {
                if (SharedValues.NewClick != "New")
                {
                    MustCompare = false;
                    GetJournalDetails(SharedValues.NewClick);
                }
                else if (SharedValues.NewClick == "New")
                {
                    MustCompare = true;
                    GetNewJpornal(null);
                }
            }
        }
        public ICommand CloseCommand { get; set; }
        public RelayCommand NewJournalCommand { get; set; }
        public RelayCommand SaveCommand { get; set; }


        #endregion

        #region BackGround Worker
        private void LoadSupplierBackground()
        {
            Mouse.OverrideCursor = System.Windows.Input.Cursors.Wait;

            //run time-consuming operations on a background thread
            BackgroundWorker worker = new BackgroundWorker();

            //Set the WorkerReportsProgress property to true if you want the BackgroundWorker to support progress updates.
            //When this property is true, user code can call the ReportProgress method to raise the ProgressChanged event.
            worker.WorkerReportsProgress = true;

            //This event is raised when you call the RunWorkerAsync method. This is where you start the time-consuming operation.
            worker.DoWork += new DoWorkEventHandler(this.LoadSupplierBackground);

            // This event is raised when you call the ReportProgress method.
            worker.ProgressChanged += new ProgressChangedEventHandler(this.LoadSupplierBackgroundProgress);

            //The RunWorkerCompleted event is raised when the background worker has completed. 
            //Depending on whether the background operation completed successfully, encountered an error,
            //or was canceled, update the user interface accordingly
            worker.RunWorkerCompleted += new RunWorkerCompletedEventHandler(this.LoadSupplierBackgroundComplete);

            //Starts running a background operation
            worker.RunWorkerAsync();
        }

        private void LoadSupplierBackground(object sender, DoWorkEventArgs e)
        {

            int minHeight = 300;
            int headerRows = 300;//180+40+30+10;
            var height = System.Windows.SystemParameters.PrimaryScreenHeight - headerRows - 45;
            bool validHeight = int.TryParse(height.ToString(), out minHeight);
            this.SIGridHeight = minHeight;
            RefreshData();
        }
       
        public void RefreshData()
        {
            JournalList = journalRepository.GetAccountsListComboList();
            if (JournalList != null)
            {
                JournalServices = new ObservableCollection<JournalFormEntity>(JournalList);
            }
            GetOptionsandTaxValues();
        }
        void GetOptionsandTaxValues()
        {
            OptionsEntity oData = new OptionsEntity();
            IReceiveMoneyListRepository purchaseRepository = new ReceiveMoneyListRepository();
            oData = purchaseRepository.GetOptionSettings();
            if (oData != null)
            {
                this.CurrencyName = oData.CurrencyCode;     //there is no currency name field in database         
                this.CurrencyCode = oData.CurrencyCode;
                this.CurrencyFormat = oData.NumberFormat;
                this.DateFormat = oData.DateFormat;
                this.DecimalPlaces = oData.DecimalPlaces;

            }
            else
            {
                this.CurrencyName = "USD";
                this.CurrencyCode = "USD";
                this.CurrencyFormat = "en-US";
                this.DateFormat = "dd/MM/yyyy";
            }
        }
        /// <summary>
        ///  Occurs when System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32) is called.
        /// </summary>
        /// <param name="sender">The sender.</param>
        /// <param name="e">The <see cref="ProgressChangedEventArgs"/> instance containing the event data.</param>
        private void LoadSupplierBackgroundProgress(object sender, ProgressChangedEventArgs e)
        {

        }

        ///// <summary>
        /////  Occurs when the background operation has completed, has been canceled, or has raised an exception.
        ///// </summary>
        ///// <param name="sender">The sender.</param>
        ///// <param name="e">The <see cref="RunWorkerCompletedEventArgs"/> instance containing the event data.</param>
        private void LoadSupplierBackgroundComplete(object sender, RunWorkerCompletedEventArgs e)
        {

            Mouse.OverrideCursor = null;

        }

        #endregion
        #region  "public method"
        public void GetNewJpornal(object param)
        {
            this.JournalNo = "JO-" + journalRepository.GetLatestInvoiceNo();

            IsNew = true;
           
            if (JournalDetailsEntity != null)
            {
                if (JournalDetailsEntity.Count > 0)
                {
                    JournalDetailsEntity.Clear();
                    // var row = new CollectAmountDataGridViewModel();
                    //  PQDetailsEntity.Add(row);
                    OnPropertyChanged("JournalDetailsEntity");
                }
            }
            var row = new JGridViewModel(JournalList);
            //row.SelectedPSID = 0;

            JournalDetailsEntity.Add(row);
            OnPropertyChanged("JournalDetailsEntity");
            TempList = JournalDetailsEntity;
            sumCredit = null;
            sumDebit = null;
        }
        private void Close()
        {
            try
            {
                List<string> listview = (List<string>)Application.Current.Resources["views"];
                var secondlast = listview.AsEnumerable().Reverse().Skip(1).First();
                CloseView close = new CloseView(regionManager, eventAggregator);
                close.CloseViewRequest(secondlast, true);
                listview.RemoveAt(listview.Count - 1);
            }
            catch (Exception)
            {
                List<string> listview = (List<string>)Application.Current.Resources["views"];
                CloseView close = new CloseView(regionManager, eventAggregator);
                close.CloseViewRequest("MainView", true);
                listview.RemoveAt(listview.Count - 1);
            }
            //List<string> calledlist = stack.x();
        }
        public void  GetJournalDetails(string JNo)
        {
            OptionsEntity oData = new OptionsEntity();
            ISalesOrderListRepository purchaseRepository = new SalesOrderListRepository();
            oData = purchaseRepository.GetOptionSettings();
            string obj = JNo.ToString();
            JournalForm JObj = journalRepository.GetJournalDetails(obj);
            this.JournalNo = JObj.JournalData.JournalNo;
            DateTime Dateinstr = (DateTime)JObj.JournalData.JournalDate;
            this.JournalDateStr = Dateinstr.ToString(oData.DateFormat);
            this.JournalDetailsEntity = new ObservableCollection<JGridViewModel>();
            this.sumCredit =Convert.ToString(JObj.JournalaDataDetails.Sum(x => x.Credit));
            this.sumDebit = Convert.ToString(JObj.JournalaDataDetails.Sum(x => x.Debit));

            foreach (var item in JObj.JournalaDataDetails)
            {
                JGridViewModel pqEntity = new JGridViewModel(JournalList);
                pqEntity.ID = item.ID;
                pqEntity.JournalDateStr = item.JournalDateStr;
                pqEntity.Credit = item.Credit;
                pqEntity.Debit = item.Debit;
                
                JournalDetailsEntity.Add(pqEntity);
            }
        }
        public int ManageDuplicateJournalData()
        {
            int rowFocusindex = -1;
            //ShowAllCount = PSDetailsEntity.Where(e => e.SelectedPSID != 0).Count();
            TempList = new ObservableCollection<JGridViewModel>();
            TempList = JournalDetailsEntity;

            var query = TempList.GroupBy(x => x.ID)
              .Where(g => g.Count() > 1)
              .ToList();
            if (query.Count > 0 && JournalDetailsEntity.Count > 1)
            {

                var obj1 = query[0].ElementAt(0);
                var obj2 = query[0].ElementAt(1);
                int? qty = 1;
                
                qty = query[0].ElementAt(0).CountQty + query[0].ElementAt(1).CountQty;
               
                var index1 = TempList.IndexOf(query[0].ElementAt(0));
                var index2 = TempList.IndexOf(query[0].ElementAt(1));
                OnPropertyChanged("JournalDetailsEntity");
                TempList = JournalDetailsEntity;
            }
            else
            {
                int count = JournalDetailsEntity.Count(x => x.ID == 0);
                if (count == 0)
                {
                    var row = new JGridViewModel(JournalList);
                    // row.CountQty = 0;
                    //   row.GSTRate = TaxRate;

                    JournalDetailsEntity.Add(row);
                    OnPropertyChanged("JournalDetailsEntity");
                    TempList = JournalDetailsEntity;
                    rowFocusindex = -1;
                }
                else
                {
                    var emptyRow = TempList.Where(y => y.ID == 0).FirstOrDefault();
                    rowFocusindex = JournalDetailsEntity.IndexOf(emptyRow);
                }

            }        
            return rowFocusindex;
        }
        public string ValidateJournal()
        {
            
            string msg = string.Empty;

            var RequiredJournalList = JournalDetailsEntity.Take(JournalDetailsEntity.Count - 1);
            sumDebit =Convert.ToString(JournalDetailsEntity.Sum(x => x.Debit));
            sumCredit =Convert.ToString(JournalDetailsEntity.Sum(y => y.Credit));
            //var journalid = JournalDetailsEntity.Select(x => x.ID);
            //var creditamt = JournalDetailsEntity.Select(x => x.Credit);
           // var debitamt = JournalDetailsEntity.Select(x => x.Debit);
            if (sumCredit != sumDebit)
            {
                msg = "Total Amount of Debit and Credit should be balance";
            }
            
            foreach (var item in RequiredJournalList)
            {
                var journalid = item.ID;
                var creditamt = item.Credit;
                var debitamt = item.Debit;
               
                if (journalid == null)
                {
                    msg = "Data Cannot be Empty";
                }
                else if (creditamt < 0 && debitamt == null)
                {
                    msg = "Amount Shouldn't be negative";
                }
                else if (debitamt < 0 && creditamt == null)
                {
                    msg = "Amount Shouldn't be negative";
                }
                else if (sumDebit == "0.00" && sumCredit == "0.00")
                {
                    if(creditamt == null || debitamt == null)
                    {
                        msg = "Amount Shouldn't be empty";
                    }
                }
            }
            if(RequiredJournalList.Count() == 0)
            {
                foreach (var item in JournalDetailsEntity)
                {
                    var journalid = item.ID;
                    var creditamt = item.Credit;
                    var debitamt = item.Debit;

                    if (journalid == null)
                    {
                        msg = "Data Cannot be Empty";
                    }
                    else if (creditamt < 0 && debitamt == null)
                    {
                        msg = "Amount Shouldn't be negative";
                    }
                    else if (debitamt < 0 && creditamt == null)
                    {
                        msg = "Amount Shouldn't be negative";
                    }
                    else if (sumDebit == "0.00" && sumCredit == "0.00")
                    {
                        if (creditamt == null || debitamt == null)
                        {
                            msg = "Amount Shouldn't be empty";
                        }
                    }
                }
            }
            if (IsNew == true)
            {
                if (!string.IsNullOrEmpty(JournalNo))
                {
                    if (journalRepository.IsChequeNoPresent(JournalNo))
                    {
                        return msg = "Entry against Cheque No is already done";
                    }
                }
            }


            return msg;
        }
        protected override void OnPropertyChanged(string name)
        {
            var eventHandler = this.PropertyChanged;
            if (eventHandler != null)
            {
                eventHandler(this, new PropertyChangedEventArgs(name));
            }
            switch (name)
            {
                case "JournalDateCalender":
                    FillStartDate();
                    break;


            }
            base.OnPropertyChanged(name);
        }


        void FillStartDate()
        {
            string date = this.DateFormat as string;
            JournalDateStr = Convert.ToDateTime(this.JournalDateCalender).ToString(date);

        }
        public void SaveJournalData(object param)
        {
            

            MessageBoxResult result = System.Windows.MessageBox.Show("Do you want to save changes?", "Save Confirmation", MessageBoxButton.YesNo);
            if (result == MessageBoxResult.Yes)
            {
                Mouse.OverrideCursor = System.Windows.Input.Cursors.Wait;
                string msg = ValidateJournal();
                if (msg != string.Empty)
                {
                    CASErrors = msg;
                    Mouse.OverrideCursor = null;
                    return;
                }

                CASErrors = string.Empty;
                JournalForm JForm = GetDataIntoModel();

                int i = 0;
                if (IsNew == true)
                {
                    i = journalRepository.SaveJournalData(JForm);
                }
                //else
                //{
                //    i = casRepository.UpdateCountAndAdjustStock(JForm);
                //}
                if (i > 0)
                {

                    IsNew = false;
                }
                Mouse.OverrideCursor = null;
                _IsSave = false;
            }
            _IsSave = true;
        }
        public bool CanSave(object param)
        {
            string date = this.DateFormat as string;
            var c = CompanyD.GetCompanyDetails().Comp_year_start_date;

            if (JournalDateStr != null)
            {
                try
                {
                    if (!string.IsNullOrEmpty(JournalDateStr) && !string.IsNullOrWhiteSpace(JournalDateStr))
                    {

                        //item.StartDate = item.StartDate.Replace('.', '/');
                        //item.StartDate = item.StartDate.Replace('-', '/');
                        //item.EndDate = item.EndDate.Replace('.', '/');
                        //item.EndDate = item.EndDate.Replace('-', '/');
                        var Start = (DateTime.ParseExact(JournalDateStr, date, CultureInfo.InvariantCulture));
                        this.DateErrors = "";
                        //var End = (DateTime.ParseExact(item.EndDate, date, CultureInfo.InvariantCulture));
                        if (Start < c)
                        {
                            this.DateErrors = "Date should be greater than Start Financial year";
                            return false;
                        }

                    }                   
                }
                catch (Exception ex)
                {
                    this.DateErrors = "Please enter the date in " + date + " format!";
                    return false;
                }
                return true;
            }
          
            else
            {
                return false;
            }
        }
        public JournalForm GetDataIntoModel()
        {
            OptionsEntity oData = new OptionsEntity();
            ISalesOrderListRepository purchaseRepository = new SalesOrderListRepository();
            oData = purchaseRepository.GetOptionSettings();
            JournalForm JForm = new JournalForm();
            JForm.JournalaDataDetails= new List<JournalFormEntity>();
            JournalFormEntity model = new JournalFormEntity();
            model.JournalNo = this.JournalNo;
            model.JournalDate = DateTime.ParseExact(this.JournalDateStr, oData.DateFormat, null);

            JForm.JournalData = model;

            foreach (var item in JournalDetailsEntity)
            {
                if (item.ID != null)
                {
                    JournalFormEntity jEntity = new JournalFormEntity();
                    jEntity.ID = item.ID;
                    jEntity.JournalDateStr = item.JournalDateStr;
                    jEntity.Credit = item.Credit;
                    jEntity.Debit = item.Debit;
                    if (item.ID != 0 && Convert.ToInt32(item.ID) > 0)
                    {
                        JForm.JournalaDataDetails.Add(jEntity);
                    }
                }
            }

            return JForm;
        }
        #endregion

    }

}

