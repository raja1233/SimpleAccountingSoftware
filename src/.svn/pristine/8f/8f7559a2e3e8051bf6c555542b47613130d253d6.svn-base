
using Newtonsoft.Json;
using SDN.Purchasings.DALInterface;
using SDN.UI.Entities;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using SASDAL;
using System.Data.SqlClient;

namespace SDN.Purchasings.DAL
{
    public class DebitNoteListDAL : IDebitNoteListDAL
    {
        SASEntitiesEDM entities = new SASEntitiesEDM();
        public List<DebitNoteListEntity> GetAllPurDebit()
        {
            List<DebitNoteListEntity> DebitList = entities.Database.SqlQuery<DebitNoteListEntity>("DebitNoteList").ToList();
           
            return DebitList;
        }

          public List<DebitNoteListEntity> GetAllPurDebitJson(string JsonData, bool? ExcincTax)
        {
            List<DebitNoteListEntity> DebitList = new List<DebitNoteListEntity>();
            DebitNoteListEntity DebitList1 = new DebitNoteListEntity();
            List<DebitNoteListEntity> DebitListReturn = new List<DebitNoteListEntity>();
            var objResponse1 = JsonConvert.DeserializeObject<List<SearchEntity>>(JsonData);
            if (objResponse1.Count > 0)
            {
                DebitList = entities.Database.SqlQuery<DebitNoteListEntity>("USP_DebitNoteList @year,@Quarter,@Month,@ShowAll,@SDate,@EDate",
                    new SqlParameter("Year", Convert.ToInt32(objResponse1[0].FieldValue)),
                          new SqlParameter("Quarter", Convert.ToInt32(objResponse1[1].FieldValue)),
                            new SqlParameter("Month", Convert.ToInt32(objResponse1[2].FieldValue)),
                             new SqlParameter("ShowAll", Convert.ToBoolean(objResponse1[3].FieldValue)),
                              new SqlParameter("SDate", objResponse1[4].FieldValue),
                                new SqlParameter("EDate", objResponse1[5].FieldValue)
                                ).ToList();
            }
            else
            {
                DebitList = entities.Database.SqlQuery<DebitNoteListEntity>("USP_DebitNoteList @year,@Quarter,@Month,@ShowAll,@SDate,@EDate",
                    new SqlParameter("Year", Convert.ToInt32(0)),
                          new SqlParameter("Quarter", Convert.ToInt32(0)),
                            new SqlParameter("Month", Convert.ToInt32(0)),
                             new SqlParameter("ShowAll",1),
                              new SqlParameter("SDate", ""),
                                new SqlParameter("EDate", "")
                                ).ToList();
            }
            return DebitList;
        }
              
        public bool SaveSearchJson(string jsonSearch, int ScreenId, string ScreenName)
        {
            try
            {
                var result = entities.LastSelectionHistories.Where(x => x.Screen_Id == ScreenId).FirstOrDefault();
                if (result != null)
                {
                    result.Last_Selection = jsonSearch;
                    result.Last_Updated = DateTime.Now;
                    entities.SaveChanges();
                    return true;
                }
                else
                {
                    LastSelectionHistory lastSelection = new LastSelectionHistory()
                    {
                        Screen_Id = ScreenId,
                        Screen_Name = ScreenName,
                        Last_Selection = jsonSearch,
                        Last_Updated = DateTime.Now
                    };
                    entities.LastSelectionHistories.Add(lastSelection);
                    entities.SaveChanges();
                    return true;
                }
            }
            catch
            {
                return false;
            }
        }

        public string GetLastSelectionData(int ScreenId)
        {
            try
            {
                var result = entities.LastSelectionHistories.Where(x => x.Screen_Id == ScreenId).FirstOrDefault();
                if (result != null)
                    return result.Last_Selection;
                else
                    return null;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public string GetDateFormat()
        {
            try
            {
                var DateFormatResult = entities.Options.FirstOrDefault();
                string DateFormat = null;
                if (DateFormatResult != null)
                {
                    return DateFormat = DateFormatResult.Date_Format;
                }
                else
                {
                    return DateFormat = null;
                }

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

    }
}
