
using Microsoft.Practices.Prism.Commands;
using Microsoft.Practices.Prism.Events;
using Microsoft.Practices.Prism.Regions;
using Microsoft.Practices.ServiceLocation;
using SASClient.Accounts.ViewModel;
using SASClient.Accounts.Views;
using SASClient.CashBank.Services;
using SDN.Common;
using SDN.UI.Entities;
using SDN.UI.Entities.CashandBank;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Forms;
using System.Windows.Input;

namespace SASClient.CashBank.ViewModels
{
    public class AccountsDetailsListViewModel : AccountsDetailsListEntity
    {
        private readonly IRegionManager regionManager;
        private readonly IEventAggregator eventAggregator;
        private List<AccountsDetailsListEntity> accountsDetailsList;
        private List<AccountsDetailsListEntity> accountsDetailsListCopy;
        private IAccountsDetailsListRepository AccountsDetailsRepository = new AccountsDetailsListRepository();
        private int Count = 0;
        //private DelegateCommand previousYearAccountOpeningBalance = null;
        private string currentFilter;

        public RelayCommand NavigateToAccountDetailCommand { get; set; }
        public RelayCommand FilterAccountDetailsListClick { get; set; }

        public RelayCommand RefreshCommand { get; set; }

        public RelayCommand NewCommand { get; set; }

        public RelayCommand ClickSaveCommand { get; set; }
        public RelayCommand DataGridLeftClick { get; set; }
        public RelayCommand PreviousAccountingSystemClosingBalance { get; set; }
        public RelayCommand NewFinancialYear { get; set; }
        //public DelegateCommand PreviousYearAccountOpeningBalance
        //{
        //    get
        //    {
        //        return (this.previousYearAccountOpeningBalance ?? new DelegateCommand(this.PreviousYearAccountOpeningBalanceview));
        //    }
        //}

        public List<AccountsDetailsListEntity> AccountsDetailsList
        {
            get { return accountsDetailsList; }
            set
            {
                accountsDetailsList = value;
                OnPropertyChanged(() => AccountsDetailsList);
            }
        }
        
        public List<AccountsDetailsListEntity> AccountsDetailsListCopy
        {
            get { return accountsDetailsListCopy; }
            set
            {
                accountsDetailsListCopy = value;
            }
        }
        public AccountsDetailsListViewModel(IRegionManager regionManager, IEventAggregator eventAggregator)
            : base()
        {
            this.regionManager = regionManager;
            this.eventAggregator = eventAggregator;
            LoadSupplierBackground();
            NavigateToAccountDetailCommand = new RelayCommand(OnAccountNameClick);
            FilterAccountDetailsListClick = new RelayCommand(OnFilterClick);
            //RefreshCommand = new RelayCommand(RefreshData);
            NewCommand = new RelayCommand(OnNewClick);
            currentFilter = "All";
            GetAllAccountsDetailsList();
            DataGridLeftClick = new RelayCommand(LeftClick);
            PreviousAccountingSystemClosingBalance = new RelayCommand(PreviousAccountingSystemClosingBalanceview);
            NewFinancialYear = new RelayCommand(StartNewFinancial);

        }
        public void LeftClick(object param)
        {

        }
        public void StartNewFinancial(object param)
        {
            string msg = "Simple will backup your Company file.\n"
                + "Assets, Liabilities and Capital Accounts: Simple will transfer last year current balances to this year opening balances.Simple will put zeros in this year year-to - date and current balances.\n"
                + "Income, Costs and Expenses Accounts: Simple will put zeros in this year opening balances, year - to - date and current balances.\n"
                + "Income, Costs and Expenses Accounts do not have opening balances.";

            MessageBoxManager.Yes = "NewYear";
            MessageBoxManager.No = "Cancel";
            MessageBoxManager.Register();
            DialogResult result = System.Windows.Forms.MessageBox.Show(msg, "", MessageBoxButtons.YesNo);
            if (result == DialogResult.Yes)
            {
                DialogResult StartResult = System.Windows.Forms.MessageBox.Show("Are you sure you want to Start New Financial Year?", "", MessageBoxButtons.OKCancel);
                if (StartResult == DialogResult.OK)
                {
                    try
                    {
                        AccountsDetailsRepository.StartNewFinancialYear(StartResult.ToString()).ToString();

                    }
                    catch (Exception e)
                    {

                        throw e;
                    }


                }
                else
                {

                }
            }
            else
            {

            }
            MessageBoxManager.Unregister();
        }
        public void PreviousAccountingSystemClosingBalanceview(object param)
        {
        
            SharedValues.getValue = "UnpaidSalesInvoiceTab";
            var tabview = ServiceLocator.Current.GetInstance<AccountsDetailsTabView>();

            var region = this.regionManager.Regions[RegionNames.MenuBarRegion];
            region.Add(tabview);
            if (region != null)
            {
                region.Activate(tabview);
            }

            var view = ServiceLocator.Current.GetInstance<UnpaidSalesInvoiceView>();

            var mainregion = this.regionManager.Regions[RegionNames.MainRegion];
            mainregion.Add(view);
            if (mainregion != null)
            {
                mainregion.Activate(view);
            }
            eventAggregator.GetEvent<TabVisibilityEvent>().Publish(true);
            //eventAggregator.GetEvent<SubTabVisibilityEvent>().Publish(false);
            eventAggregator.GetEvent<TitleChangedEvent>().Publish("Previous Accounting System Closing Balance");
    }
        private void GetAllAccountsDetailsList()
        {
            IAccountsDetailsListRepository accRepository = new AccountsDetailsListRepository();
            this.AccountsDetailsList = new List<AccountsDetailsListEntity>( accRepository.GetAllAccountsDetailsList());
            AccountsDetailsListCopy = this.AccountsDetailsList;
        }

        void OnNewClick(object param)
        {
            string obj = param.ToString();
            SharedValues.NewClick = obj;
            var mainview = ServiceLocator.Current.GetInstance<SDN.CashBank.Views.AccountsDetailsView>();
            var mainregion = this.regionManager.Regions[RegionNames.MainRegion];
            mainregion.Add(mainview);
            if (mainregion != null)
            {
                mainregion.Activate(mainview);
            }

            var tabview = ServiceLocator.Current.GetInstance<SASClient.Accounts.Views.AccountsTabView>();
            var tabregion = this.regionManager.Regions[RegionNames.MenuBarRegion];
            tabregion.Add(tabview);
            if (tabregion != null)
            {
                tabregion.Activate(tabview);
            }
            eventAggregator.GetEvent<SubTabVisibilityEvent>().Publish(false);
            eventAggregator.GetEvent<TabVisibilityEvent>().Publish(true);
            eventAggregator.GetEvent<TitleChangedEvent>().Publish("Accounts Details Form");
        }
        void OnAccountNameClick(object param)
        {
            string obj = param.ToString();
            SharedValues.getValue = obj;
            var mainview = ServiceLocator.Current.GetInstance<SDN.CashBank.Views.AccountsDetailsView>(obj);
            var mainregion = this.regionManager.Regions[RegionNames.MainRegion];
            mainregion.Add(mainview);
            if (mainregion != null)
            {
                mainregion.Activate(mainview);
            }

            var tabview = ServiceLocator.Current.GetInstance<SASClient.Accounts.Views.AccountsTabView>(obj);
            var tabregion = this.regionManager.Regions[RegionNames.MenuBarRegion];
            tabregion.Add(tabview);
            if (tabregion != null)
            {
                tabregion.Activate(tabview);
            }
            eventAggregator.GetEvent<SubTabVisibilityEvent>().Publish(false);
            eventAggregator.GetEvent<TabVisibilityEvent>().Publish(true);
            eventAggregator.GetEvent<TitleChangedEvent>().Publish("Accounts Details Form");
        }

        void OnFilterClick(object param)
        {
            string buttonContent = (string)param;
            currentFilter = buttonContent;
            if (buttonContent == "All")
            {
                this.AccountsDetailsList = AccountsDetailsListCopy;
            }
            else if(buttonContent=="Assets")
            {
                this.AccountsDetailsList = AccountsDetailsListCopy.Where(x => x.AccountType.Contains(buttonContent) || x.AccountType.Equals("Cash and Bank")).ToList();
            }
            else if (buttonContent == "Liabilities")
            {
                this.AccountsDetailsList = AccountsDetailsListCopy.Where(x => x.AccountType.Contains(buttonContent) || x.AccountType.Equals("Credit Card")).ToList();
            }
            else
                this.AccountsDetailsList = AccountsDetailsListCopy.Where(x => x.AccountType.Contains(buttonContent)).ToList();
        }
        void GetOptionsandTaxValues()
        {
            OptionsEntity oData = new OptionsEntity();
            IReceiveMoneyListRepository purchaseRepository = new ReceiveMoneyListRepository();
            oData = purchaseRepository.GetOptionSettings();
            if (oData != null)
            {
                this.CurrencyName = oData.CurrencyCode;     //there is no currency name field in database         
                this.CurrencyCode = oData.CurrencyCode;
                this.CurrencyFormat = oData.NumberFormat;
                this.DateFormat = oData.DateFormat;
                this.DecimalPlaces = oData.DecimalPlaces;

            }
            else
            {
                this.CurrencyName = "USD";
                this.CurrencyCode = "USD";
                this.CurrencyFormat = "en-US";
                this.DateFormat = "dd/MM/yyyy";
            }
        }
        //void RefreshData(object param)
        //{
        //    GetAllAccountsDetailsList();
        //    OnFilterClick(currentFilter);
        //}
        #region background region
        private void LoadSupplierBackground()
        {
            Mouse.OverrideCursor = System.Windows.Input.Cursors.Wait;

            //run time-consuming operations on a background thread
            BackgroundWorker worker = new BackgroundWorker();

            //Set the WorkerReportsProgress property to true if you want the BackgroundWorker to support progress updates.
            //When this property is true, user code can call the ReportProgress method to raise the ProgressChanged event.
            worker.WorkerReportsProgress = true;


            //This event is raised when you call the RunWorkerAsync method. This is where you start the time-consuming operation.
            worker.DoWork += new DoWorkEventHandler(this.LoadSupplierBackground);

            // This event is raised when you call the ReportProgress method.
            worker.ProgressChanged += new ProgressChangedEventHandler(this.LoadSupplierBackgroundProgress);

            //The RunWorkerCompleted event is raised when the background worker has completed. 
            //Depending on whether the background operation completed successfully, encountered an error,
            //or was canceled, update the user interface accordingly
            worker.RunWorkerCompleted += new RunWorkerCompletedEventHandler(this.LoadSupplierBackgroundComplete);

            //Starts running a background operation
            worker.RunWorkerAsync();
        }
        private void LoadSupplierBackground(object sender, DoWorkEventArgs e)
        {

            int minHeight = 300;
            int headerRows = 260;//180+40+30+10;
            var height = System.Windows.SystemParameters.PrimaryScreenHeight - headerRows - 60;
            bool validHeight = int.TryParse(height.ToString(), out minHeight);
            this.AccountDetailsGridHeight = minHeight;

            RefreshData();
            //GetOptionsandTaxValues();
        }


        private void LoadSupplierBackgroundProgress(object sender, ProgressChangedEventArgs e)
        {

        }
        private void LoadSupplierBackgroundComplete(object sender, RunWorkerCompletedEventArgs e)
        {
            Mouse.OverrideCursor = null;
            Count = 1;

        }
        public void RefreshData()
        {
            GetOptionsandTaxValues();
        }
        #endregion end background
    }
}
