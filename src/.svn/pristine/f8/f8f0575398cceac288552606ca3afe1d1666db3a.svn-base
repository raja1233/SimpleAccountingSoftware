using Microsoft.Practices.Prism.Commands;
using Microsoft.Practices.Prism.Events;
using Microsoft.Practices.Prism.Regions;
using Microsoft.Practices.ServiceLocation;
using SASClient.Accounts.Services;
using SASClient.CashBank.Services;
using SASClient.CashBank.Views;
using SASClient.CloseRequest;
using SASClient.File.Views;
using SDN.Common;
using SDN.Product.View;
using SDN.UI.Entities;
using SDN.UI.Entities.Accounts;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;

namespace SASClient.Accounts.ViewModel
{
    public class StockViewModel : StockEntity
    {
        #region private property
        private readonly IRegionManager regionManager;
        private readonly IEventAggregator eventAggregator;
        private IStockRepository stockRepository = new StockRepository();
        private List<StockViewModel> _FullList;
        private static IEnumerable<StockEntity> StockList;
        private ObservableCollection<StockGridViewModel> _stockdetailsEntity;
        private ObservableCollection<StockEntity> _StockService;
        StackList itemlist = new StackList();
        private ObservableCollection<StockGridViewModel> TempList;
        private string casErrors;
        #endregion
        #region public property
        public ObservableCollection<StockEntity> StockService
        {
            get
            {
                return _StockService;
            }
            set
            {
                if (_StockService != value)
                {
                    _StockService = value;
                    OnPropertyChanged("StockService");
                }
            }
        }
        public string CASErrors
        {
            get { return casErrors; }
            set
            {
                casErrors = value;
                OnPropertyChanged("CASErrors");
            }
        }
        public ObservableCollection<StockGridViewModel> stockdetailsEntity
        {
            get
            {
                return _stockdetailsEntity;
            }
            set
            {
                _stockdetailsEntity = value;
                OnPropertyChanged("stockdetailsEntity");
            }
        }
        #endregion
        #region constructor property
        public StockViewModel(IRegionManager regionManager, IEventAggregator eventAggregator) : base()
        {
            this.regionManager = regionManager;
            this.eventAggregator = eventAggregator;
            LoadSupplierBackground();
            stockdetailsEntity = new ObservableCollection<StockGridViewModel>();
            createStock();
            SaveCommand = new RelayCommand(SaveStock);
            NavigateToPandSDetailsCommand = new RelayCommand(NavigateToPandSDetails);
            NavigateToImportDataCommand = new RelayCommand(NavigateToImportData);
            CloseCommand = new DelegateCommand(Close);
            NavigateToAccountsDetailsListFormCommand = new RelayCommand(NavigateToAccountsDetailList);
        }
        public RelayCommand SaveCommand { get; set; }
        public RelayCommand NavigateToSuppliersFormCommand { get; set; }
        public RelayCommand NavigateToPandSDetailsCommand { get; set;  }
        public RelayCommand NavigateToAccountsDetailsListFormCommand { get; set; }
        public RelayCommand NavigateToImportDataCommand { get; set; }
        public ICommand CloseCommand { get; set; }
        public void NavigateToAccountsDetailList(object param)
        {
            SharedValues.ScreenCheckName = "Accounts Details";
            SharedValues.ViewName = "Accounts Details List";
            var accessitem = itemlist.AddToList();
            if (accessitem == true)
            {
                SharedValues.getValue = "AccountsDetailsListTab";
            var view = ServiceLocator.Current.GetInstance<AccountsDetailsListView>();
            var region = this.regionManager.Regions[RegionNames.MainRegion];
            region.Add(view);
            if (region != null)
            {
                region.Activate(view);
            }

            var tabview = ServiceLocator.Current.GetInstance<SASClient.Accounts.Views.AccountsTabView>();
            var tabregion = this.regionManager.Regions[RegionNames.MenuBarRegion];
            tabregion.Add(tabview);
            if (tabregion != null)
            {
                tabregion.Activate(tabview);
            }
            eventAggregator.GetEvent<TabVisibilityEvent>().Publish(true);
            eventAggregator.GetEvent<TitleChangedEvent>().Publish("Accounts Details List");
            }
            else
            {
                MessageBox.Show("You do not have access to this screen. Please contact your Administrator.");
            }
        }
        private void Close()
        {
            try
            {
                List<string> listview = (List<string>)Application.Current.Resources["views"];
                var secondlast = listview.AsEnumerable().Reverse().Skip(1).First();
                CloseView close = new CloseView(regionManager, eventAggregator);
                close.CloseViewRequest(secondlast, true);
                listview.RemoveAt(listview.Count - 1);
            }
            catch (Exception)
            {
                List<string> listview = (List<string>)Application.Current.Resources["views"];
                CloseView close = new CloseView(regionManager, eventAggregator);
                close.CloseViewRequest("MainView", true);
                listview.RemoveAt(listview.Count - 1);
            }
            //List<string> calledlist = stack.x();
        }
        public void NavigateToImportData(object param)
        {
            SharedValues.ScreenCheckName = "Import Data";
            SharedValues.ViewName = "Import Data";
            var accessitem = itemlist.AddToList();
            if (accessitem == true)
            {
                SharedValues.getValue = "ImportDataTab";
            var tabview = ServiceLocator.Current.GetInstance<ImportDataView>();

            var tabregion = this.regionManager.Regions[RegionNames.MainRegion];
            tabregion.Add(tabview);
            if (tabregion != null)
            {
                tabregion.Activate(tabview);
            }

            var view2 = ServiceLocator.Current.GetInstance<FileTabView>();

            IRegion region2 = this.regionManager.Regions[RegionNames.MenuBarRegion];

            region2.Add(view2);
            if (region2 != null)
            {
                region2.Activate(view2);
            }
            var SubTabView = ServiceLocator.Current.GetInstance<FileSubTabView>();
            var subMenuRegion = regionManager.Regions[RegionNames.SubMenuBarRegion];

            subMenuRegion.Add(SubTabView);

            if (subMenuRegion != null)
            {
                subMenuRegion.Activate(SubTabView);
            }

            eventAggregator.GetEvent<TabVisibilityEvent>().Publish(true);
            eventAggregator.GetEvent<SubTabVisibilityEvent>().Publish(false);
            eventAggregator.GetEvent<TitleChangedEvent>().Publish("Import Data");
            }
            else
            {
                MessageBox.Show("You do not have access to this screen. Please contact your Administrator.");
            }
        }
        void GetOptionsandTaxValues()
        {
            OptionsEntity oData = new OptionsEntity();
            IReceiveMoneyListRepository purchaseRepository = new ReceiveMoneyListRepository();
            oData = purchaseRepository.GetOptionSettings();
            if (oData != null)
            {
                this.CurrencyName = oData.CurrencyCode;     //there is no currency name field in database         
                this.CurrencyCode = oData.CurrencyCode;
                this.CurrencyFormat = oData.NumberFormat;
                this.DateFormat = oData.DateFormat;
                this.DecimalPlaces = oData.DecimalPlaces;

            }
            else
            {
                this.CurrencyName = "USD";
                this.CurrencyCode = "USD";
                this.CurrencyFormat = "en-US";
                this.DateFormat = "dd/MM/yyyy";
            }
        }
        private void NavigateToPandSDetails(object param)
        {
            SharedValues.ScreenCheckName = "P & S Details Form";
            SharedValues.ViewName = "Products & Services Details";
            var accessitem = itemlist.AddToList();
            if (accessitem == true)
            {
                SharedValues.getValue = "PSDetailsTab";
            var tabview = ServiceLocator.Current.GetInstance<PandSDetailsView>();

            var tabregion = this.regionManager.Regions[RegionNames.MainRegion];
            tabregion.Add(tabview);
            if (tabregion != null)
            {
                tabregion.Activate(tabview);
            }

            var view2 = ServiceLocator.Current.GetInstance<ProductTabView>();

            IRegion region2 = this.regionManager.Regions[RegionNames.MenuBarRegion];

            region2.Add(view2);
            if (region2 != null)
            {
                region2.Activate(view2);
            }
            eventAggregator.GetEvent<TabVisibilityEvent>().Publish(true);
            eventAggregator.GetEvent<SubTabVisibilityEvent>().Publish(false);
            eventAggregator.GetEvent<TitleChangedEvent>().Publish("Products & Services Details Form");
            }
            else
            {
                MessageBox.Show("You do not have access to this screen. Please contact your Administrator.");
            }
        }
        public void createStock()
        {

            var row = new StockGridViewModel(StockList);
            //row.SelectedPSID = 0;
            if (stockdetailsEntity != null)
            {
                if (stockdetailsEntity.Count > 0)
                {
                    stockdetailsEntity.Clear();
                    // var row = new CollectAmountDataGridViewModel();
                    //  PQDetailsEntity.Add(row);
                    OnPropertyChanged("stockdetailsEntity");
                }
            }
            stockdetailsEntity.Add(row);
            OnPropertyChanged("stockdetailsEntity");
        }

        #endregion
        #region public method
        private void LoadSupplierBackground()
        {
            Mouse.OverrideCursor = System.Windows.Input.Cursors.Wait;

            //run time-consuming operations on a background thread
            BackgroundWorker worker = new BackgroundWorker();

            //Set the WorkerReportsProgress property to true if you want the BackgroundWorker to support progress updates.
            //When this property is true, user code can call the ReportProgress method to raise the ProgressChanged event.
            worker.WorkerReportsProgress = true;

            //This event is raised when you call the RunWorkerAsync method. This is where you start the time-consuming operation.
            worker.DoWork += new DoWorkEventHandler(this.LoadSupplierBackground);

            // This event is raised when you call the ReportProgress method.
            worker.ProgressChanged += new ProgressChangedEventHandler(this.LoadSupplierBackgroundProgress);

            //The RunWorkerCompleted event is raised when the background worker has completed. 
            //Depending on whether the background operation completed successfully, encountered an error,
            //or was canceled, update the user interface accordingly
            worker.RunWorkerCompleted += new RunWorkerCompletedEventHandler(this.LoadSupplierBackgroundComplete);

            //Starts running a background operation
            worker.RunWorkerAsync();
        }

        private void LoadSupplierBackground(object sender, DoWorkEventArgs e)
        {

            int minHeight = 500;
            int headerRows = 300;//180+40+30+10;
            var height = System.Windows.SystemParameters.PrimaryScreenHeight - headerRows - 26;
            bool validHeight = int.TryParse(height.ToString(), out minHeight);
            this.SIGridHeight = minHeight;
            RefreshData();
            GetOptionsandTaxValues();
        }
        private void LoadSupplierBackgroundProgress(object sender, ProgressChangedEventArgs e)
        {

        }

        ///// <summary>
        /////  Occurs when the background operation has completed, has been canceled, or has raised an exception.
        ///// </summary>
        ///// <param name="sender">The sender.</param>
        ///// <param name="e">The <see cref="RunWorkerCompletedEventArgs"/> instance containing the event data.</param>
        private void LoadSupplierBackgroundComplete(object sender, RunWorkerCompletedEventArgs e)
        {

            Mouse.OverrideCursor = null;

        }
        public void RefreshData()
        {
            try
            {
                StockList = stockRepository.getStockList().GroupBy(x=>x.ProductCode).Select(x=>x.FirstOrDefault()).ToList();
                if (StockList != null)
                {
                    StockService = new ObservableCollection<StockEntity>(StockList);
                }
            }
            catch (Exception e)
            {

                throw e;
            }
        }

        public int ManageDuplicateStock()
        {
            int rowFocusindex = -1;
            //ShowAllCount = PSDetailsEntity.Where(e => e.SelectedPSID != 0).Count();
            TempList = new ObservableCollection<StockGridViewModel>();
            TempList = stockdetailsEntity;

            var query = TempList.GroupBy(x => x.ID)
              .Where(g => g.Count() > 1)
              .ToList();
            if (query.Count > 0 && stockdetailsEntity.Count > 1)
            {

                var obj1 = query[0].ElementAt(0);
                var obj2 = query[0].ElementAt(1);
                int? qty = 1;

                qty = query[0].ElementAt(0).CountQty + query[0].ElementAt(1).CountQty;

                var index1 = TempList.IndexOf(query[0].ElementAt(0));
                var index2 = TempList.IndexOf(query[0].ElementAt(1));
                OnPropertyChanged("stockdetailsEntity");
                TempList = stockdetailsEntity;
            }
            else
            {
                int count = stockdetailsEntity.Count(x => x.ID == 0);
                if (count == 0)
                {
                    var row = new StockGridViewModel(StockList);
                    // row.CountQty = 0;
                    //   row.GSTRate = TaxRate;

                    stockdetailsEntity.Add(row);
                    OnPropertyChanged("stockdetailsEntity");
                    TempList = stockdetailsEntity;
                    rowFocusindex = -1;
                }
                else
                {
                    var emptyRow = TempList.Where(y => y.ID == 0).FirstOrDefault();
                    rowFocusindex = stockdetailsEntity.IndexOf(emptyRow);
                }

            }
            return rowFocusindex;
        }
        public void SaveStock(object param)
        {
            MessageBoxResult result = System.Windows.MessageBox.Show("Do you want to save changes?", "Save Confirmation", MessageBoxButton.YesNo);
            if (result == MessageBoxResult.Yes)
            {
                Mouse.OverrideCursor = System.Windows.Input.Cursors.Wait;


                string msg = ValidateJournal();
                if (msg != string.Empty)
                {
                    CASErrors = msg;
                    Mouse.OverrideCursor = null;
                    return;
                }

                CASErrors = string.Empty;
                StockModel JForm = GetDataIntoModel();
                stockRepository.SaveStockData(JForm);

                Mouse.OverrideCursor = null;
            }
        }
        public string ValidateJournal()
        {
            string msg = string.Empty;
            StockModel JForm = GetDataIntoModel();
            var tempInvoiceNumber = stockRepository.IsChequeNoPresent();
            string result = JForm.StockDetailsData.Where(x => x.ProductCode == tempInvoiceNumber).Select(x => x.ProductCode).FirstOrDefault();
            if (result != null)
            {
                msg = "Entry against Cheque No is already done";
            }


            return msg;
        }
        public StockModel GetDataIntoModel()
        {
            StockModel JForm = new StockModel();
            JForm.StockDetailsData = new List<StockEntity>();
            //UnpaidSalesInvoiceEntity model = new UnpaidSalesInvoiceEntity();

            //JForm.UnpaidSalesInvoiceData = model;
            foreach (var item in stockdetailsEntity)
            {
                if (item.ID != null)
                {
                    StockEntity jEntity = new StockEntity();
                    jEntity.ID = item.ID;
                    jEntity.ProductCode = item.ProductCode ;
                    jEntity.ProductName = item.ProductName;
                    jEntity.QtyInStock = item.QtyInStock;
                    jEntity.AverageCost = item.AverageCost;
                    jEntity.Amount = item.Amount;
                    if (item.ID != 0 && Convert.ToInt32(item.ID) > 0)
                    {
                        JForm.StockDetailsData.Add(jEntity);
                    }
                }
            }

            return JForm;
        }
        #endregion
    }
}
