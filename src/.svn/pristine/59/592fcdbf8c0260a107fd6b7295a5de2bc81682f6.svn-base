using Microsoft.Reporting.WinForms;
using SASClient.Customers.ViewModel;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace SASClient.Reports.ReportsPage
{
    /// <summary>
    /// Interaction logic for UnpaidSalesInvoiceReportViewer.xaml
    /// </summary>
    public partial class UnpaidSalesInvoiceReportViewer : UserControl
    {
        private CustomersUnpaidInvoicesViewModel _ViewModel;
        public UnpaidSalesInvoiceReportViewer()
        {
            InitializeComponent();
            Type type = typeof(CustomersUnpaidInvoicesViewModel);

            //SalesInvoiceViewModel instance = (SalesInvoiceViewModel)Activator.CreateInstance(type);
            object obj = System.Runtime.Serialization.FormatterServices
             .GetUninitializedObject(type);
            _ViewModel = (CustomersUnpaidInvoicesViewModel)obj;

            this.DataContext = obj;
        }
        public UnpaidSalesInvoiceReportViewer(CustomersUnpaidInvoicesViewModel model):this()
        {
            InitializeComponent();
            this.DataContext = _ViewModel;
            _ViewModel = model;
        }
        private void UserControl_LoadedUnpaidSalesInvoice(object sender, RoutedEventArgs e)
        {
            //var a = _viewModel.PrintSalesQuotation();
            var sqf = _ViewModel.PrintSalesOrder();

            // System.Drawing.Image newImage = byteArrayToImage(sqf.Quotation.CompanyLogo);
            // System.Drawing.Image x = (Bitmap)((new ImageConverter()).ConvertFrom(sqf.Quotation.CompanyLogo));


            //this is for table grid

            DataTable dt = new DataTable();
            dt.Columns.Add(new DataColumn("Balance", typeof(string)));
            dt.Columns.Add(new DataColumn("Oneto30Days", typeof(string)));
            dt.Columns.Add(new DataColumn("Thirtyoneto60Days", typeof(string)));
            dt.Columns.Add(new DataColumn("Sixtyoneto90Days", typeof(string)));
            dt.Columns.Add(new DataColumn("GreaterThen90Days", typeof(string)));


            ////ReportingDataset ds = new ReportingDataset();

            foreach (var item in sqf.LstBalances)
            {
                DataRow dr = dt.NewRow();
                dr["Balance"] = item.Balance;
                dr["Oneto30Days"] = item.Oneto30Days;
                dr["Thirtyoneto60Days"] = item.Thirtyoneto60Days;
                dr["Sixtyoneto90Days"] = item.Sixtyoneto90Days;
                dr["GreaterThen90Days"] = item.GreaterThen90Days;
                dt.Rows.Add(dr);
            }

            ReportDataSource reportDataSource = new ReportDataSource();
            reportDataSource.Name = "USP_GetStatementUnpaidInvoice_SummaryDataSet"; // Name of the DataSet we set in .rdlc
            reportDataSource.Value = dt;

            //// company details
            ///*****Define column*****/
            DataTable dt1 = new DataTable();
            dt1.Columns.Add(new DataColumn("CompanyName", typeof(string)));
            dt1.Columns.Add(new DataColumn("CompanyLogo", typeof(byte[])));
            dt1.Columns.Add(new DataColumn("CompanyRegNumber", typeof(string)));
            dt1.Columns.Add(new DataColumn("CompanyGstNumber", typeof(string)));
            dt1.Columns.Add(new DataColumn("Telephone", typeof(string)));
            dt1.Columns.Add(new DataColumn("CompanyFax", typeof(string)));
            dt1.Columns.Add(new DataColumn("CompanyEmail", typeof(string)));
            dt1.Columns.Add(new DataColumn("CompanyBillToAddressLine1", typeof(string)));
            dt1.Columns.Add(new DataColumn("CompanyBillToAddressLine2", typeof(string)));
            dt1.Columns.Add(new DataColumn("CompanyBillToCity", typeof(string)));
            dt1.Columns.Add(new DataColumn("CompanyBillToState", typeof(string)));
            dt1.Columns.Add(new DataColumn("CompanyBillToCountary", typeof(string)));
            dt1.Columns.Add(new DataColumn("CompanyBillToPostCode", typeof(string)));
            ///*****End  column*****/
            ///*****data part*******/

            DataRow dr1 = dt1.NewRow();
            dr1["CompanyName"] = sqf.InvoiceData.CompanyName;
            dr1["CompanyLogo"] = sqf.InvoiceData.CompanyLogo;
            dr1["CompanyRegNumber"] = sqf.InvoiceData.CompanyRegNumber;
            dr1["CompanyGstNumber"] = sqf.InvoiceData.CompanyGstNumber;
            dr1["Telephone"] = sqf.InvoiceData.Telephone;
            dr1["CompanyFax"] = sqf.InvoiceData.CompanyFax;
            dr1["CompanyEmail"] = sqf.InvoiceData.CompanyEmail;
            dr1["CompanyBillToAddressLine1"] = sqf.InvoiceData.CompanyBillToAddressLine1;
            dr1["CompanyBillToAddressLine2"] = sqf.InvoiceData.CompanyBillToAddressLine2;
            dr1["CompanyBillToCity"] = sqf.InvoiceData.CompanyBillToCity;
            dr1["CompanyBillToState"] = sqf.InvoiceData.CompanyBillToState;
            dr1["CompanyBillToCountary"] = sqf.InvoiceData.CompanyBillToCountary;
            dr1["CompanyBillToPostCode"] = sqf.InvoiceData.CompanyBillToPostCode;

            dt1.Rows.Add(dr1);
            /*****data part*******/
            ReportDataSource reportDataSource1 = new ReportDataSource();
            reportDataSource1.Name = "CompanyDetailsDataSet"; // Name of the DataSet we set in .rdlc
            reportDataSource1.Value = dt1;
            //// end of company details

            ////Customer Details
            ///****column defn**/
            DataTable dt2 = new DataTable();
            dt2.Columns.Add(new DataColumn("CustomerName", typeof(string)));
            dt2.Columns.Add(new DataColumn("CustomerBillAddress1", typeof(string)));
            dt2.Columns.Add(new DataColumn("CustomerBillAddress2", typeof(string)));
            dt2.Columns.Add(new DataColumn("CustomerBillAddressCity", typeof(string)));
            dt2.Columns.Add(new DataColumn("CustomerBillAddressState", typeof(string)));
            dt2.Columns.Add(new DataColumn("CustomerBillAddressCountary", typeof(string)));
            dt2.Columns.Add(new DataColumn("CustomerBillPostCode", typeof(string)));

            ///****end column defn**/
            ///**data****/
            DataRow dr2 = dt2.NewRow();
            dr2["CustomerName"] = sqf.InvoiceData.CustomerName;
            dr2["CustomerBillAddress1"] = sqf.InvoiceData.CustomerBillAddress1;
            dr2["CustomerBillAddress2"] = sqf.InvoiceData.CustomerBillAddress2;
            dr2["CustomerBillAddressCity"] = sqf.InvoiceData.CustomerBillAddressCity;
            dr2["CustomerBillAddressState"] = sqf.InvoiceData.CustomerBillAddressState;
            dr2["CustomerBillAddressCountary"] = sqf.InvoiceData.CustomerBillAddressCountary;
            dr2["CustomerBillPostCode"] = sqf.InvoiceData.CustomerBillPostCode;

            ///**end data****/
            dt2.Rows.Add(dr2);
            ReportDataSource reportDataSource2 = new ReportDataSource();
            reportDataSource2.Name = "CustomerDetailsDataSet"; // Name of the DataSet we set in .rdlc
            reportDataSource2.Value = dt2;
            ////End Customer Details 

            ////option 
            DataTable dt3 = new DataTable();
            dt3.Columns.Add(new DataColumn("CurrencyCode", typeof(string)));
            DataRow dr3 = dt3.NewRow();
            dr3["CurrencyCode"] = sqf.InvoiceData.CurrencyCode;
            dt3.Rows.Add(dr3);

            ReportDataSource reportDataSource3 = new ReportDataSource();
            reportDataSource3.Name = "OptionsDataSet"; // Name of the DataSet we set in .rdlc
            reportDataSource3.Value = dt3;
            ////end options
            //for binding the table 
            DataTable dt4 = new DataTable();
            dt4.Columns.Add(new DataColumn("InvoiceNo", typeof(string)));
            dt4.Columns.Add(new DataColumn("InvoiceDate", typeof(string)));
            dt4.Columns.Add(new DataColumn("InvoiceAmount", typeof(string)));
            dt4.Columns.Add(new DataColumn("PaymentDueDate", typeof(string)));
            dt4.Columns.Add(new DataColumn("AmountPaid", typeof(string)));
            dt4.Columns.Add(new DataColumn("AmountDue", typeof(string)));
            foreach (var item in sqf.LstInvoices)
            {
                DataRow dr4 = dt4.NewRow();
                dr4["InvoiceNo"] = item.InvoiceNo;
                dr4["InvoiceDate"] = item.InvoiceDate;
                dr4["InvoiceAmount"] = item.InvoiceAmount;
                dr4["PaymentDueDate"] = item.PaymentDueDate;
                dr4["AmountPaid"] = item.AmountPaid;
                dr4["AmountDue"] = item.AmountDue;
                dt4.Rows.Add(dr4);
            }
            ReportDataSource reportDataSource4 = new ReportDataSource();
            reportDataSource4.Name = "USP_CustomersStatementUnPaidInvoiceDataSet"; // Name of the DataSet we set in .rdlc
            reportDataSource4.Value = dt4;
            //end of binding table

            reportViewer6.LocalReport.ReportPath = "D:\\DayUsers\\src\\SAS-NEW\\Client\\SASClient\\Reports\\ReportsRdlc\\UnpaidSalesInvoice.rdlc"; // Path of the rdlc file  
            ////D:\DayUser\src\SAS - NEW\Client\SASClient\Reports\ReportsRdlc
            reportViewer6.LocalReport.DataSources.Clear();
            reportViewer6.LocalReport.DataSources.Add(reportDataSource);
            reportViewer6.LocalReport.DataSources.Add(reportDataSource1);
            reportViewer6.LocalReport.DataSources.Add(reportDataSource2);
            reportViewer6.LocalReport.DataSources.Add(reportDataSource3);
            reportViewer6.LocalReport.DataSources.Add(reportDataSource4);
            reportViewer6.RefreshReport();
            // this.reportViewer1.Width = 75;
        }
        private void reportViewer_RenderingComplete(object sender, Microsoft.Reporting.WinForms.RenderingCompleteEventArgs e)
        {

        }
    }
}
