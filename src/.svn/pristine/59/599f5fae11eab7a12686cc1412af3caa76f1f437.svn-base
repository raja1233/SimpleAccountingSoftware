using SDN.Common;
using SDN.UI.Entities;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections.ObjectModel;
using System.Windows.Input;
using System.ComponentModel;
using SASClient.File.Services;
using SASClient.CloseRequest;
using Microsoft.Practices.Prism.Commands;
using System.Windows;
using Microsoft.Practices.Prism.Events;
using Microsoft.Practices.Prism.Regions;

namespace SASClient.File.ViewModel
{
    public class ImportDataViewModel : ImportEntity
    {
        #region Private Properties
        private int _ImportGridHeight;
        private bool isDefult;
        private bool isReject;
        private bool isUpdate;
        private  string _Name;
        private readonly IEventAggregator eventAggregator;
        private readonly IRegionManager regionManager;
        StackList itemlist = new StackList();
        private IImportDataRepository ImportRepository = new ImportDataRepository();
        #endregion
        #region public property
        private ObservableCollection<ImportEntity> _ImportDatalist = new ObservableCollection<ImportEntity>();
        private ObservableCollection<ImportEntity> _ImportDataListItem = new ObservableCollection<ImportEntity>();


        public ObservableCollection<ImportEntity> ImportDataList
        {
            get
            {
                return _ImportDatalist;
            }
            set
            {
                _ImportDatalist = value;
                OnPropertyChanged("ImportDataList");
            }
        }
        public ObservableCollection<ImportEntity> ImportDataListItem
        {
            get
            {
                return _ImportDataListItem;
            }
            set
            {
                _ImportDataListItem = value;
                OnPropertyChanged("ImportDtaListItem");
            }
        }


        public int ImportGridHeight
        {
            get
            {
                return _ImportGridHeight;
            }
            set
            {
                _ImportGridHeight = value;
                OnPropertyChanged("ImportGridHeight");
            }
        }
        public string Name
        {
            get {
                return _Name;
            } set { _Name = value;
                OnPropertyChanged("Name");
            }
        }
        //public bool IsDefult
        //{
        //    get
        //    {
        //        return isDefult;
        //    }
        //    set
        //    {
        //        isDefult = value;
        //        OnPropertyChanged("isDefult");
        //    }
        //}
        public bool IsReject
        {
            get
            {
                return this.isReject;
            }
            set
            {
                this.isReject = true;
                OnPropertyChanged("isReject");
            }
        }
        public bool IsUpdate
        {
            get
            {
                return isUpdate;
            }
            set
            {
                isUpdate = value;
                OnPropertyChanged("isUpdate");
            }
        }
        private bool _radio1IsCheck;
        public bool Radio1IsCheck
        {
            get { return this._radio1IsCheck; }
            set
            {
                this._radio1IsCheck = true;
                this.OnPropertyChanged("Radio1IsCheck");

            }
        }
        private bool _radio2IsCheck;
        public bool Radio2IsCheck
        {
            get { return this._radio2IsCheck; }
            set
            {
                this._radio2IsCheck = value;
                this.OnPropertyChanged("Radio2IsCheck");

            }
        }
        
        //private bool? _RadCheckUpdate;
        //public bool? RadCheckUpdate
        //{
        //    get { return this._RadCheckUpdate; }
        //    set
        //    {
        //        if (this.Radio3IsCheck == true)
        //            this._RadCheckUpdate = true;
        //        else
        //            this._RadCheckUpdate = false;
        //        this.OnPropertyChanged("RadCheckUpdate");

        //    }
        //}
        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="ExportDataEntity"/> class.
        /// </summary>
        public ImportDataViewModel(IRegionManager regionManager, IEventAggregator eventAggregator)
            : base()
        {
            this.regionManager = regionManager;
            this.eventAggregator = eventAggregator;
            // CheckIsActive = new RelayCommand(checkisactive);
            ImportCommand = new RelayCommand(ImportCommands);
            ImportOneCommand = new RelayCommand(ImportOneCommands);
            CloseCommand = new DelegateCommand(Close);
            ImportData();
            ImportDataRadio();

            this.LoadBackground();
        }
        public RelayCommand ImportCommand { get; set; }
        public RelayCommand ImportOneCommand { get; set; }

        public ICommand CloseCommand { get; set; }
        public void ImportData()
        {
            _ImportDatalist.Add(new ImportEntity { ID = 1, MasterName = "Customers Details" });
            _ImportDatalist.Add(new ImportEntity { ID = 2, MasterName = "Suppliers Details"});
            _ImportDatalist.Add(new ImportEntity { ID = 3, MasterName = "Products and Services Details"});
            _ImportDatalist.Add(new ImportEntity { ID = 4, MasterName = "GST/VAT Codes & Rates"});

        }
        public void ImportDataRadio()
        {
            _ImportDataListItem.Add(new ImportEntity { ID = 1, Name = "Customers Details"});
            _ImportDataListItem.Add(new ImportEntity { ID = 2, Name = "Suppliers Details"});
            _ImportDataListItem.Add(new ImportEntity { ID = 3, Name = "Products and Services Details" });
            _ImportDataListItem.Add(new ImportEntity { ID = 4, Name = "GST/VAT Codes & Rates" });

        }
        private void Close()
        {
            try
            {
                List<string> listview = (List<string>)Application.Current.Resources["views"];
                var secondlast = listview.AsEnumerable().Reverse().Skip(1).First();
                CloseView close = new CloseView(regionManager, eventAggregator);
                close.CloseViewRequest(secondlast, true);
                listview.RemoveAt(listview.Count - 1);
            }
            catch (Exception)
            {
                List<string> listview = (List<string>)Application.Current.Resources["views"];
                CloseView close = new CloseView(regionManager, eventAggregator);
                close.CloseViewRequest("MainView", true);
                listview.RemoveAt(listview.Count - 1);
            }
            //List<string> calledlist = stack.x();
        }
        public void ImportCommands(object parms)
        {
            List<object> values = new List<object>();
            values = parms as List<object>;
            var xn = Int32.Parse(values[0].ToString());
            Microsoft.Win32.SaveFileDialog saveCheckedFile = new Microsoft.Win32.SaveFileDialog();
            Microsoft.Win32.OpenFileDialog ImportDialogueBox = new Microsoft.Win32.OpenFileDialog();
            saveCheckedFile.Filter = "excel file (*.xlsx)|*.xlxs|excel file (*.xls)|*.xls";
            ImportDialogueBox.Filter = "excel file (*.xlsx)|*.xlxs|excel file (*.xls)|*.xls";

            if (saveCheckedFile.ShowDialog() == true)
            {
                Mouse.OverrideCursor = Cursors.Wait;
                var abc = ImportRepository.ImportData(xn, saveCheckedFile.FileName);
                //var filename= saveCheckedFile.FileName;
                Mouse.OverrideCursor = null;
            }
        }
        public void ImportOneCommands(object parms)
        {
            List<object> values = new List<object>();
            values = parms as List<object>;
            var SelectedId = Int32.Parse(values[0].ToString());
            Microsoft.Win32.OpenFileDialog ImportDialogueBox = new Microsoft.Win32.OpenFileDialog();
            ImportDialogueBox.Filter = "excel file (*.xlsx)|*.xlxs|excel file (*.xls)|*.xls";
            var model = _ImportDataListItem[SelectedId - 1];
            if (ImportDialogueBox.ShowDialog() == true)
            {
                Mouse.OverrideCursor = Cursors.Wait;
                var filename = ImportDialogueBox.FileName;
               
                    if (model.Radio3IsCheck == true)
                        ImportRepository.DataTableToList(SelectedId, filename, true);
                    else
                        ImportRepository.DataTableToList(SelectedId, filename, false);
              
                        
                    
                
                //var x = ImportRepository.ExcelToDataTable(filename);
                Mouse.OverrideCursor = null;
            }

        }

        private void LoadBackground()
        {
            Mouse.OverrideCursor = Cursors.Wait;

            //run time-consuming operations on a background thread
            BackgroundWorker worker = new BackgroundWorker();

            //Set the WorkerReportsProgress property to true if you want the BackgroundWorker to support progress updates.
            //When this property is true, user code can call the ReportProgress method to raise the ProgressChanged event.
            worker.WorkerReportsProgress = true;
            //worker.DoWork += (s, e) =>
            //{
            //    Thread.Sleep(2000);
            //};
            //This event is raised when you call the RunWorkerAsync method. This is where you start the time-consuming operation.
            worker.DoWork += new DoWorkEventHandler(this.LoadUserSecurityBackground);

            // This event is raised when you call the ReportProgress method.
            worker.ProgressChanged += new ProgressChangedEventHandler(this.LoadUserSecurityBackgroundProgress);

            //The RunWorkerCompleted event is raised when the background worker has completed. 
            //Depending on whether the background operation completed successfully, encountered an error,
            //or was canceled, update the user interface accordingly


            worker.RunWorkerCompleted += new RunWorkerCompletedEventHandler(this.LoadUserSecurityBackgroundComplete);

            //Starts running a background operation
            worker.RunWorkerAsync();
        }
        private void LoadUserSecurityBackground(object sender, DoWorkEventArgs e)
           {
            int minHeight = 300;
            int headerRows = 180;//180+40+30+10;
            var height = System.Windows.SystemParameters.PrimaryScreenHeight - headerRows - 200;
            bool validHeight = int.TryParse(height.ToString(), out minHeight);
            this.ImportGridHeight = minHeight;
        }
        private void LoadUserSecurityBackgroundComplete(object sender, RunWorkerCompletedEventArgs e)
        {
            Mouse.OverrideCursor = null;
        }
        private void LoadUserSecurityBackgroundProgress(object sender, ProgressChangedEventArgs e)
        {

        }

        //public RelayCommand CheckIsActive { get; set; }
        public RelayCommand Demo { get; set; }

        //void checkisactive(object param)
        //{
        //    if (param.ToString() == "True")
        //    {
        //        foreach (var item in ImportDataList)
        //        {
        //            item.IsChecked = true;
        //        }
        //    }
        //    else
        //    {
        //        foreach (var item in ImportDataList)
        //        {
        //            item.IsChecked = false;
        //        }
        //    }
        //}
        #endregion
    }
}
