using SASClient.File.Services;
using SDN.Common;
using SDN.Purchasing.Services;
using SDN.UI.Entities;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;

namespace SASClient.File.ViewModel
{
    public class ExportDataMasterViewModel : ViewModelBase
    {
        #region Private Properties
        internal void RaisePropertyChanged(string prop)
        {
            if (PropertyChanged != null) { PropertyChanged(this, new PropertyChangedEventArgs(prop)); }
        }
        public event PropertyChangedEventHandler PropertyChanged;
        private ObservableCollection<MasterEntity> _Masterlist = new ObservableCollection<MasterEntity>();
        //private ObservableCollection<MasterEntity> _Masterlist = new ObservableCollection<MasterEntity>();
        private IExportDataRepository exportRepository = new ExportDataRepository();

        private int _UserGridHeight;
        private DateTime? _StartdateCalender;
        private DateTime? _EnddateCalender;
        private string _DateFormat;
        private string _DateErrors;
        //private ObservableCollection<ExportDataMasterEntity> _UserSecurityEmptyGrid = new ObservableCollection<ExportDataMasterEntity>();

        #endregion

        #region Public Properties


        public ObservableCollection<MasterEntity> MasterList
        {
            get
            {
                // _Transactionlist.Clear();
                // TransactionData();
                return _Masterlist;
            }
            set
            {
                _Masterlist = value;
                OnPropertyChanged("MasterList");
            }
        }
        private void MasterData()
        {
            _Masterlist.Add(new MasterEntity { ID = 1, MasterName = "Customers Details", IsChecked = false  });
            _Masterlist.Add(new MasterEntity { ID = 2, MasterName = "Suppliers Details", IsChecked = false });
            _Masterlist.Add(new MasterEntity { ID = 3, MasterName = "Products & Services Details", IsChecked = false });
            _Masterlist.Add(new MasterEntity { ID = 4, MasterName = "Accounts Details", IsChecked = false });
            _Masterlist.Add(new MasterEntity { ID = 5, MasterName = "GST/VAT Codes & Rates", IsChecked = false });
            _Masterlist.Add(new MasterEntity { ID = 6, MasterName = "Ledger", IsChecked = false });
            _Masterlist.Add(new MasterEntity { ID = 7, MasterName = "Trail Balance", IsChecked = false });
            _Masterlist.Add(new MasterEntity { ID = 8, MasterName = "Profit & Loss Statement", IsChecked = false });
            _Masterlist.Add(new MasterEntity { ID = 9, MasterName = "Balance Sheet", IsChecked = false });
            _Masterlist.Add(new MasterEntity { ID = 10, MasterName = "Stock Quantities", IsChecked = false });
            _Masterlist.Add(new MasterEntity { ID = 11, MasterName = "Stock Value", IsChecked = false });
        }

        public int UserGridHeight
        {
            get
            {
                return _UserGridHeight;
            }
            set
            {
                _UserGridHeight = value;
                OnPropertyChanged("UserGridHeight");
            }
        }
        public DateTime? StartdateCalender
        {
            get
            {
                return _StartdateCalender;
            }
            set
            {
                _StartdateCalender = value;
                OnPropertyChanged("StartdateCalender");
            }
        }
        public DateTime? EnddateCalender
        {
            get
            {
                return _EnddateCalender;
            }
            set
            {
                _EnddateCalender = value;
                OnPropertyChanged("EnddateCalender");
            }
        }
        public string DateFormat
        {
            get { return _DateFormat; }
            set { SetProperty(ref _DateFormat, value, "DateFormat"); }
        }
        public string DateErrors
        {
            get
            {
                return _DateErrors;
            }
            set
            {
                _DateErrors = value;
                OnPropertyChanged("DateErrors");
            }
        }



        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="ExportDataMasterEntity"/> class.
        /// </summary>
        public ExportDataMasterViewModel()
            : base()
        {
            CheckIsActive = new RelayCommand(checkisactive);
            ExportCommand = new RelayCommand(ExportCommands, CanSave);
            MasterData();
            this.LoadBackground();
        }
        public RelayCommand CheckIsActive { get; set; }
        public RelayCommand ExportCommand { get; set; }

        #endregion

        #region Background Worked
        private void LoadBackground()
        {
            Mouse.OverrideCursor = Cursors.Wait;

            //run time-consuming operations on a background thread
            BackgroundWorker worker = new BackgroundWorker();

            //Set the WorkerReportsProgress property to true if you want the BackgroundWorker to support progress updates.
            //When this property is true, user code can call the ReportProgress method to raise the ProgressChanged event.
            worker.WorkerReportsProgress = true;
            //worker.DoWork += (s, e) =>
            //{
            //    Thread.Sleep(2000);
            //};
            //This event is raised when you call the RunWorkerAsync method. This is where you start the time-consuming operation.
            worker.DoWork += new DoWorkEventHandler(this.LoadUserSecurityBackground);

            // This event is raised when you call the ReportProgress method.
            worker.ProgressChanged += new ProgressChangedEventHandler(this.LoadUserSecurityBackgroundProgress);

            //The RunWorkerCompleted event is raised when the background worker has completed. 
            //Depending on whether the background operation completed successfully, encountered an error,
            //or was canceled, update the user interface accordingly


            worker.RunWorkerCompleted += new RunWorkerCompletedEventHandler(this.LoadUserSecurityBackgroundComplete);

            //Starts running a background operation
            worker.RunWorkerAsync();
        }

        private void LoadUserSecurityBackground(object sender, DoWorkEventArgs e)
        {
            int minHeight = 200;
            int headerRows = 180;//180+40+30+10;
            var height = System.Windows.SystemParameters.PrimaryScreenHeight - headerRows - 290;
            bool validHeight = int.TryParse(height.ToString(), out minHeight);
            this.UserGridHeight = minHeight;
        }
        /// <summary>
        ///  Occurs when System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32) is called.
        /// </summary>
        /// <param name="sender">The sender.</param>
        /// <param name="e">The <see cref="ProgressChangedEventArgs"/> instance containing the event data.</param>
        private void LoadUserSecurityBackgroundProgress(object sender, ProgressChangedEventArgs e)
        {

        }
        ///// <summary>
        /////  Occurs when the background operation has completed, has been canceled, or has raised an exception.
        ///// </summary>
        ///// <param name="sender">The sender.</param>
        ///// <param name="e">The <see cref="RunWorkerCompletedEventArgs"/> instance containing the event data.</param>
        private void LoadUserSecurityBackgroundComplete(object sender, RunWorkerCompletedEventArgs e)
        {
            Mouse.OverrideCursor = null;
        }
        #endregion

        #region Click Commands

        void checkisactive(object param)
        {
            if (param.ToString() == "True")
            {
                foreach (var item in MasterList)
                {
                    item.IsChecked = true;
                }
            }
            else
            {
                foreach (var item in MasterList)
                {
                    item.IsChecked = false;
                }
            }
        }
        
        public void ExportCommands(object param)
        {


            Microsoft.Win32.SaveFileDialog saveFileDialog = new Microsoft.Win32.SaveFileDialog();
            saveFileDialog.Filter = "Excel file (*.xlsx)|*.xlsx|Excel file (*.xls)|*.xls";
            saveFileDialog.FileName = "Export";
            if (saveFileDialog.ShowDialog() == true)
            {
                Mouse.OverrideCursor = Cursors.Wait;
                var abc = exportRepository.ExportDataMaster(MasterList, saveFileDialog.FileName);
                Mouse.OverrideCursor = null;
            }






        }
        public bool CanSave(object param)
        {
            return true;
        }
    }

    #endregion


}

