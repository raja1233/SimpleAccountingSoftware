
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SASClient.CashBank.ViewModels
{
    using CloseRequest;
    using Microsoft.Practices.Prism.Commands;
    using Microsoft.Practices.Prism.Events;
    using Microsoft.Practices.Prism.Regions;
    using SDN.Common;
    using SDN.Purchasing.Services;
    using SDN.Sales.Services;
    using SDN.Settings.Services;
    using SDN.UI.Entities;
    using Services;
    using System.ComponentModel;
    using System.Globalization;
    using System.Windows;
    using System.Windows.Input;

    public class TransferMoneyViewModel: TransferMoneyEntity
    {
        #region "Private Members"
        internal void RaisePropertyChanged(string prop)
        {
            if (PropertyChanged != null) { PropertyChanged(this, new PropertyChangedEventArgs(prop)); }
        }
        public event PropertyChangedEventHandler PropertyChanged;
        private string _DateErrors;
        private DateTime? _TransferDateCalender;
        ICompanyDetails CompanyD = new CompanyDetails();
        private readonly IRegionManager regionManager;
        private readonly IEventAggregator eventAggregator;
        private bool? isChequeFalse;
        private bool? isChequeTrue;
        private string currencyName;
        private bool? isCashChequeEnabled;
        private string dateFormat;
        private bool? isNew;
        private string psErrors;
        private bool? isTextBoxReadOnly;
        StackList itemlist = new StackList();

        private ITransferMoneyRepository rmRepository = new TransferMoneyRepository();
        private IPaymentToSupplierFormRepository payRepository = new PaymentToSupplierFormRepository();
        #endregion

        #region "Properties"
        public string DateErrors
        {
            get
            {
                return _DateErrors;
            }
            set
            {
                _DateErrors = value;
                OnPropertyChanged("DateErrors");
            }
        }
        public DateTime? TransferDateCalender
        {
            get
            {
                return _TransferDateCalender;
            }
            set
            {
                _TransferDateCalender = value;
                OnPropertyChanged("TransferDateCalender");
            }
        }
        public bool? IsCashChequeEnabled
        {
            get { return isCashChequeEnabled; }
            set
            {
                isCashChequeEnabled = value;
                OnPropertyChanged("IsCashChequeEnabled");
            }
        }
        public bool? IsTextBoxReadOnly
        {
            get { return isTextBoxReadOnly; }
            set
            {
                isTextBoxReadOnly = value;
                OnPropertyChanged("IsTextBoxReadOnly");
            }
        }

        public bool? IsChequeFalse
        {
            get { return isChequeFalse; }
            set
            {
                isChequeFalse = value;
                OnPropertyChanged("IsChequeFalse");

            }
        }
        public bool? IsChequeTrue
        {
            get { return isChequeTrue; }
            set
            {
                isChequeTrue = value;
                OnPropertyChanged("IsChequeTrue");

            }
        }

        public string PSErrors
        {
            get { return psErrors; }
            set
            {
                psErrors = value;
                OnPropertyChanged("PSErrors");
            }
        }

        public bool? IsNew
        {
            get { return isNew; }
            set
            {
                isNew = value;
                OnPropertyChanged("IsNew");
            }
        }

        public string DateFormat
        {
            get { return dateFormat; }
            set
            {
                dateFormat = value;
                OnPropertyChanged("DateFormat");
            }
        }

        #endregion

        #region Constructor
        /// <summary>
        /// Initializes a new instance of the <see cref="PurchaseOrderListViewModel"/> class.
        /// </summary>
        public TransferMoneyViewModel(IRegionManager regionManager, IEventAggregator eventAggregator)
            : base()
        {
            this.regionManager = regionManager;
            this.eventAggregator = eventAggregator;
            this.LoadSupplierBackground();

            CloseCommand = new DelegateCommand(Close);
            SaveCommand = new RelayCommand(OnSavePS, CanSave);
            AccountSelectionChangedCommand = new RelayCommand(CheckAccountDetails);
            TransferToAccountSelectionChangedCommand = new RelayCommand(OnTransferToAccountChange);
             NewPSCommand = new RelayCommand(GetNewPS);
            TextChangedCommand = new RelayCommand(OnTextChanged);

            if (!String.IsNullOrEmpty(SharedValues.NewClick))
            {
                if (SharedValues.NewClick != "New")
                {
                    IsCashChequeEnabled = false;
                    IsTextBoxReadOnly = true;

                    GetTransferMoneyDetails(SharedValues.NewClick);
                }
                else if (SharedValues.NewClick == "New")
                {
                    IsCashChequeEnabled = true;
                    IsTextBoxReadOnly = false;

                    GetNewPS();
                }
            }
        }

        public TransferMoneyViewModel()
        {
        }
        public ICommand CloseCommand { get; set; }
        public RelayCommand TextChangedCommand { get; set; }
        public RelayCommand NewPSCommand { get; set; }
        public RelayCommand SaveCommand { get; set; }
        public RelayCommand SelectChangedCommand { get; set; }
        public RelayCommand AccountSelectionChangedCommand { get; set; }
        public RelayCommand TransferToAccountSelectionChangedCommand { get; set; }

        #endregion  Constructor

        #region ButtonCommands
        void refreshcommand(object param)
        {
            RefreshData();
        }
        //private void GoBack()
        //{
        //    /*GoForward()*/
        //    //CloseRequest obj = new CloseRequest();
        //    var y = regionManager.Regions[RegionNames.MainRegion].Views;
        //    var view = y.Reverse().Skip(1).First();
        //    IRegion region = regionManager.Regions[RegionNames.MainRegion];
        //    var f = view.GetType();
        //    var z = f.Name;
        //    var n = view;
        //    CloseRequestNew obj = new CloseRequestNew(regionManager, eventAggregator);
        //    obj.CloseViewRequest(z, region);

        //    //region.NavigationService.Journal.GoBack();

        //}
        private void Close()
        {
            try
            {
                List<string> listview = (List<string>)Application.Current.Resources["views"];
                var secondlast = listview.AsEnumerable().Reverse().Skip(1).First();
                CloseView close = new CloseView(regionManager, eventAggregator);
                close.CloseViewRequest(secondlast, true);
                listview.RemoveAt(listview.Count - 1);
            }
            catch (Exception)
            {
                List<string> listview = (List<string>)Application.Current.Resources["views"];
                CloseView close = new CloseView(regionManager, eventAggregator);
                close.CloseViewRequest("MainView", true);
                listview.RemoveAt(listview.Count - 1);
            }
            //List<string> calledlist = stack.x();
        }
        void GetNewPS(object param)
        {
            IsNew = true;
            // SelectedSupplierID = 0;
            IsCashChequeEnabled = true;
            IsTextBoxReadOnly = false;
            PSErrors = string.Empty;
            GetNewPS();
        }

        void OnSavePS(object param)
        {
            MessageBoxResult result = System.Windows.MessageBox.Show("Do you want to save changes?", "Save Confirmation", MessageBoxButton.YesNo);
            if (result == MessageBoxResult.Yes)
            {
                Mouse.OverrideCursor = Cursors.Wait;
                TransferMoneyEntity rsEntity = GetDataIntoModel();
                string msg = ValidateRefundFromSupplier();
                if (msg != string.Empty)
                {
                    PSErrors = msg;
                    Mouse.OverrideCursor = null;
                    return;
                }

                PSErrors = string.Empty;

                if (rsEntity != null)
                {
                    if (IsNew == true)
                    {
                        int i = rmRepository.SaveTransferMoney(rsEntity);
                        IsCashChequeEnabled = false;
                        IsTextBoxReadOnly = true;
                        IsNew = false;
                    }
                    else
                    {
                        int i = rmRepository.UpdateTransferMoney(rsEntity);
                        IsNew = false;
                        IsCashChequeEnabled = false;
                        IsTextBoxReadOnly = true;
                    }

                    Mouse.OverrideCursor = null;
                }
            }
        }

        private void OnTextChanged(object param)
        {
            if (AmountStr != string.Empty || AmountStr != null)
            {
                    decimal dec = 0;
                    bool isDec = Decimal.TryParse(AmountStr, out dec);
                    if (isDec)
                    {
                        TransferFromAfterBalance = TransferFromBeforeBalance - dec;
                        TransferFromAfterBalanceStr = Convert.ToString(TransferFromAfterBalance);

                        TransferToAfterBalance = TransferToBeforeBalance + dec;
                        TransferToAfterBalanceStr = Convert.ToString(TransferToAfterBalance);
                    }
                    else
                    {
                        TransferFromAfterBalanceStr = TransferFromBeforeBalanceStr;
                    TransferToAfterBalanceStr = TransferToBeforeBalanceStr;
                    }
                }
                else
                {
                    TransferFromAfterBalanceStr = TransferFromBeforeBalanceStr;
                    TransferToAfterBalanceStr = TransferToBeforeBalanceStr;
                }
            
        }
      

        public bool CanSave(object param)
        {
            string date = this.DateFormat as string;
            var c = CompanyD.GetCompanyDetails().Comp_year_start_date;

            if ((SelectedtransferFromCashAndBankAcntID != 0 || SelectedtransferToCashBankAcntID != 0)
               && !(string.IsNullOrEmpty(AmountStr)) && !(string.IsNullOrEmpty(CashChequeNo))
              && CashChequeDateStr != null)
            {
                return true;
            }
            if (CashChequeDateStr != null)
            {
                try
                {
                    if (!string.IsNullOrEmpty(CashChequeDateStr) && !string.IsNullOrWhiteSpace(CashChequeDateStr))
                    {

                        //item.StartDate = item.StartDate.Replace('.', '/');
                        //item.StartDate = item.StartDate.Replace('-', '/');
                        //item.EndDate = item.EndDate.Replace('.', '/');
                        //item.EndDate = item.EndDate.Replace('-', '/');
                        var Start = (DateTime.ParseExact(CashChequeDateStr, date, CultureInfo.InvariantCulture));
                        this.DateErrors = "";
                        //var End = (DateTime.ParseExact(item.EndDate, date, CultureInfo.InvariantCulture));
                        if (Start < c)
                        {
                            this.DateErrors = "Date should be greater than Start Financial year";
                            return false;
                        }

                    }
                }
                catch (Exception ex)
                {
                    this.DateErrors = "Please enter the date in " + date + " format!";
                    return false;
                }
                return true;
            }
            else
            {
                return false;
            }
        }


        #endregion

        #region "Private methods"

        public void OnTransferToAccountChange(object param)
        {
            if (SelectedtransferToCashBankAcntID != 0)
            {
                var actType = TransferFromCashAndBankAccountsLst.SingleOrDefault(e => e.AccountID == SelectedtransferToCashBankAcntID);
                if (actType != null)
                {
                    TransferToBeforeBalance = actType.CurrentBalance == null ? 0 : actType.CurrentBalance;
                    TransferToBeforeBalanceStr = Convert.ToString(TransferToBeforeBalance);

                    if (AmountStr!=string.Empty)
                    {
                        decimal dec = 0;
                        bool isDec = Decimal.TryParse(AmountStr, out dec);
                        if (isDec)
                        {
                            TransferToAfterBalance = TransferToBeforeBalance + dec;
                            TransferToAfterBalanceStr = Convert.ToString(TransferToAfterBalance);
                        }
                        else
                        {
                            TransferToAfterBalanceStr = TransferToBeforeBalanceStr;
                        }
                    }
                    else
                    {
                        TransferToAfterBalanceStr = TransferToBeforeBalanceStr;
                    }
                }
            }
        }
        public void CheckAccountDetails(object param)
        {
            if (IsNew == true)
            {
                if (SelectedtransferFromCashAndBankAcntID != 0)
                {
                    var actType = TransferFromCashAndBankAccountsLst.SingleOrDefault(e => e.AccountID == SelectedtransferFromCashAndBankAcntID);
                    if (actType != null)
                    {
                        TransferFromBeforeBalance = actType.CurrentBalance == null ? 0 : actType.CurrentBalance;
                        TransferFromBeforeBalanceStr = Convert.ToString(TransferFromBeforeBalance);

                        if (AmountStr != string.Empty)
                        {
                            decimal dec = 0;
                            bool isDec = Decimal.TryParse(AmountStr, out dec);
                            if (isDec)
                            {
                                TransferFromAfterBalance = TransferFromBeforeBalance - dec;
                                TransferFromAfterBalanceStr = Convert.ToString(TransferFromAfterBalance);
                            }
                            else
                            {
                                TransferFromAfterBalanceStr = TransferFromBeforeBalanceStr;
                            }
                        }
                        else
                        {
                            TransferFromAfterBalanceStr = TransferFromBeforeBalanceStr;
                        }

                        if (actType.AccountType == Convert.ToByte(Account_Type.Cash) && actType.IsLinked == true)
                        {
                            IsChequeTrue = false;
                            IsChequeFalse = true;
                            IsTextBoxReadOnly = true;
                            CashChequeNo = "TM-" + rmRepository.GetLastCashNo();
                            IsCheque = false;
                        }
                        else
                        {
                            IsChequeTrue = true;
                            IsChequeFalse = false;
                            IsTextBoxReadOnly = false;
                            CashChequeNo = string.Empty;
                            IsCheque = true;
                        }
                    }
                }
            }
        }
        public TransferMoneyEntity GetDataIntoModel()
        {
            TransferMoneyEntity model = new TransferMoneyEntity();
            model.SelectedtransferFromCashAndBankAcntID = this.SelectedtransferFromCashAndBankAcntID;
            model.SelectedtransferToCashBankAcntID = this.SelectedtransferToCashBankAcntID;
            model.CashChequeDateStr = this.CashChequeDateStr;
            model.CashChequeNo = this.CashChequeNo;
            model.AmountStr = AmountStr;
            model.Amount = Convert.ToDecimal(AmountStr);
            model.TransferFromBeforeBalanceStr = this.TransferFromBeforeBalanceStr;
            model.TransferFromBeforeBalance = Convert.ToDecimal(TransferFromBeforeBalance);
            model.TransferFromAfterBalanceStr = this.TransferFromAfterBalanceStr;
            model.TransferFromAfterBalance = Convert.ToDecimal(TransferFromAfterBalance);
            model.TransferToBeforeBalanceStr = this.TransferToBeforeBalanceStr;
            model.TransferToBeforeBalance = Convert.ToDecimal(TransferToBeforeBalance);
            model.TransferToAfterBalanceStr = this.TransferToAfterBalanceStr;
            model.TransferToAfterBalance = Convert.ToDecimal(TransferToAfterBalance);
            model.TaxRate = this.TaxRate;
            model.Remarks = this.Remarks;
            model.IsCheque = this.IsCheque;

            return model;
        }


        private void OnCashChecked(object param)
        {
            IsTextBoxReadOnly = true;
            CashChequeNo = "TM-" + rmRepository.GetLastCashNo();
        }

        private void OnChequeChecked(object param)
        {
            IsTextBoxReadOnly = false;
            CashChequeNo = string.Empty;
        }

        private string ValidateRefundFromSupplier()
        {
            string msg = string.Empty;

            return msg;
        }

        private void GetNewPS()
        {
            SelectedtransferFromCashAndBankAcntID = 0;
            SelectedtransferToCashBankAcntID = 0;
            
            this.AmountStr = string.Empty;
            this.TransferFromBeforeBalanceStr = string.Empty;
            this.TransferFromAfterBalanceStr = string.Empty;
            this.TransferToBeforeBalanceStr = string.Empty;
            this.TransferToAfterBalanceStr = string.Empty;
            this.CashChequeNo = string.Empty;
            this.Remarks = string.Empty;
            IsChequeFalse = true;
            IsChequeTrue = false;
            IsCheque = true;
            CashChequeDate = DateTime.Now.Date;
            IsNew = true;
            CashChequeNo = "TM-" + rmRepository.GetLastCashNo();
            IsTextBoxReadOnly = true;

        }

        private void GetModelData(TransferMoneyEntity rmf)
        {
            if (IsNew == false)
            {
                this.SelectedtransferFromCashAndBankAcntID = rmf.SelectedtransferFromCashAndBankAcntID;
                this.SelectedtransferToCashBankAcntID = rmf.SelectedtransferToCashBankAcntID;
                
                this.CashChequeNo = rmf.CashChequeNo;
                this.IsCheque = rmf.IsCheque;
                this.SelectedTaxID = rmf.SelectedTaxID;
                this.AmountStr = Convert.ToString(rmf.Amount);
                this.Remarks = rmf.Remarks;
            }
        }

        private void GetTransferMoneyDetails(string cashChequeNo)
        {
            OptionsEntity oData = new OptionsEntity();
            ISalesOrderListRepository purchaseRepository = new SalesOrderListRepository();
            oData = purchaseRepository.GetOptionSettings();
            IsNew = false;
            IsTextBoxReadOnly = true;
            IsCashChequeEnabled = false;
            TransferMoneyEntity pqf = rmRepository.GetTransferMoneyDetails(cashChequeNo);
            DateTime Dateinstr = (DateTime)pqf.CashChequeDate;
            this.CashChequeDateStr = Dateinstr.ToString(oData.DateFormat);
            GetModelData(pqf);

        }

        #endregion

        #region BackgroundWorked
        private void LoadSupplierBackground()
        {
            Mouse.OverrideCursor = Cursors.Wait;

            //run time-consuming operations on a background thread
            BackgroundWorker worker = new BackgroundWorker();

            //Set the WorkerReportsProgress property to true if you want the BackgroundWorker to support progress updates.
            //When this property is true, user code can call the ReportProgress method to raise the ProgressChanged event.
            worker.WorkerReportsProgress = true;


            //This event is raised when you call the RunWorkerAsync method. This is where you start the time-consuming operation.
            worker.DoWork += new DoWorkEventHandler(this.LoadSupplierBackground);

            // This event is raised when you call the ReportProgress method.
            worker.ProgressChanged += new ProgressChangedEventHandler(this.LoadSupplierBackgroundProgress);

            //The RunWorkerCompleted event is raised when the background worker has completed. 
            //Depending on whether the background operation completed successfully, encountered an error,
            //or was canceled, update the user interface accordingly
            worker.RunWorkerCompleted += new RunWorkerCompletedEventHandler(this.LoadSupplierBackgroundComplete);

            //Starts running a background operation
            worker.RunWorkerAsync();
        }
        List<PurchaseOrderListEntity> DefaultList = new List<PurchaseOrderListEntity>();
        List<PurchaseOrderListEntity> FullPQList = new List<PurchaseOrderListEntity>();
        private void LoadSupplierBackground(object sender, DoWorkEventArgs e)
        {

        }

        private void RefreshData()
        {
            try
            {
                GetOptionsandTaxValues();

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        void GetOptionsandTaxValues()
        {
            OptionsEntity oData = new OptionsEntity();
            IPurchaseOrderListRepository purchaseRepository = new PurchaseOrderListRepository();
            oData = purchaseRepository.GetOptionSettings();
            if (oData != null)
            {
                CurrencyName = oData.CurrencyCode;
                DateFormat = oData.DateFormat;
                if (!string.IsNullOrWhiteSpace(oData.DefCashBankAcc))
                {
                    this.SelectedtransferFromCashAndBankAcntID = Convert.ToInt32(oData.DefCashBankAcc);
                    CheckAccountDetails(null);
                }
            }

        }

        string changedateformat(DateTime? datetoConvert)
        {
            string convertedDate = string.Empty;
            string date = this.DateFormat as string;
            var tempdate = Convert.ToDateTime(datetoConvert).ToString(date);
            convertedDate = tempdate.Replace('-', '/');
            return convertedDate;
        }


        protected override void OnPropertyChanged(string name)
        {
            var eventHandler = this.PropertyChanged;
            if (eventHandler != null)
            {
                eventHandler(this, new PropertyChangedEventArgs(name));
            }
            switch (name)
            {
                case "TransferDateCalender":
                    FillStartDate();
                    break;


            }
            base.OnPropertyChanged(name);
        }


        void FillStartDate()
        {
            string date = this.DateFormat as string;
            CashChequeDateStr = Convert.ToDateTime(this.TransferDateCalender).ToString(date);

        }
        private void GetListData()
        {
            IPurchaseOrderListRepository purchaseRepository = new PurchaseOrderListRepository();
            
            var cashBankAcnts = rmRepository.GetAccountDetails().Where(t => t.AccountType == Convert.ToByte(Account_Type.Cash) ||
              t.AccountType == Convert.ToByte(Account_Type.Bank) || t.AccountType==Convert.ToByte(Account_Type.CreditCard)).ToList();
            if (cashBankAcnts != null)
            {
                TransferFromCashAndBankAccountsLst = cashBankAcnts.ToList();
                TransferTocashAndBankAccountsLst= cashBankAcnts.ToList();
            }

            var taxes = purchaseRepository.GetDefaultTaxes().ToList();
            if (taxes != null)
            {
                LstTaxes = taxes.ToList();
            }
            TaxModel objDefaultTax = new TaxModel();
            objDefaultTax = purchaseRepository.GetDefaultTaxes().FirstOrDefault();
            if (objDefaultTax != null)
            {
                TaxName = objDefaultTax.TaxName;
            }

        }


        /// <summary>
        ///  Occurs when System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32) is called.
        /// </summary>
        /// <param name="sender">The sender.</param>
        /// <param name="e">The <see cref="ProgressChangedEventArgs"/> instance containing the event data.</param>
        private void LoadSupplierBackgroundProgress(object sender, ProgressChangedEventArgs e)
        {

        }

        ///// <summary>
        /////  Occurs when the background operation has completed, has been canceled, or has raised an exception.
        ///// </summary>
        ///// <param name="sender">The sender.</param>
        ///// <param name="e">The <see cref="RunWorkerCompletedEventArgs"/> instance containing the event data.</param>
        private void LoadSupplierBackgroundComplete(object sender, RunWorkerCompletedEventArgs e)
        {
            GetListData();
            RefreshData();

            Mouse.OverrideCursor = null;

        }

        #endregion
    }
}
