using Microsoft.Practices.Prism.Events;
using Microsoft.Practices.Prism.Regions;
using Microsoft.Practices.ServiceLocation;
using Newtonsoft.Json;
using SASClient.CashBank.Services;
using SASClient.CashBank.Views;
using SASClient.Product.Services;
using SDN.CashBank.Views;
using SDN.Common;
using SDN.Purchasing.Services;
using SDN.Purchasing.View;
using SDN.Sales.Views;
using SDN.UI.Entities;
using SDN.UI.Entities.CashandBank;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Input;

namespace SASClient.CashBank.ViewModels
{
    public class CashBankStatementViewModel : CashBankStatementEntity
    {

        #region private member
        private ObservableCollection<QuarterEntity> _quarterlist = new ObservableCollection<QuarterEntity>();
        private ObservableCollection<MonthEntity> _monthlist = new ObservableCollection<MonthEntity>();
        private List<CashBankStatementEntity> DefaultList = new List<CashBankStatementEntity>();
        private List<CashBankStatementEntity> FullList = new List<CashBankStatementEntity>();
        public static List<CashBankStatementEntity> fullListOfCashAndBank = new List<CashBankStatementEntity>();
        public  List<CashBankStatementEntity> First = new List<CashBankStatementEntity>();
        public static List<CashBankStatementEntity> tempFirst = new List<CashBankStatementEntity>();
        public static List<CashBankStatementEntity> tempLast= new List<CashBankStatementEntity>();
        public  List<CashBankStatementEntity> Last = new List<CashBankStatementEntity>();
        public static decimal OpBalance = 0;
        public static decimal ClBalance = 0;
        //public static List<bool> listMaintain = new List<bool>();
        public static List<int> IdMaintain = new List<int>();
        private readonly IRegionManager regionManager;
        private readonly IEventAggregator eventAggregator;
        private int Count = 0;
        private string jsonSearch;
        private string _SelectedName;
        private List<SearchEntity> SearchValues;
        private ICashBankStatementRepository CashBankStatementRepository = new CashBankStatementRepository();
        IStockCardListRepository purchaseRepository = new StockCardListRepository();
        //private IPayMoneyRepository rmRepository = new PayMoneyRepository();
        public event PropertyChangedEventHandler PropertyChanged;

        #endregion
        public ObservableCollection<QuarterEntity> QuarterList
        {
            get
            {
                _quarterlist.Clear();
                QuarterData();
                return _quarterlist;
            }
        }
        private void QuarterData()
        {
            _quarterlist.Add(new QuarterEntity { ID = 1, Quarter = "Jan-Mar" });
            _quarterlist.Add(new QuarterEntity { ID = 2, Quarter = "Apr-Jun" });
            _quarterlist.Add(new QuarterEntity { ID = 3, Quarter = "Jul-Sep" });
            _quarterlist.Add(new QuarterEntity { ID = 4, Quarter = "Oct-Dec" });
        }
        public ObservableCollection<MonthEntity> MonthList
        {
            get
            {
                _monthlist.Clear();
                MonthData();
                return _monthlist;
            }
        }
      
        private void MonthData()
        {
            _monthlist.Add(new MonthEntity { ID = 1, Month = "Jan" });
            _monthlist.Add(new MonthEntity { ID = 2, Month = "Feb" });
            _monthlist.Add(new MonthEntity { ID = 3, Month = "Mar" });
            _monthlist.Add(new MonthEntity { ID = 4, Month = "Apr" });
            _monthlist.Add(new MonthEntity { ID = 5, Month = "May" });
            _monthlist.Add(new MonthEntity { ID = 6, Month = "June" });
            _monthlist.Add(new MonthEntity { ID = 7, Month = "July" });
            _monthlist.Add(new MonthEntity { ID = 8, Month = "Aug" });
            _monthlist.Add(new MonthEntity { ID = 9, Month = "Sept" });
            _monthlist.Add(new MonthEntity { ID = 10, Month = "Oct" });
            _monthlist.Add(new MonthEntity { ID = 11, Month = "Nov" });
            _monthlist.Add(new MonthEntity { ID = 12, Month = "Dec" });

        }
        #region constructor

        public CashBankStatementViewModel(IRegionManager regionManager, IEventAggregator eventAggregator)
        : base()
        {
            this.regionManager = regionManager;
            this.eventAggregator = eventAggregator;
            this.LoadSupplierBackground();
            NavigateToRespectiveForm = new RelayCommand(NavigatetoForm);
            NavigatetoName = new RelayCommand(NavigateToFormDetails);
            SelectChangedCommand = new RelayCommand(onSelectionChange);
            NavigateToCashChequeNo = new RelayCommand(NavigatetoCashChequeNumberForm);
            CheckISActive = new RelayCommand(checkisactive);
        }



        #region 

        public RelayCommand SelectChangedCommand { get; set; }
        public RelayCommand NavigateToRespectiveForm { get; set; }
        public RelayCommand NavigateToCashChequeNo { get; set; }
        public RelayCommand NavigatetoName { get; set; }
        public RelayCommand CheckISActive { get; set; }
        #endregion
        public CashBankStatementViewModel()
        {

        }
        public void ShowSelected()
        {
            if(!string.IsNullOrEmpty(SelectedName))
            {
                CashBankStatementDetailList = FullList.Where(x => (x.Name == SelectedName)).ToList();
                CashBankStatementSearchList = CashBankStatementDetailList;
            }
            else
            {
                CashBankStatementSearchList = CashBankStatementDetailList;
            }
            OnPropertyChanged("CashBankStatementDetailList");
        }
        void NavigateToFormDetails(object param)
        {
            if (param != null)
            {
                List<object> values = new List<object>();
                values = param as List<object>;
                var TransType = values[1];
                if (TransType.Equals("PM") || TransType.Equals("TM") || TransType.Equals("RM"))
                {

                    SharedValues.NewClick = "New";
                    var tabview = ServiceLocator.Current.GetInstance<AccountTabView>();

                    var tabregion = this.regionManager.Regions[RegionNames.MenuBarRegion];
                    tabregion.Add(tabview);
                    if (tabregion != null)
                    {
                        tabregion.Activate(tabview);
                    }
                    PurchaseTabEntity tabentity = new PurchaseTabEntity();
                    var tabentityValue = tabentity as PurchaseTabEntity;
                    tabentityValue.OrderTabTrue = true;

                    var mainview = ServiceLocator.Current.GetInstance<AccountsDetailsView>();

                    var mainregion = this.regionManager.Regions[RegionNames.MainRegion];
                    mainregion.Add(mainview);
                    if (mainregion != null)
                    {
                        mainregion.Activate(mainview);
                    }////
                    eventAggregator.GetEvent<TabVisibilityEvent>().Publish(true);
                    eventAggregator.GetEvent<SubTabVisibilityEvent>().Publish(false);
                    eventAggregator.GetEvent<TitleChangedEvent>().Publish("Accounts Details Form");
                }
                else if (TransType.Equals("RC"))
                {
                    SharedValues.NewClick = values[0].ToString();
                    SharedValues.getValue = values[0].ToString();
                    var view = ServiceLocator.Current.GetInstance<SDN.Customers.Views.CustomersView>();

                    IRegion region = this.regionManager.Regions[RegionNames.MainRegion];

                    region.Add(view);
                    if (region != null)
                    {
                        region.Activate(view);
                    }

                    var view2 = ServiceLocator.Current.GetInstance<SDN.Customers.Views.CustomersTabView>();

                    IRegion region2 = this.regionManager.Regions[RegionNames.MenuBarRegion];

                    region2.Add(view2);
                    if (region2 != null)
                    {
                        region2.Activate(view2);
                    }
                    eventAggregator.GetEvent<TabVisibilityEvent>().Publish(true);
                    eventAggregator.GetEvent<SubTabVisibilityEvent>().Publish(false);
                    eventAggregator.GetEvent<TitleChangedEvent>().Publish("Customers Details Form");
                }
                else if (TransType.Equals("RS"))
                {
                    SharedValues.NewClick = values[0].ToString();
                    SharedValues.getValue = values[0].ToString();

                    var mainview = ServiceLocator.Current.GetInstance<SupplierDetailView>();
                    var mainregion = this.regionManager.Regions[RegionNames.MainRegion];
                    mainregion.Add(mainview);
                    if (mainregion != null)
                    {
                        mainregion.Activate(mainview);
                    }


                    var tabview = ServiceLocator.Current.GetInstance<SupplierTabView>();
                    var tabregion = this.regionManager.Regions[RegionNames.MenuBarRegion];
                    tabregion.Add(tabview);
                    if (tabregion != null)
                    {
                        tabregion.Activate(tabview);
                    }

                    eventAggregator.GetEvent<TabVisibilityEvent>().Publish(true);
                    eventAggregator.GetEvent<SubTabVisibilityEvent>().Publish(false);
                    eventAggregator.GetEvent<TitleChangedEvent>().Publish("Suppliers Details Form");

                }


            }


        }


        void NavigatetoCashChequeNumberForm(object param)
        {

            try
            {
                var sub = param.ToString();
                var comp = sub.Substring(0, 2);
                //List<object> list = new List<object>();
                //var z = list[0];


                if (param != null && comp != "HD" && comp != "IC")
                {
                    string obj = param.ToString();
                    SharedValues.NewClick = obj;

                    if (comp == "PC")
                    {
                        SharedValues.getValue = "PaymentFromCustomerTab";
                        var tabview = ServiceLocator.Current.GetInstance<SalesTabView>();

                        var tabregion = this.regionManager.Regions[RegionNames.MenuBarRegion];
                        tabregion.Add(tabview);
                        if (tabregion != null)
                        {
                            tabregion.Activate(tabview);
                        }

                        var mainview = ServiceLocator.Current.GetInstance<PaymentFromCustomersView>();

                        var mainregion = this.regionManager.Regions[RegionNames.MainRegion];
                        mainregion.Add(mainview);
                        if (mainregion != null)
                        {
                            mainregion.Activate(mainview);
                        }////
                        eventAggregator.GetEvent<TabVisibilityEvent>().Publish(true);
                        eventAggregator.GetEvent<SubTabVisibilityEvent>().Publish(false);
                        eventAggregator.GetEvent<TitleChangedEvent>().Publish("Payment From Customer Form");
                    }
                    else if (comp == "PS")
                    {
                        SharedValues.getValue = "PaymentToSupplierTab";
                        var tabview = ServiceLocator.Current.GetInstance<PurchaseTabView>();

                        var tabregion = this.regionManager.Regions[RegionNames.MenuBarRegion];
                        tabregion.Add(tabview);
                        if (tabregion != null)
                        {
                            tabregion.Activate(tabview);
                        }
                        PurchaseTabEntity tabentity = new PurchaseTabEntity();
                        var tabentityValue = tabentity as PurchaseTabEntity;
                        tabentityValue.OrderTabTrue = true;

                        var mainview = ServiceLocator.Current.GetInstance<PaymentToSupplierView>();

                        var mainregion = this.regionManager.Regions[RegionNames.MainRegion];
                        mainregion.Add(mainview);
                        if (mainregion != null)
                        {
                            mainregion.Activate(mainview);
                        }
                        eventAggregator.GetEvent<TabVisibilityEvent>().Publish(true);
                        eventAggregator.GetEvent<SubTabVisibilityEvent>().Publish(false);
                        eventAggregator.GetEvent<TitleChangedEvent>().Publish("Payment to Supplier Form");
                    }
                    else if (comp == "TM")
                    {
                        SharedValues.NewClick = param.ToString();
                        SharedValues.getValue = "TransferMoneyTab";
                        var tabview = ServiceLocator.Current.GetInstance<CashBankTabView>();

                        var tabregion = this.regionManager.Regions[RegionNames.MenuBarRegion];
                        tabregion.Add(tabview);
                        if (tabregion != null)
                        {
                            tabregion.Activate(tabview);
                        }

                        var mainview = ServiceLocator.Current.GetInstance<TransferMoneyView>();

                        var mainregion = this.regionManager.Regions[RegionNames.MainRegion];
                        mainregion.Add(mainview);
                        if (mainregion != null)
                        {
                            mainregion.Activate(mainview);
                        }////
                        eventAggregator.GetEvent<TabVisibilityEvent>().Publish(true);

                        eventAggregator.GetEvent<TitleChangedEvent>().Publish("Transfer Money Form");
                    }
                    else if (comp == "RM")
                    {
                        SharedValues.NewClick = param.ToString();
                        SharedValues.getValue = "ReceiveMoneyTab";
                        var tabview = ServiceLocator.Current.GetInstance<CashBankTabView>();

                        var tabregion = this.regionManager.Regions[RegionNames.MenuBarRegion];
                        tabregion.Add(tabview);
                        if (tabregion != null)
                        {
                            tabregion.Activate(tabview);
                        }

                        var mainview = ServiceLocator.Current.GetInstance<ReceiveMoneyView>();

                        var mainregion = this.regionManager.Regions[RegionNames.MainRegion];
                        mainregion.Add(mainview);
                        if (mainregion != null)
                        {
                            mainregion.Activate(mainview);
                        }////
                        eventAggregator.GetEvent<TabVisibilityEvent>().Publish(true);

                        eventAggregator.GetEvent<TitleChangedEvent>().Publish("Receive Money Form");
                    }
                    else if (comp == "PM")
                    {
                        SharedValues.getValue = "PayMoneyTab";
                        SharedValues.NewClick = param.ToString();

                        var tabview = ServiceLocator.Current.GetInstance<CashBankTabView>();

                        var tabregion = this.regionManager.Regions[RegionNames.MenuBarRegion];
                        tabregion.Add(tabview);
                        if (tabregion != null)
                        {
                            tabregion.Activate(tabview);
                        }

                        var mainview = ServiceLocator.Current.GetInstance<PayMoneyView>();

                        var mainregion = this.regionManager.Regions[RegionNames.MainRegion];
                        mainregion.Add(mainview);
                        if (mainregion != null)
                        {
                            mainregion.Activate(mainview);
                        }
                        eventAggregator.GetEvent<TabVisibilityEvent>().Publish(true);
                        eventAggregator.GetEvent<SubTabVisibilityEvent>().Publish(false);
                        eventAggregator.GetEvent<TitleChangedEvent>().Publish("Pay Money");
                    }
                    else if (comp == "RS")
                    {
                        if (param != null)
                        {
                            SharedValues.NewClick = param.ToString();
                        }
                        SharedValues.getValue = "RefundFromSupplierTab";

                        var tabview = ServiceLocator.Current.GetInstance<CashBankTabView>();

                        var tabregion = this.regionManager.Regions[RegionNames.MenuBarRegion];
                        tabregion.Add(tabview);
                        if (tabregion != null)
                        {
                            tabregion.Activate(tabview);
                        }

                        var mainview = ServiceLocator.Current.GetInstance<RefundFromSupplierView>();

                        var mainregion = this.regionManager.Regions[RegionNames.MainRegion];
                        mainregion.Add(mainview);
                        if (mainregion != null)
                        {
                            mainregion.Activate(mainview);
                        }
                        eventAggregator.GetEvent<TabVisibilityEvent>().Publish(true);
                        eventAggregator.GetEvent<SubTabVisibilityEvent>().Publish(false);
                        eventAggregator.GetEvent<TitleChangedEvent>().Publish("Refund From Supplier Form");
                    }
                    else if (comp == "RC")
                    {
                        if (param != null)
                        {
                            SharedValues.NewClick = param.ToString();
                        }
                        SharedValues.getValue = "RefundToCustomerTab";

                        var tabview = ServiceLocator.Current.GetInstance<CashBankTabView>();

                        var tabregion = this.regionManager.Regions[RegionNames.MenuBarRegion];
                        tabregion.Add(tabview);
                        if (tabregion != null)
                        {
                            tabregion.Activate(tabview);
                        }

                        var mainview = ServiceLocator.Current.GetInstance<RefundToCustomerView>();

                        var mainregion = this.regionManager.Regions[RegionNames.MainRegion];
                        mainregion.Add(mainview);
                        if (mainregion != null)
                        {
                            mainregion.Activate(mainview);
                        }
                        eventAggregator.GetEvent<TabVisibilityEvent>().Publish(true);
                        eventAggregator.GetEvent<SubTabVisibilityEvent>().Publish(false);
                        eventAggregator.GetEvent<TitleChangedEvent>().Publish("Refund To Customer Form");
                    }
                    //else if (comp2 == "HDFC" || comp3 == "ICICI")
                    //{
                    //    var mainview = ServiceLocator.Current.GetInstance<CashBankDetailView>();
                    //    var mainregion = this.regionManager.Regions[RegionNames.MainRegion];
                    //    mainregion.Add(mainview);
                    //    if (mainregion != null)
                    //    {
                    //        mainregion.Activate(mainview);
                    //    }


                    //    var tabview = ServiceLocator.Current.GetInstance<CashBankTabView>();
                    //    var tabregion = this.regionManager.Regions[RegionNames.MenuBarRegion];
                    //    tabregion.Add(tabview);
                    //    if (tabregion != null)
                    //    {
                    //        tabregion.Activate(tabview);
                    //    }

                    //    eventAggregator.GetEvent<TabVisibilityEvent>().Publish(true);
                    //    eventAggregator.GetEvent<SubTabVisibilityEvent>().Publish(false);
                    //    eventAggregator.GetEvent<TitleChangedEvent>().Publish("Cash & Bank Details");
                    //}

                }
                else
                {
                    var comp2 = sub.Substring(0, 4);
                    if (comp2 == "HDFC")
                    {
                        string obj = param.ToString();
                        SharedValues.NewClick = obj;
                        SharedValues.getValue = "TransferMoneyTab";
                        var tabview = ServiceLocator.Current.GetInstance<CashBankTabView>();

                        var tabregion = this.regionManager.Regions[RegionNames.MenuBarRegion];
                        tabregion.Add(tabview);
                        if (tabregion != null)
                        {
                            tabregion.Activate(tabview);
                        }

                        var mainview = ServiceLocator.Current.GetInstance<TransferMoneyView>();

                        var mainregion = this.regionManager.Regions[RegionNames.MainRegion];
                        mainregion.Add(mainview);
                        if (mainregion != null)
                        {
                            mainregion.Activate(mainview);
                        }////
                        eventAggregator.GetEvent<TabVisibilityEvent>().Publish(true);

                        eventAggregator.GetEvent<TitleChangedEvent>().Publish("Transfer Money Form");
                    }
                    else
                    {
                        var comp3 = sub.Substring(0, 5);
                        if (comp3 == "ICICI")
                        {
                            SharedValues.NewClick = param.ToString();
                            SharedValues.getValue = "TransferMoneyTab";
                            var tabview = ServiceLocator.Current.GetInstance<CashBankTabView>();

                            var tabregion = this.regionManager.Regions[RegionNames.MenuBarRegion];
                            tabregion.Add(tabview);
                            if (tabregion != null)
                            {
                                tabregion.Activate(tabview);
                            }

                            var mainview = ServiceLocator.Current.GetInstance<TransferMoneyView>();

                            var mainregion = this.regionManager.Regions[RegionNames.MainRegion];
                            mainregion.Add(mainview);
                            if (mainregion != null)
                            {
                                mainregion.Activate(mainview);
                            }////
                            eventAggregator.GetEvent<TabVisibilityEvent>().Publish(true);

                            eventAggregator.GetEvent<TitleChangedEvent>().Publish("Transfer Money Form");
                        }

                    }

                }
            }
            catch (Exception e)
            {
                throw e;
            }

        }
        public void NavigatetoForm(object param)
        {
            if (param != null)
            {
                string obj = param.ToString();
                SharedValues.getValue = obj;
            }
            var mainview = ServiceLocator.Current.GetInstance<SDN.Customers.Views.CustomersView>();
            var mainregion = this.regionManager.Regions[RegionNames.MainRegion];
            mainregion.Add(mainview);
            if (mainregion != null)
            {
                mainregion.Activate(mainview);
            }


            var tabview = ServiceLocator.Current.GetInstance<SDN.Customers.Views.CustomersTabView>();
            var tabregion = this.regionManager.Regions[RegionNames.MenuBarRegion];
            tabregion.Add(tabview);
            if (tabregion != null)
            {
                tabregion.Activate(tabview);
            }

            eventAggregator.GetEvent<TabVisibilityEvent>().Publish(true);
            eventAggregator.GetEvent<TitleChangedEvent>().Publish("Customers Details Form");
        }
        //List<> sd = new List<>();
        public void onSelectionChange(object param)
        {
            try
            {

                List<object> values = new List<object>();
                values = param as List<object>;
                var checkUncheck = values[0];
                var checkString = checkUncheck.ToString();

                //listMaintain.Add(Convert.ToBoolean(checkString));
                var ElementId = values[1];

                var id = Convert.ToInt32(ElementId);
                if (IdMaintain != null && !IdMaintain.Contains(id))
                    IdMaintain.Add(id);

                if (ElementId != null && String.IsNullOrEmpty(JsonData) && checkString == "True")
                {
                    if (IdMaintain.Count == 1)
                    {
                        CashBankStatementDetailList = CashBankStatementRepository.GetAccountDetailList(id, this.JsonData).ToList();
                        FullList = CashBankStatementDetailList;
                        this.CashBankStatementSearchList = FullList;
                        // li = new List<bool>();
                    }

                    else
                    {
                        foreach (var item in IdMaintain)
                        {
                            var tempID = item;
                            CashBankStatementDetailList = CashBankStatementRepository.GetAccountDetailList(tempID, this.JsonData).ToList();
                            //fullListOfCashAndBank = CashBankStatementDetailList;
                            First.Add(CashBankStatementDetailList.First());

                            OpBalance = First.Sum(e => e.Balance);
                            this.BalanceStr = OpBalance.ToString();
                            this.Balance = OpBalance;
                            Last.Add(CashBankStatementDetailList.Last());

                            ClBalance = Last.Sum(e => e.Balance);
                            this.BalanceStr = ClBalance.ToString();
                            this.Balance = ClBalance;
                            CashBankStatementDetailList.RemoveAt(0);
                            CashBankStatementDetailList.RemoveAt(CashBankStatementDetailList.Count - 1);

                            fullListOfCashAndBank.AddRange(CashBankStatementDetailList);


                            CashBankStatementDetailList = fullListOfCashAndBank;
                            FullList = CashBankStatementDetailList;
                            this.CashBankStatementSearchList = FullList;
                            //First = new List<CashBankStatementEntity>();
                            //Last = new List<CashBankStatementEntity>();
                        }
                        // index = CashBankStatementDetailList.IndexOf(0);

                        // string.Format("{0:#,###0}", OpBalance.ToString());
                        //String.Format("{0:#,###,###.##}", MyNumber)
                        var Templist = new List<CashBankStatementEntity>();
                        Templist.Add(new CashBankStatementEntity { TransactionType = "", Name = "Opening Balance", ChequeNo = "", CDate = "", DepositStr = "", WithdrawalStr = "", BalanceStr = String.Format("{0:#,##0.##}", OpBalance) });
                       
                        //foreach (var item in FullList)
                        //{
                        //    Templist.Add(item);
                        //}
                        Templist.AddRange(FullList);

                        Templist.Add(new CashBankStatementEntity { TransactionType = "", Name = "Closing Balance", ChequeNo = "", CDate = "", DepositStr = "", WithdrawalStr = "", BalanceStr = String.Format("{0:#,##0.##}", ClBalance) });
                        CashBankStatementDetailList = Templist;
                        this.CashBankStatementSearchList = CashBankStatementDetailList;
                        fullListOfCashAndBank = new List<CashBankStatementEntity>();
                        OpBalance = 0;
                        ClBalance = 0;
                        tempFirst = First;
                        tempLast = Last;
                        First = new List<CashBankStatementEntity>();
                        Last = new List<CashBankStatementEntity>();
                    }


                }
                else if (ElementId != null && String.IsNullOrEmpty(JsonData) && checkString == "False")
                {
                    if (checkString == "False" && ElementId != null)
                    {  
                        var tempBal = CashBankStatementDetailList.FirstOrDefault();
                        var tempBalValueFirst = Convert.ToDecimal(tempBal.BalanceStr);
                        var tempBal2= CashBankStatementDetailList.LastOrDefault();
                        var tempBalValueLast = Convert.ToDecimal(tempBal2.BalanceStr);
                        
                        var balnace1 = tempFirst.Where(z => z.CashBankIdentityID == Convert.ToInt32(ElementId)).Select(z => z.Balance).SingleOrDefault();
                        OpBalance = tempBalValueFirst - balnace1;

                        var balance2=  tempLast.Where(r => r.CashBankIdentityID == Convert.ToInt32(ElementId)).Select(r => r.Balance).SingleOrDefault();
                        ClBalance = tempBalValueLast - balance2;
                        CashBankStatementDetailList.RemoveAt(0);
                        CashBankStatementDetailList.RemoveAt(CashBankStatementDetailList.Count - 1);
                        CashBankStatementDetailList.RemoveAll(r => r.CashBankIdentityID == Convert.ToInt32(ElementId));
                        if (IdMaintain.Contains(Convert.ToInt32(ElementId)))
                        {
                            IdMaintain.Remove(Convert.ToInt32(ElementId));
                        }
                        CashBankStatementDetailList = CashBankStatementDetailList;
                        FullList = CashBankStatementDetailList;
                        this.CashBankStatementSearchList = CashBankStatementDetailList;

                    }
                    if (CashBankStatementDetailList.Count==0 && IdMaintain.Contains(Convert.ToInt32(ElementId)))
                    {
                        CashBankStatementDetailList = new List<CashBankStatementEntity>();
                        FullList = CashBankStatementDetailList;
                    }
                    else if(CashBankStatementDetailList.Count ==0 && IdMaintain.Count==0 )
                    {
                        CashBankStatementDetailList = new List<CashBankStatementEntity>();
                        IsChecked = false;
                    }
                    else
                    {
                        var Templist = new List<CashBankStatementEntity>();
                        Templist.Add(new CashBankStatementEntity { TransactionType = "", Name = "Opening Balance", ChequeNo = "", CDate = "", DepositStr = "", WithdrawalStr = "", BalanceStr = String.Format("{0:#,##0.##}", OpBalance) });
                        //foreach (var item in FullList)
                        //{
                        //    Templist.Add(item);
                        //}
                        Templist.AddRange(FullList);

                        Templist.Add(new CashBankStatementEntity { TransactionType = "", Name = "Closing Balance", ChequeNo = "", CDate = "", DepositStr = "", WithdrawalStr = "", BalanceStr = String.Format("{0:#,##0.##}", ClBalance) });
                        CashBankStatementDetailList = Templist;
                        this.CashBankStatementSearchList = CashBankStatementDetailList;
                        fullListOfCashAndBank = new List<CashBankStatementEntity>();
                        OpBalance = 0;
                        ClBalance = 0;

                    }
                   

                }
                else
                {
                    CashBankStatementDetailList = CashBankStatementRepository.GetAccountDetailList(CashBankAccountID, this.JsonData).ToList();
                    FullList = CashBankStatementDetailList;
                    this.CashBankStatementSearchList = CashBankStatementDetailList;
                }
            }
            catch (Exception e)
            {
                throw e;
            }

        }

        public void checkisactive(object param)
        {
            List<object> values = new List<object>();
            values = param as List<object>;
            var TransType = values[0];

            if (TransType.ToString() == "True")
            {
                foreach (var item in CashBankStatementList)
                {
                    var id = item.CashBankAccountID;

                    onSelectionChangeFun(id);

                    item.IsChecked = true;
                }
                // addition of opening balance
                OpBalance = First.Sum(e => e.Balance);
                // end addition of opening balance

                //******************Closing balance
                ClBalance = Last.Sum(e => e.Balance);
               
                //****************** end Closing balance
                var Templist = new List<CashBankStatementEntity>();
                Templist.Add(new CashBankStatementEntity { TransactionType = "", Name = "Opening Balance", ChequeNo = "", CDate = "", DepositStr = "", WithdrawalStr = "", BalanceStr = String.Format("{0:#,##0.##}", OpBalance) });
                foreach (var item in FullList)
                {
                    Templist.Add(item);
                   
                }
                Templist.Add(new CashBankStatementEntity { TransactionType = "", Name = "Closing Balance", ChequeNo = "", CDate = "", DepositStr = "", WithdrawalStr = "", BalanceStr = String.Format("{0:#,##0.##}", ClBalance) });
                CashBankStatementDetailList = Templist;
                this.CashBankStatementSearchList = Templist;
                fullListOfCashAndBank = new List<CashBankStatementEntity>();
                OpBalance = 0;
                ClBalance = 0;
                Balance = 0;
                BalanceStr = null;
            }
            else
            {
                foreach (var item in CashBankStatementList)
                {
                    item.IsChecked = false;

                }
                CashBankStatementDetailList = new List<CashBankStatementEntity>();
                fullListOfCashAndBank = new List<CashBankStatementEntity>();
                //listMaintain = new List<bool>();
                IdMaintain = new List<int>();
                OpBalance = 0;
                ClBalance = 0;
                Balance = 0;
                BalanceStr = null;
                First = new List<CashBankStatementEntity>();
                Last = new List<CashBankStatementEntity>();
            }
        }

        public void onSelectionChangeFun(object param)
        {
            try
            {

                if (param != null)
                {
                    int CashBankAccountID = Convert.ToInt32(param);
                    IdMaintain.Add(CashBankAccountID);
                    CashBankStatementDetailList = CashBankStatementRepository.GetAccountDetailList(CashBankAccountID, this.JsonData).ToList();
                    First.Add(CashBankStatementDetailList.First());
                    Last.Add(CashBankStatementDetailList.Last());
                    CashBankStatementDetailList.RemoveAt(0);
                    CashBankStatementDetailList.RemoveAt(CashBankStatementDetailList.Count - 1);
                    fullListOfCashAndBank.AddRange(CashBankStatementDetailList);
                    CashBankStatementDetailList = fullListOfCashAndBank;
                    FullList = CashBankStatementDetailList;
                    this.CashBankStatementSearchList = FullList;
                }
              
                else
                {
                    CashBankStatementDetailList = CashBankStatementRepository.GetAccountDetailList(CashBankAccountID, this.JsonData).ToList();
                    FullList = CashBankStatementDetailList;
                    this.CashBankStatementSearchList = FullList;
                }


            }
            catch (Exception e)
            {
                throw e;
            }

        }

        public void SetData(string SearchFilter, string parameter)
        {

            if (parameter == "SelectedFormName" && SearchFilter != string.Empty && SearchFilter != null)
            {
                Search(null);
            }
            if (parameter == "Year" && SearchFilter != string.Empty && SearchFilter != null)
            {
                this.ShowSelectedTrue = true;
                //this.ShowAllTrue = false;
                this.YearmonthQuartTrue = true;//change after client feedback on 22 may 2017
                Search(null);
            }

            if (parameter == "Quarter" && SearchFilter != string.Empty && SearchFilter != null)
            {
                this.ShowSelectedTrue = true;
                //this.ShowAllTrue = false;
                this.YearmonthQuartTrue = true;//added after feedback
                if (this.SelectedSearchYear == null)
                    this.SelectedSearchYear = DateTime.Now.Year.ToString();
                switch (SearchFilter)
                {
                    case "1":
                        if (this.SelectedSearchMonth == "1" || this.SelectedSearchMonth == "2" || this.SelectedSearchMonth == "3")
                            break;
                        else
                            this.SelectedSearchMonth = null;
                        break;
                    case "2":
                        if (this.SelectedSearchMonth == "4" || this.SelectedSearchMonth == "5" || this.SelectedSearchMonth == "6")
                            break;
                        else
                            this.SelectedSearchMonth = null;
                        break;
                    case "3":
                        if (this.SelectedSearchMonth == "7" || this.SelectedSearchMonth == "8" || this.SelectedSearchMonth == "9")
                            break;
                        else
                            this.SelectedSearchMonth = null;
                        break;
                    case "4":
                        if (this.SelectedSearchMonth == "10" || this.SelectedSearchMonth == "11" || this.SelectedSearchMonth == "12")
                            break;
                        else
                            this.SelectedSearchMonth = null;
                        break;
                }
                //this.SelectedSearchMonth = null;
                Search(null);
            }
            if (parameter == "Month" && SearchFilter != string.Empty && SearchFilter != null)
            {
                this.ShowSelectedTrue = true;
                //this.ShowAllTrue = false;
                this.YearmonthQuartTrue = true;//added after feedback
                if (this.SelectedSearchYear == null)
                    this.SelectedSearchYear = DateTime.Now.Year.ToString();
                if (this.SelectedSearchQuarter == null)
                {
                    if (SearchFilter == "1" || SearchFilter == "2" || SearchFilter == "3")
                        this.SelectedSearchQuarter = 1.ToString();
                    if (SearchFilter == "4" || SearchFilter == "5" || SearchFilter == "6")
                        this.SelectedSearchQuarter = 2.ToString();
                    if (SearchFilter == "7" || SearchFilter == "8" || SearchFilter == "9")
                        this.SelectedSearchQuarter = 3.ToString();
                    if (SearchFilter == "10" || SearchFilter == "11" || SearchFilter == "12")
                        this.SelectedSearchQuarter = 4.ToString();

                }
                else
                {
                    if (SearchFilter == "1" || SearchFilter == "2" || SearchFilter == "3")
                        this.SelectedSearchQuarter = 1.ToString();
                    if (SearchFilter == "4" || SearchFilter == "5" || SearchFilter == "6")
                        this.SelectedSearchQuarter = 2.ToString();
                    if (SearchFilter == "7" || SearchFilter == "8" || SearchFilter == "9")
                        this.SelectedSearchQuarter = 3.ToString();
                    if (SearchFilter == "10" || SearchFilter == "11" || SearchFilter == "12")
                        this.SelectedSearchQuarter = 4.ToString();
                }
                Search(null);
            }
        }
        void Search(object param)
        {
            //UIServices.SetBusyState();
            //DoProcessing();
            if (Count != 0)
            {
                SearchValues = new List<SearchEntity>();
                if (this.SelectedSearchYear != null && this.SelectedSearchYear != string.Empty)
                {
                    SearchEntity value = new SearchEntity();
                    value.FieldName = "Year";
                    value.FieldValue = this.SelectedSearchYear;
                    SearchValues.Add(value);
                    var year = Convert.ToInt32(this.SelectedSearchYear);
                }
                else
                {
                    SearchEntity value = new SearchEntity();
                    value.FieldName = "Year";
                    value.FieldValue = "0";
                    SearchValues.Add(value);
                }

                if (this.SelectedSearchQuarter != null && this.SelectedSearchQuarter != string.Empty)
                {
                    SearchEntity value = new SearchEntity();
                    value.FieldName = "Quarter";
                    value.FieldValue = this.SelectedSearchQuarter;
                    int month1;
                    int month2;
                    int month3;
                    if (Convert.ToInt32(this.SelectedSearchQuarter) == 1)
                    {
                        month1 = 1;
                        month2 = 2;
                        month3 = 3;
                    }
                    else if (Convert.ToInt32(this.SelectedSearchQuarter) == 2)
                    {
                        month1 = 4;
                        month2 = 5;
                        month3 = 6;
                    }
                    else if (Convert.ToInt32(this.SelectedSearchQuarter) == 3)
                    {
                        month1 = 7;
                        month2 = 8;
                        month3 = 9;
                    }
                    else
                    {
                        month1 = 10;
                        month2 = 11;
                        month3 = 12;
                    }
                    SearchValues.Add(value);
                }
                else
                {
                    SearchEntity value = new SearchEntity();
                    value.FieldName = "Quarter";
                    value.FieldValue = "0";
                    SearchValues.Add(value);
                }

                if (this.SelectedSearchMonth != null && this.SelectedSearchMonth != string.Empty)
                {
                    SearchEntity value = new SearchEntity();
                    value.FieldName = "Month";
                    value.FieldValue = this.SelectedSearchMonth;
                    SearchValues.Add(value);
                    var month = Convert.ToInt32(this.SelectedSearchMonth);
                }
                else
                {
                    SearchEntity value = new SearchEntity();
                    value.FieldName = "Month";
                    value.FieldValue = "0";
                    SearchValues.Add(value);
                }
                jsonSearch = JsonConvert.SerializeObject(SearchValues);
                this.JsonData = jsonSearch;

                if (Count != 0)
                {
                    CashBankStatementDetailList = CashBankStatementRepository.GetAccountDetailList(CashBankAccountID, this.JsonData).ToList();
                    FullList = CashBankStatementDetailList;
                }
                this.CashBankStatementSearchList = this.CashBankStatementDetailList.GroupBy(x=>x.Name).Select(x=>x.FirstOrDefault()).OrderBy(x => x.Name).ToList();

            }

        }
        #endregion
        #region background region
        private void LoadSupplierBackground()
        {
            Mouse.OverrideCursor = Cursors.Wait;

            //run time-consuming operations on a background thread
            BackgroundWorker worker = new BackgroundWorker();

            //Set the WorkerReportsProgress property to true if you want the BackgroundWorker to support progress updates.
            //When this property is true, user code can call the ReportProgress method to raise the ProgressChanged event.
            worker.WorkerReportsProgress = true;


            //This event is raised when you call the RunWorkerAsync method. This is where you start the time-consuming operation.
            worker.DoWork += new DoWorkEventHandler(this.LoadSupplierBackground);

            // This event is raised when you call the ReportProgress method.
            worker.ProgressChanged += new ProgressChangedEventHandler(this.LoadSupplierBackgroundProgress);

            //The RunWorkerCompleted event is raised when the background worker has completed. 
            //Depending on whether the background operation completed successfully, encountered an error,
            //or was canceled, update the user interface accordingly
            worker.RunWorkerCompleted += new RunWorkerCompletedEventHandler(this.LoadSupplierBackgroundComplete);

            //Starts running a background operation
            worker.RunWorkerAsync();
        }
        private void LoadSupplierBackground(object sender, DoWorkEventArgs e)
        {

            int minHeight = 300;
            int headerRows = 260;//180+40+30+10;
            var height = System.Windows.SystemParameters.PrimaryScreenHeight - headerRows - 67;
            bool validHeight = int.TryParse(height.ToString(), out minHeight);
            this.SIGridHeight = minHeight;

            RefreshData();
        }


        private void LoadSupplierBackgroundProgress(object sender, ProgressChangedEventArgs e)
        {

        }
        private void LoadSupplierBackgroundComplete(object sender, RunWorkerCompletedEventArgs e)
        {
            Mouse.OverrideCursor = null;
            Count = 1;

        }

        #endregion end background
        #region public method
        public void RefreshData()
        {
            try
            {
                this.CashBankStatementList = CashBankStatementRepository.GetAccountList().ToList();
                DefaultList = this.CashBankStatementList;
                IdMaintain = new List<int>();
                CashBankStatementDetailList = CashBankStatementSearchList;
                CashBankStatementSearchList = CashBankStatementDetailList;
                //listMaintain = new List<bool>();
                First = new List<CashBankStatementEntity>();
                Last = new List<CashBankStatementEntity>();
                OpBalance = 0;
                ClBalance = 0;
                fullListOfCashAndBank = new List<CashBankStatementEntity>();
            }
            catch (Exception e)
            {
                throw e;
            }
            this.YearRange = purchaseRepository.GetYearRange().ToList();

        }

        protected override void OnPropertyChanged(string name)
        {
            var eventHandler = this.PropertyChanged;
            if (eventHandler != null)
            {
                eventHandler(this, new PropertyChangedEventArgs(name));
            }

            switch (name)
            {
                case "SelectedSearchQuarter":
                    SetData(this.SelectedSearchQuarter, "Quarter");
                    break;
                case "SelectedSearchMonth":
                    SetData(this.SelectedSearchMonth, "Month");
                    break;
                case "SelectedSearchYear":
                    SetData(this.SelectedSearchYear, "Year");
                    break;
                case "SelectedName":
                    GetData(this.SelectedName, "SelectedName");
                    break;

            }

            base.OnPropertyChanged(name);
        }

        public void GetData(string SearchFilter, string parameter)
        {

            //int count = 0;
            if (parameter == "SelectedName")
            {
                if (!string.IsNullOrEmpty(SearchFilter))
                {

                    this.CashBankStatementDetailList = FullList.Where(x => (x.Name == SearchFilter)).ToList();
                    this.CashBankStatementDetailList = CashBankStatementDetailList;
                    //CashBankStatementSearchList = CashBankStatementDetailList;
                }
                else
                {
                    this.CashBankStatementDetailList = FullList;
                }
            }

            //TotalInvoiceAmount = Convert.ToString(StockCardList.Sum(e => e.InvoiceAmountValue));
            //TotalCCDAmount = Convert.ToString(StockCardList.Sum(e => e.TotalAmount));
        }
        #endregion end public method


    }
}
