
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Input;

namespace SASClient.Purchasing.ViewModel
{
    using Microsoft.Practices.Prism.Events;
    using Microsoft.Practices.Prism.Regions;
    using Microsoft.Practices.ServiceLocation;
    using Newtonsoft.Json;
    using SDN.Common;
    using SDN.Purchasing.View;
    using SDN.UI.Entities;
    using SDN.UI.Entities.Purchase;
    using Services;

    public class SuppliersDetailsListViewModel: SuppliersDetailsListEntity
    {
        private List<SearchEntity> SearchValues;
        private string jsonSearch;
        public event PropertyChangedEventHandler PropertyChanged;
        private readonly IRegionManager regionManager;
        private readonly IEventAggregator eventAggregator;
        private int Count = 0;
        private List<SuppliersDetailsListEntity> _statusCount = new List<SuppliersDetailsListEntity>();


        #region Constructor
        public List<SuppliersDetailsListEntity> statusCount
        {
            get
            {
                return _statusCount;
            }
            set
            {
                _statusCount = value;
                OnPropertyChanged("statusCount");
            }
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="PurchaseInvoiceListViewModel"/> class.
        /// </summary>
        public SuppliersDetailsListViewModel(IRegionManager regionManager, IEventAggregator eventAggregator)
            : base()
        {
            this.regionManager = regionManager;
            this.eventAggregator = eventAggregator;
            this.LoadSupplierBackground();
            SearchCommand = new RelayCommand(Search);
            //ShowAllCommand = new RelayCommand(ShowAll);
            //ShowSelectedCommand = new RelayCommand(ShowSelected);
            ShowActiveCommand = new RelayCommand(OnShowActive);
            ShowInactiveCommand = new RelayCommand(OnShowInactive);
            ShowBothCommand = new RelayCommand(OnShowBoth);
            NewCommand = new RelayCommand(OnNew);
            NavigateToClientCommand = new RelayCommand(OnNew);
        }

        public SuppliersDetailsListViewModel()
        {
        }

        public RelayCommand NavigateToClientCommand { get; set; }
        public RelayCommand NewCommand { get; set; }
        public RelayCommand SearchCommand { get; set; }
        //public RelayCommand ShowAllCommand { get; set; }
        //public RelayCommand ShowSelectedCommand { get; set; }
        public RelayCommand ShowActiveCommand { get; set; }
        public RelayCommand ShowInactiveCommand { get; set; }
        public RelayCommand ShowBothCommand { get; set; }

        #endregion  Constructor

        #region ButtonCommands

        void OnNew(object param)
        {
            string obj = param.ToString();
            SharedValues.getValue = obj;
            var mainview = ServiceLocator.Current.GetInstance<SupplierDetailView>();
            var mainregion = this.regionManager.Regions[RegionNames.MainRegion];
            mainregion.Add(mainview);
            if (mainregion != null)
            {
                mainregion.Activate(mainview);
            }
            
            var tabview = ServiceLocator.Current.GetInstance<SupplierTabView>();
            var tabregion = this.regionManager.Regions[RegionNames.MenuBarRegion];
            tabregion.Add(tabview);
            if (tabregion != null)
            {
                tabregion.Activate(tabview);
            }
            eventAggregator.GetEvent<SubTabVisibilityEvent>().Publish(false);
            eventAggregator.GetEvent<TabVisibilityEvent>().Publish(true);
            eventAggregator.GetEvent<TitleChangedEvent>().Publish("Suppliers Details Form");
        }

        void OnShowActive(object param)
        {
            Mouse.OverrideCursor = Cursors.Wait;
            this.ShowSelectedTrue = true;
            this.ShowAllTrue = false;
            Search(null);
            Mouse.OverrideCursor = null;
        }

        void OnShowInactive(object param)
        {
            Mouse.OverrideCursor = Cursors.Wait;
            this.ShowSelectedTrue = true;
            this.ShowAllTrue = false;
            Search(null);
            Mouse.OverrideCursor = null;
        }

        void OnShowBoth(object param)
        {
            Mouse.OverrideCursor = Cursors.Wait;
            this.ShowSelectedTrue = false;
            this.ShowAllTrue = true;
            Search(null);
            Mouse.OverrideCursor = null;
        }

        void refreshcommand(object param)
        {
            RefreshData();
        }

        //void ShowAll(object param)
        //{
        //    Mouse.OverrideCursor = Cursors.Wait;
        //    ShowAllTrue = true;
        //    ShowBoth = true;
        //    ShowInactive = false;
        //    ShowActive = false;
        //    Search(null);

        //    this.SupplierDetailsList = FullPQList;
        //    this.SupplierDetailsList = FullPQList;
        //    // this.RefundFromSuppliersListcmbDebit = this.RefundFromSuppliersListcmb.GroupBy(x => x.CashDebitNo).Select(g => g.First()).Where(y => y.CashDebitNo != null).ToList();
        //    this.SupplierDetailsListCusName = this.SupplierDetailsList.GroupBy(x => x.Name).Select(g => g.First()).Where(x => !string.IsNullOrEmpty(x.Name) || !string.IsNullOrWhiteSpace(x.Name)).OrderBy(e => e.Name).ToList();
        //    this.SupplierDetailsListCompRegNo = this.SupplierDetailsList.GroupBy(x => x.CompanyRegNo).Select(y => y.First()).Where(x => !string.IsNullOrEmpty(x.CompanyRegNo) || !string.IsNullOrWhiteSpace(x.CompanyRegNo)).Distinct().OrderBy(e => e.CompanyRegNo).ToList();
        //    this.SupplierDetailsListGSTRegNo = this.SupplierDetailsList.GroupBy(x => x.GSTRegNo).Select(y => y.First()).Where(x => !string.IsNullOrEmpty(x.GSTRegNo) || !string.IsNullOrWhiteSpace(x.GSTRegNo)).Distinct().OrderBy(e => e.GSTRegNo).ToList();

        //    this.SupplierDetailsListTelephone = this.SupplierDetailsList.GroupBy(x => x.Telephone).Select(y => y.First()).Where(x => !string.IsNullOrEmpty(x.Telephone) || !string.IsNullOrWhiteSpace(x.Telephone)).Distinct().ToList();
        //    this.SupplierDetailsListFax = this.SupplierDetailsList.GroupBy(x => x.Fax).Select(y => y.First()).Where(x => !string.IsNullOrEmpty(x.Fax) || !string.IsNullOrWhiteSpace(x.Fax)).Distinct().ToList();
        //    this.SupplierDetailsListEmail = this.SupplierDetailsList.GroupBy(x => x.Email).Select(y => y.First()).Where(x => !string.IsNullOrEmpty(x.Email) || !string.IsNullOrWhiteSpace(x.Email)).Distinct().ToList();
        //    this.SupplierDetailsListContact = this.SupplierDetailsList.GroupBy(x => x.ContactPerson).Select(y => y.First()).Where(x => !string.IsNullOrEmpty(x.ContactPerson) || !string.IsNullOrWhiteSpace(x.ContactPerson)).Distinct().ToList();

        //    this.SupplierDetailsListBalance = this.SupplierDetailsList.GroupBy(x => x.BalanceStr).Select(y => y.First()).Where(x => !string.IsNullOrEmpty(x.BalanceStr) || !string.IsNullOrWhiteSpace(x.BalanceStr)).Distinct().ToList();
        //    this.SupplierDetailsListType = this.SupplierDetailsList.GroupBy(x => x.Type).Select(y => y.First()).Where(x => !string.IsNullOrEmpty(x.Type) || !string.IsNullOrWhiteSpace(x.Type)).Distinct().ToList();
        //    this.SupplierDetailsListSaleman = this.SupplierDetailsList.GroupBy(x => x.Salesman).Select(y => y.First()).Where(x => !string.IsNullOrEmpty(x.Salesman) || !string.IsNullOrWhiteSpace(x.Salesman)).Distinct().ToList();
        //    this.SupplierDetailsListCreditLimitDays = this.SupplierDetailsList.GroupBy(x => x.CreditLimitDays).Select(y => y.First()).Where(y => y.CreditLimitDays != null).Distinct().ToList();
        //    this.SupplierDetailsListCreditLimitAmount = this.SupplierDetailsList.GroupBy(x => x.CreditLimitAmountStr).Select(y => y.First()).Where(x => !string.IsNullOrEmpty(x.CreditLimitAmountStr) || !string.IsNullOrWhiteSpace(x.CreditLimitAmountStr)).Distinct().ToList();
        //    this.SupplierDetailsListDisount = this.SupplierDetailsList.GroupBy(x => x.Discount).Select(y => y.First()).Where(y => y.Discount != null).Distinct().ToList();

        //    this.SupplierDetailsListBillLine1 = this.SupplierDetailsList.GroupBy(x => x.BillToLine1).Select(y => y.First()).Where(x => !string.IsNullOrEmpty(x.BillToLine1) || !string.IsNullOrWhiteSpace(x.BillToLine1)).Distinct().ToList();
        //    this.SupplierDetailsListBillLine2 = this.SupplierDetailsList.GroupBy(x => x.BillToLine2).Select(y => y.First()).Where(x => !string.IsNullOrEmpty(x.BillToLine2) || !string.IsNullOrWhiteSpace(x.BillToLine2)).Distinct().ToList();
        //    this.SupplierDetailsListBillCity = this.SupplierDetailsList.GroupBy(x => x.BillToCity).Select(y => y.First()).Where(x => !string.IsNullOrEmpty(x.BillToCity) || !string.IsNullOrWhiteSpace(x.BillToCity)).Distinct().ToList();
        //    this.SupplierDetailsListBillState = this.SupplierDetailsList.GroupBy(x => x.BillToState).Select(y => y.First()).Where(x => !string.IsNullOrEmpty(x.BillToState) || !string.IsNullOrWhiteSpace(x.BillToState)).Distinct().ToList();
        //    this.SupplierDetailsListBillCountry = this.SupplierDetailsList.GroupBy(x => x.BillToCountry).Select(y => y.First()).Where(x => !string.IsNullOrEmpty(x.BillToCountry) || !string.IsNullOrWhiteSpace(x.BillToCountry)).Distinct().ToList();
        //    this.SupplierDetailsListBillPinCode = this.SupplierDetailsList.GroupBy(x => x.BillToPostCode).Select(y => y.First()).Where(x => !string.IsNullOrEmpty(x.BillToPostCode) || !string.IsNullOrWhiteSpace(x.BillToPostCode)).Distinct().ToList();


        //    this.SupplierDetailsListShipLine1 = this.SupplierDetailsList.GroupBy(x => x.ShipToLine1).Select(y => y.First()).Where(x => !string.IsNullOrEmpty(x.ShipToLine1) || !string.IsNullOrWhiteSpace(x.ShipToLine1)).Distinct().ToList();
        //    this.SupplierDetailsListShipLine2 = this.SupplierDetailsList.GroupBy(x => x.ShipToLine2).Select(y => y.First()).Where(x => !string.IsNullOrEmpty(x.ShipToLine2) || !string.IsNullOrWhiteSpace(x.ShipToLine2)).Distinct().ToList();
        //    this.SupplierDetailsListShipCity = this.SupplierDetailsList.GroupBy(x => x.ShipToCity).Select(y => y.First()).Where(x => !string.IsNullOrEmpty(x.ShipToCity) || !string.IsNullOrWhiteSpace(x.ShipToCity)).Distinct().ToList();
        //    this.SupplierDetailsListShipState = this.SupplierDetailsList.GroupBy(x => x.ShipToState).Select(y => y.First()).Where(x => !string.IsNullOrEmpty(x.ShipToState) || !string.IsNullOrWhiteSpace(x.ShipToState)).Distinct().ToList();
        //    this.SupplierDetailsListShipCountry = this.SupplierDetailsList.GroupBy(x => x.ShipToCountry).Select(y => y.First()).Where(x => !string.IsNullOrEmpty(x.ShipToCountry) || !string.IsNullOrWhiteSpace(x.ShipToCountry)).Distinct().ToList();
        //    this.SupplierDetailsListShipPinCode = this.SupplierDetailsList.GroupBy(x => x.ShipToPostCode).Select(y => y.First()).Where(x => !string.IsNullOrEmpty(x.ShipToPostCode) || !string.IsNullOrWhiteSpace(x.ShipToPostCode)).Distinct().ToList();

        //    if (this.ShowAllTrue == false)
        //        this.ShowSelectedCount = this.SupplierDetailsList.Count();
        //    else
        //        this.ShowSelectedCount = 0;
            
        //}
        //void ShowSelected(object param)
        //{
        //    Search(null);
        //}
        void Search(object param)
        {
            
            if (Count != 0)
            {
                SearchValues = new List<SearchEntity>();
                if (this.ShowAllTrue == true)
                {
                    SearchEntity value = new SearchEntity();
                    value.FieldName = "ShowAll";
                    value.FieldValue = "true";
                    SearchValues.Add(value);

                }
                else
                {
                    SearchEntity value = new SearchEntity();
                    value.FieldName = "ShowAll";
                    value.FieldValue = "false";
                    SearchValues.Add(value);
                }

                if (this.ShowActive == true)
                {
                    SearchEntity value = new SearchEntity();
                    value.FieldName = "ActiveOrInactive";
                    value.FieldValue = "1";
                    SearchValues.Add(value);

                }
                else if (this.ShowInactive == true)
                {
                    SearchEntity value = new SearchEntity();
                    value.FieldName = "ActiveOrInactive";
                    value.FieldValue = "2";
                    SearchValues.Add(value);

                }
                else
                {

                    SearchEntity value = new SearchEntity();
                    value.FieldName = "ActiveOrInactive";
                    value.FieldValue = "0";
                    SearchValues.Add(value);
                }


                //this.PurchaseInvoiceList = this.PurchaseInvoiceListInternal;
                jsonSearch = JsonConvert.SerializeObject(SearchValues);
                this.JsonData = jsonSearch;

                ISuppliersDetailsListRepository cusRepository = new SuppliersDetailsListRepository();
                var results = cusRepository.SaveSearchJson(jsonSearch, Convert.ToInt32(ScreenId.SupplierDetailsList), "SuppliersDetailsList");
                if (Count != 0)
                {
                    this.SupplierDetailsList = cusRepository.GetSuppliersList(jsonSearch);

                }

                this.SupplierDetailsList = this.SupplierDetailsList;
                this.SupplierDetailsListCusName = this.SupplierDetailsList.GroupBy(x => x.Name).Select(g => g.First()).Where(x => !string.IsNullOrEmpty(x.Name) || !string.IsNullOrWhiteSpace(x.Name)).OrderBy(e => e.Name).ToList();
                this.SupplierDetailsListCompRegNo = this.SupplierDetailsList.GroupBy(x => x.CompanyRegNo).Select(y => y.First()).Where(x => !string.IsNullOrEmpty(x.CompanyRegNo) || !string.IsNullOrWhiteSpace(x.CompanyRegNo)).Distinct().OrderBy(e => e.CompanyRegNo).ToList();
                this.SupplierDetailsListGSTRegNo = this.SupplierDetailsList.GroupBy(x => x.GSTRegNo).Select(y => y.First()).Where(x => !string.IsNullOrEmpty(x.GSTRegNo) || !string.IsNullOrWhiteSpace(x.GSTRegNo)).Distinct().OrderBy(e => e.GSTRegNo).ToList();

                this.SupplierDetailsListTelephone = this.SupplierDetailsList.GroupBy(x => x.Telephone).Select(y => y.First()).Where(x => !string.IsNullOrEmpty(x.Telephone) || !string.IsNullOrWhiteSpace(x.Telephone)).Distinct().ToList();
                this.SupplierDetailsListFax = this.SupplierDetailsList.GroupBy(x => x.Fax).Select(y => y.First()).Where(x => !string.IsNullOrEmpty(x.Fax) || !string.IsNullOrWhiteSpace(x.Fax)).Distinct().ToList();
                this.SupplierDetailsListEmail = this.SupplierDetailsList.GroupBy(x => x.Email).Select(y => y.First()).Where(x => !string.IsNullOrEmpty(x.Email) || !string.IsNullOrWhiteSpace(x.Email)).Distinct().ToList();
                this.SupplierDetailsListContact = this.SupplierDetailsList.GroupBy(x => x.ContactPerson).Select(y => y.First()).Where(x => !string.IsNullOrEmpty(x.ContactPerson) || !string.IsNullOrWhiteSpace(x.ContactPerson)).Distinct().ToList();

                this.SupplierDetailsListBalance = this.SupplierDetailsList.GroupBy(x => x.BalanceStr).Select(y => y.First()).Where(x => !string.IsNullOrEmpty(x.BalanceStr) || !string.IsNullOrWhiteSpace(x.BalanceStr)).Distinct().ToList();
                this.SupplierDetailsListType = this.SupplierDetailsList.GroupBy(x => x.Type).Select(y => y.First()).Where(x => !string.IsNullOrEmpty(x.Type) || !string.IsNullOrWhiteSpace(x.Type)).Distinct().ToList();
                this.SupplierDetailsListSaleman = this.SupplierDetailsList.GroupBy(x => x.Salesman).Select(y => y.First()).Where(x => !string.IsNullOrEmpty(x.Salesman) || !string.IsNullOrWhiteSpace(x.Salesman)).Distinct().ToList();
                this.SupplierDetailsListCreditLimitDays = this.SupplierDetailsList.GroupBy(x => x.CreditLimitDays).Select(y => y.First()).Where(y => y.CreditLimitDays != null).Distinct().ToList();
                this.SupplierDetailsListCreditLimitAmount = this.SupplierDetailsList.GroupBy(x => x.CreditLimitAmountStr).Select(y => y.First()).Where(x => !string.IsNullOrEmpty(x.CreditLimitAmountStr) || !string.IsNullOrWhiteSpace(x.CreditLimitAmountStr)).Distinct().ToList();
                this.SupplierDetailsListDisount = this.SupplierDetailsList.GroupBy(x => x.Discount).Select(y => y.First()).Where(y => y.Discount != null).Distinct().ToList();

                this.SupplierDetailsListBillLine1 = this.SupplierDetailsList.GroupBy(x => x.BillToLine1).Select(y => y.First()).Where(x => !string.IsNullOrEmpty(x.BillToLine1) || !string.IsNullOrWhiteSpace(x.BillToLine1)).Distinct().ToList();
                this.SupplierDetailsListBillLine2 = this.SupplierDetailsList.GroupBy(x => x.BillToLine2).Select(y => y.First()).Where(x => !string.IsNullOrEmpty(x.BillToLine2) || !string.IsNullOrWhiteSpace(x.BillToLine2)).Distinct().ToList();
                this.SupplierDetailsListBillCity = this.SupplierDetailsList.GroupBy(x => x.BillToCity).Select(y => y.First()).Where(x => !string.IsNullOrEmpty(x.BillToCity) || !string.IsNullOrWhiteSpace(x.BillToCity)).Distinct().ToList();
                this.SupplierDetailsListBillState = this.SupplierDetailsList.GroupBy(x => x.BillToState).Select(y => y.First()).Where(x => !string.IsNullOrEmpty(x.BillToState) || !string.IsNullOrWhiteSpace(x.BillToState)).Distinct().ToList();
                this.SupplierDetailsListBillCountry = this.SupplierDetailsList.GroupBy(x => x.BillToCountry).Select(y => y.First()).Where(x => !string.IsNullOrEmpty(x.BillToCountry) || !string.IsNullOrWhiteSpace(x.BillToCountry)).Distinct().ToList();
                this.SupplierDetailsListBillPinCode = this.SupplierDetailsList.GroupBy(x => x.BillToPostCode).Select(y => y.First()).Where(x => !string.IsNullOrEmpty(x.BillToPostCode) || !string.IsNullOrWhiteSpace(x.BillToPostCode)).Distinct().ToList();


                this.SupplierDetailsListShipLine1 = this.SupplierDetailsList.GroupBy(x => x.ShipToLine1).Select(y => y.First()).Where(x => !string.IsNullOrEmpty(x.ShipToLine1) || !string.IsNullOrWhiteSpace(x.ShipToLine1)).Distinct().ToList();
                this.SupplierDetailsListShipLine2 = this.SupplierDetailsList.GroupBy(x => x.ShipToLine2).Select(y => y.First()).Where(x => !string.IsNullOrEmpty(x.ShipToLine2) || !string.IsNullOrWhiteSpace(x.ShipToLine2)).Distinct().ToList();
                this.SupplierDetailsListShipCity = this.SupplierDetailsList.GroupBy(x => x.ShipToCity).Select(y => y.First()).Where(x => !string.IsNullOrEmpty(x.ShipToCity) || !string.IsNullOrWhiteSpace(x.ShipToCity)).Distinct().ToList();
                this.SupplierDetailsListShipState = this.SupplierDetailsList.GroupBy(x => x.ShipToState).Select(y => y.First()).Where(x => !string.IsNullOrEmpty(x.ShipToState) || !string.IsNullOrWhiteSpace(x.ShipToState)).Distinct().ToList();
                this.SupplierDetailsListShipCountry = this.SupplierDetailsList.GroupBy(x => x.ShipToCountry).Select(y => y.First()).Where(x => !string.IsNullOrEmpty(x.ShipToCountry) || !string.IsNullOrWhiteSpace(x.ShipToCountry)).Distinct().ToList();
                this.SupplierDetailsListShipPinCode = this.SupplierDetailsList.GroupBy(x => x.ShipToPostCode).Select(y => y.First()).Where(x => !string.IsNullOrEmpty(x.ShipToPostCode) || !string.IsNullOrWhiteSpace(x.ShipToPostCode)).Distinct().ToList();

                if (this.ShowAllTrue == true)
                {
                    this.ShowSelectedCount = 0;
                    this.ShowAllCount = this.SupplierDetailsList.Count();
                }
                else
                {
                    this.ShowSelectedCount = this.SupplierDetailsList.Count();
                }
                DefaultList = this.SupplierDetailsList;

            }
           
        }
        #endregion

        #region BackgroundWorked
        private void LoadSupplierBackground()
        {
            Mouse.OverrideCursor = Cursors.Wait;

            //run time-consuming operations on a background thread
            BackgroundWorker worker = new BackgroundWorker();

            //Set the WorkerReportsProgress property to true if you want the BackgroundWorker to support progress updates.
            //When this property is true, user code can call the ReportProgress method to raise the ProgressChanged event.
            worker.WorkerReportsProgress = true;


            //This event is raised when you call the RunWorkerAsync method. This is where you start the time-consuming operation.
            worker.DoWork += new DoWorkEventHandler(this.LoadSupplierBackground);

            // This event is raised when you call the ReportProgress method.
            worker.ProgressChanged += new ProgressChangedEventHandler(this.LoadSupplierBackgroundProgress);

            //The RunWorkerCompleted event is raised when the background worker has completed. 
            //Depending on whether the background operation completed successfully, encountered an error,
            //or was canceled, update the user interface accordingly
            worker.RunWorkerCompleted += new RunWorkerCompletedEventHandler(this.LoadSupplierBackgroundComplete);

            //Starts running a background operation
            worker.RunWorkerAsync();
        }
        List<SuppliersDetailsListEntity> DefaultList = new List<SuppliersDetailsListEntity>();
        List<SuppliersDetailsListEntity> FullPQList = new List<SuppliersDetailsListEntity>();
        private void LoadSupplierBackground(object sender, DoWorkEventArgs e)
        {

            int minHeight = 300;
            int headerRows = 260;//180+40+30+10;
            var height = System.Windows.SystemParameters.PrimaryScreenHeight - headerRows - 41;
            bool validHeight = int.TryParse(height.ToString(), out minHeight);
            this.GridHeight = minHeight;
            RefreshData();
        }

        private void RefreshData()
        {
            ISuppliersDetailsListRepository custRepository = new SuppliersDetailsListRepository();
            // this.DateFormat = custRepository.GetDateFormat();
            
            GetOptionsandTaxValues();
            this.JsonData = custRepository.GetLastSelectionData(Convert.ToInt32(ScreenId.SupplierDetailsList));
            this.SupplierDetailsList = custRepository.GetSuppliersList(this.JsonData);
            this.ShowAllCount = custRepository.GetSuppliersList(JsonData).Count();
            this.statusCount = custRepository.GetStatusCount(Convert.ToInt32(ScreenId.SupplierDetailsList));
            foreach (var item in statusCount)
            {
                this.ShowActiveCount = Convert.ToInt32(item.Active);
                this.ShowInactiveCount = Convert.ToInt32(item.InActive);
                this.ShowBothCount = Convert.ToInt32(item.Both);
            }
            this.ShowSelectedCount = this.SupplierDetailsList.Count();
            this.SupplierDetailsListCusName = this.SupplierDetailsList.GroupBy(x => x.Name).Select(g => g.First()).Where(x => !string.IsNullOrEmpty(x.Name) || !string.IsNullOrWhiteSpace(x.Name)).OrderBy(e => e.Name).ToList();
            this.SupplierDetailsListCompRegNo = this.SupplierDetailsList.GroupBy(x => x.CompanyRegNo).Select(y => y.First()).Where(x => !string.IsNullOrEmpty(x.CompanyRegNo) || !string.IsNullOrWhiteSpace(x.CompanyRegNo)).Distinct().OrderBy(e => e.CompanyRegNo).ToList();
            this.SupplierDetailsListGSTRegNo = this.SupplierDetailsList.GroupBy(x => x.GSTRegNo).Select(y => y.First()).Where(x => !string.IsNullOrEmpty(x.GSTRegNo) || !string.IsNullOrWhiteSpace(x.GSTRegNo)).Distinct().OrderBy(e => e.GSTRegNo).ToList();

            this.SupplierDetailsListTelephone = this.SupplierDetailsList.GroupBy(x => x.Telephone).Select(y => y.First()).Where(x => !string.IsNullOrEmpty(x.Telephone) || !string.IsNullOrWhiteSpace(x.Telephone)).Distinct().ToList();
            this.SupplierDetailsListFax = this.SupplierDetailsList.GroupBy(x => x.Fax).Select(y => y.First()).Where(x => !string.IsNullOrEmpty(x.Fax) || !string.IsNullOrWhiteSpace(x.Fax)).Distinct().ToList();
            this.SupplierDetailsListEmail = this.SupplierDetailsList.GroupBy(x => x.Email).Select(y => y.First()).Where(x => !string.IsNullOrEmpty(x.Email) || !string.IsNullOrWhiteSpace(x.Email)).Distinct().ToList();
            this.SupplierDetailsListContact = this.SupplierDetailsList.GroupBy(x => x.ContactPerson).Select(y => y.First()).Where(x => !string.IsNullOrEmpty(x.ContactPerson) || !string.IsNullOrWhiteSpace(x.ContactPerson)).Distinct().ToList();

            this.SupplierDetailsListBalance = this.SupplierDetailsList.GroupBy(x => x.BalanceStr).Select(y => y.First()).Where(x => !string.IsNullOrEmpty(x.BalanceStr) || !string.IsNullOrWhiteSpace(x.BalanceStr)).Distinct().ToList();
            this.SupplierDetailsListType = this.SupplierDetailsList.GroupBy(x => x.Type).Select(y => y.First()).Where(x => !string.IsNullOrEmpty(x.Type) || !string.IsNullOrWhiteSpace(x.Type)).Distinct().ToList();
            this.SupplierDetailsListSaleman = this.SupplierDetailsList.GroupBy(x => x.Salesman).Select(y => y.First()).Where(x => !string.IsNullOrEmpty(x.Salesman) || !string.IsNullOrWhiteSpace(x.Salesman)).Distinct().ToList();
            this.SupplierDetailsListCreditLimitDays = this.SupplierDetailsList.GroupBy(x => x.CreditLimitDays).Select(y => y.First()).Where(y => y.CreditLimitDays != null).Distinct().ToList();
            this.SupplierDetailsListCreditLimitAmount = this.SupplierDetailsList.GroupBy(x => x.CreditLimitAmountStr).Select(y => y.First()).Where(x => !string.IsNullOrEmpty(x.CreditLimitAmountStr) || !string.IsNullOrWhiteSpace(x.CreditLimitAmountStr)).Distinct().ToList();
            this.SupplierDetailsListDisount = this.SupplierDetailsList.GroupBy(x => x.Discount).Select(y => y.First()).Where(y => y.Discount != null).Distinct().ToList();

            this.SupplierDetailsListBillLine1 = this.SupplierDetailsList.GroupBy(x => x.BillToLine1).Select(y => y.First()).Where(x => !string.IsNullOrEmpty(x.BillToLine1) || !string.IsNullOrWhiteSpace(x.BillToLine1)).Distinct().ToList();
            this.SupplierDetailsListBillLine2 = this.SupplierDetailsList.GroupBy(x => x.BillToLine2).Select(y => y.First()).Where(x => !string.IsNullOrEmpty(x.BillToLine2) || !string.IsNullOrWhiteSpace(x.BillToLine2)).Distinct().ToList();
            this.SupplierDetailsListBillCity = this.SupplierDetailsList.GroupBy(x => x.BillToCity).Select(y => y.First()).Where(x => !string.IsNullOrEmpty(x.BillToCity) || !string.IsNullOrWhiteSpace(x.BillToCity)).Distinct().ToList();
            this.SupplierDetailsListBillState = this.SupplierDetailsList.GroupBy(x => x.BillToState).Select(y => y.First()).Where(x => !string.IsNullOrEmpty(x.BillToState) || !string.IsNullOrWhiteSpace(x.BillToState)).Distinct().ToList();
            this.SupplierDetailsListBillCountry = this.SupplierDetailsList.GroupBy(x => x.BillToCountry).Select(y => y.First()).Where(x => !string.IsNullOrEmpty(x.BillToCountry) || !string.IsNullOrWhiteSpace(x.BillToCountry)).Distinct().ToList();
            this.SupplierDetailsListBillPinCode = this.SupplierDetailsList.GroupBy(x => x.BillToPostCode).Select(y => y.First()).Where(x => !string.IsNullOrEmpty(x.BillToPostCode) || !string.IsNullOrWhiteSpace(x.BillToPostCode)).Distinct().ToList();


            this.SupplierDetailsListShipLine1 = this.SupplierDetailsList.GroupBy(x => x.ShipToLine1).Select(y => y.First()).Where(x => !string.IsNullOrEmpty(x.ShipToLine1) || !string.IsNullOrWhiteSpace(x.ShipToLine1)).Distinct().ToList();
            this.SupplierDetailsListShipLine2 = this.SupplierDetailsList.GroupBy(x => x.ShipToLine2).Select(y => y.First()).Where(x => !string.IsNullOrEmpty(x.ShipToLine2) || !string.IsNullOrWhiteSpace(x.ShipToLine2)).Distinct().ToList();
            this.SupplierDetailsListShipCity = this.SupplierDetailsList.GroupBy(x => x.ShipToCity).Select(y => y.First()).Where(x => !string.IsNullOrEmpty(x.ShipToCity) || !string.IsNullOrWhiteSpace(x.ShipToCity)).Distinct().ToList();
            this.SupplierDetailsListShipState = this.SupplierDetailsList.GroupBy(x => x.ShipToState).Select(y => y.First()).Where(x => !string.IsNullOrEmpty(x.ShipToState) || !string.IsNullOrWhiteSpace(x.ShipToState)).Distinct().ToList();
            this.SupplierDetailsListShipCountry = this.SupplierDetailsList.GroupBy(x => x.ShipToCountry).Select(y => y.First()).Where(x => !string.IsNullOrEmpty(x.ShipToCountry) || !string.IsNullOrWhiteSpace(x.ShipToCountry)).Distinct().ToList();
            this.SupplierDetailsListShipPinCode = this.SupplierDetailsList.GroupBy(x => x.ShipToPostCode).Select(y => y.First()).Where(x => !string.IsNullOrEmpty(x.ShipToPostCode) || !string.IsNullOrWhiteSpace(x.ShipToPostCode)).Distinct().ToList();

            DefaultList = this.SupplierDetailsList;
            FullPQList = this.SupplierDetailsList;
            this.ShowAllCount = this.SupplierDetailsList.Count();
            SetDefaultSearchSelection(this.JsonData);
            //var Updateddate = this.SupplierDetailsListCusName.Max(x => x.CreatedDate);
            //string date = this.DateFormat as string;
            //this.LastUpdateDate = Convert.ToDateTime(Updateddate).ToString(date);

        }
        void GetOptionsandTaxValues()
        {
            OptionsEntity oData = new OptionsEntity();
            ISuppliersDetailsListRepository cdRepository = new SuppliersDetailsListRepository();
            oData = cdRepository.GetOptionSettings();
            if (oData != null)
            {
                this.CurrencyName = oData.CurrencyCode;     //there is no currency name field in database         
                this.CurrencyCode = oData.CurrencyCode;
                this.CurrencyFormat = oData.NumberFormat;
                this.DateFormat = oData.DateFormat;
                this.DecimalPlaces = oData.DecimalPlaces;

            }
            else
            {
                this.CurrencyName = "USD";
                this.CurrencyCode = "USD";
                this.CurrencyFormat = "en-US";
                this.DateFormat = "dd/MM/yyyy";
            }

            TaxModel objDefaultTax = new TaxModel();
            objDefaultTax = cdRepository.GetDefaultTaxes();
            if (objDefaultTax != null)
            {
                this.TaxName = objDefaultTax.TaxName;
            }
            else
            {
                this.TaxName = "GST";
            }
        }


        public void SetDefaultSearchSelection(string jsondata)
        {
            if (jsondata != null && jsondata != "[]")
            {
                var objResponse1 = JsonConvert.DeserializeObject<List<SearchEntity>>(jsondata);
                foreach (var item in objResponse1)
                {
                    switch (item.FieldName)
                    {
                        case "ActiveOrInactive":
                            if (item.FieldValue == "1")
                            {
                                this.ShowBoth = false;
                                this.ShowActive = true;
                                this.ShowInactive = false;
                                this.ShowAllTrue = false;
                                this.ShowSelectedTrue = true;
                            }
                            else if (item.FieldValue == "2")
                            {
                                this.ShowBoth = false;
                                this.ShowActive = false;
                                this.ShowInactive = true;
                                this.ShowAllTrue = false;
                                this.ShowSelectedTrue = true;
                            }
                            else
                            {
                                this.ShowBoth = false;
                                this.ShowActive = true;
                                this.ShowInactive = false;
                                this.ShowAllTrue = true;
                                this.ShowSelectedTrue = false;
                            }
                            break;
                    }
                }
                Search(null);
            }
            else
            {
                this.ShowAllTrue = true;
                this.ShowSelectedTrue = false;
                this.ShowBoth = false;
                this.ShowActive = true;
                this.ShowInactive = false;
            }
        }
        public void LoadSearchResult(string Suppliername)
        {
            ISuppliersDetailsListRepository cusRepository = new SuppliersDetailsListRepository();
            this.ShowAllCount = cusRepository.GetSuppliersList(JsonData).Count();
            this.SupplierDetailsList = cusRepository.GetSuppliersList(JsonData
                ).Where(x => x.Name == Suppliername).ToList();
        }
        protected override void OnPropertyChanged(string name)
        {
            var eventHandler = this.PropertyChanged;
            if (eventHandler != null)
            {
                eventHandler(this, new PropertyChangedEventArgs(name));
            }
            switch (name)
            {
                case "SelectedName":
                    GetData(this.SelectedName, "SelectedName");
                    break;
                case "SelectedCompRegNo":
                    GetData(this.SelectedCompRegNo, "SelectedCompRegNo");
                    break;
                case "SelectedGSTRegNo":
                    GetData(this.SelectedGSTRegNo, "SelectedGSTRegNo");
                    break;
                case "SelectedTelephone":
                    GetData(this.SelectedTelephone, "SelectedTelephone");
                    break;
                case "SelectedEmail":
                    GetData(this.SelectedEmail, "SelectedEmail");
                    break;
                case "SelectedFax":
                    GetData(this.SelectedFax, "SelectedFax");
                    break;
                case "SelectedContact":
                    GetData(this.SelectedContact, "SelectedContact");
                    break;
                case "SelectedBalance":
                    GetData(this.SelectedBalance, "SelectedBalance");
                    break;
                case "SelectedType":
                    GetData(this.SelectedType, "SelectedType");
                    break;
                case "SelectedSalesman":
                    GetData(this.SelectedSalesman, "SelectedSalesman");
                    break;
                case "SelectedCreditLimitDays":
                    GetData(this.SelectedCreditLimitDays, "SelectedCreditLimitDays");
                    break;
                case "SelectedCreditLimitAmount":
                    GetData(this.SelectedCreditLimitAmount, "SelectedCreditLimitAmount");
                    break;
                case "SelectedDiscount":
                    GetData(this.SelectedDiscount, "SelectedDiscount");
                    break;
                case "SelectedBillToLine1":
                    GetData(this.SelectedBillToLine1, "SelectedBillToLine1");
                    break;
                case "SelectedBillToLine2":
                    GetData(this.SelectedBillToLine2, "SelectedBillToLine2");
                    break;
                case "SelectedBillToCity":
                    GetData(this.SelectedBillToCity, "SelectedBillToCity");
                    break;
                case "SelectedBillToState":
                    GetData(this.SelectedBillToState, "SelectedBillToState");
                    break;
                case "SelectedBillToCountry":
                    GetData(this.SelectedBillToCountry, "SelectedBillToCountry");
                    break;
                case "SelectedBillToPinCode":
                    GetData(this.SelectedBillToPinCode, "SelectedBillToPinCode");
                    break;
                case "SelectedShipToLine1":
                    GetData(this.SelectedShipToLine1, "SelectedShipToLine1");
                    break;
                case "SelectedShipToLine2":
                    GetData(this.SelectedShipToLine2, "SelectedShipToLine2");
                    break;
                case "SelectedShipToCity":
                    GetData(this.SelectedShipToCity, "SelectedShipToCity");
                    break;
                case "SelectedShipToState":
                    GetData(this.SelectedShipToState, "SelectedShipToState");
                    break;
                case "SelectedShipToCountry":
                    GetData(this.SelectedShipToCountry, "SelectedShipToCountry");
                    break;
                case "SelectedShipToPinCode":
                    GetData(this.SelectedShipToPinCode, "SelectedShipToPinCode");
                    break;

                    //case "ShowActive":
                    //    SetData(this.ShowActive.ToString(), "ShowActive");
                    //    break;
                    //case "ShowInactive":
                    //    SetData(this.ShowInactive.ToString(), "ShowInactive");
                    //    break;
                    //case "ShowBoth":
                    //    SetData(this.ShowBoth.ToString(), "ShowBoth");
                    //    break;

            }

            base.OnPropertyChanged(name);
        }

        public void SetData(string SearchFilter, string parameter)
        {
            if (parameter == "ShowActive" && SearchFilter != string.Empty && SearchFilter != null)
            {
                this.ShowSelectedTrue = true;
                this.ShowAllTrue = false;
                //  this.ShowActive = true;
                //this.ShowInactive = false;
                //this.ShowBoth = false;
            }
            if (parameter == "ShowInactive" && SearchFilter != string.Empty && SearchFilter != null)
            {
                this.ShowSelectedTrue = true;
                this.ShowAllTrue = false;
                //this.ShowActive = false;
                ////this.ShowInactive = true;
                //this.ShowBoth = false;

            }
            if (parameter == "ShowBoth" && SearchFilter != string.Empty && SearchFilter != null)
            {
                this.ShowSelectedTrue = false;
                this.ShowAllTrue = true;
                //this.ShowActive = false;
                //this.ShowInactive = false;
                //this.ShowBoth = true;
            }

            Search(null);

        }

        public void SearchPQList()
        {

        }

        public void GetData(string SearchFilter, string parameter)
        {
            //IPurchaseInvoiceListRepository purchaseRepository = new PurchaseInvoiceListRepository();
            //var result = purchaseRepository.GetAllPurInvoice().ToList();
            if (SearchFilter != null || SearchFilter == string.Empty)
            {
                if (parameter == "SelectedName")
                {
                    this.ShowAllCount = this.ShowAllCount;

                    if (this.ShowAllTrue == true)
                    {
                        this.SupplierDetailsList = FullPQList.Where(x => (x.Name == SearchFilter)).ToList();
                    }
                    else
                    {
                        this.SupplierDetailsList = DefaultList.Where(x => (x.Name == SearchFilter)).ToList();
                    }

                    //DefaultList = DefaultList.Where(x => x.SupplierName == SearchFilter).ToList();
                }

                if (parameter == "SelectedCompRegNo")
                {
                    this.ShowAllCount = this.ShowAllCount;
                    //var searchname = SearchFilter.Split('#')[0];
                    if (this.ShowAllTrue == true)
                    {
                        this.SupplierDetailsList = FullPQList.Where(x => x.CompanyRegNo == SearchFilter).ToList();
                    }
                    else
                    {
                        this.SupplierDetailsList = DefaultList.Where(x => x.CompanyRegNo == SearchFilter).ToList();
                    }

                    //DefaultList = DefaultList.Where(x => x.SupplierName == SearchFilter).ToList();
                }
                if (parameter == "SelectedGSTRegNo")
                {
                    this.ShowAllCount = this.ShowAllCount;
                    //var searchname = SearchFilter.Split('#')[0];
                    if (this.ShowAllTrue == true)
                    {
                        this.SupplierDetailsList = FullPQList.Where(x => x.GSTRegNo == SearchFilter).ToList();
                    }
                    else
                    {
                        this.SupplierDetailsList = DefaultList.Where(x => x.GSTRegNo == SearchFilter).ToList();
                    }
                }
                if (parameter == "SelectedTelephone")
                {
                    this.ShowAllCount = this.ShowAllCount;
                    //var searchname = SearchFilter.Split('#')[0];
                    if (this.ShowAllTrue == true)
                    {
                        this.SupplierDetailsList = FullPQList.Where(x => x.Telephone == SearchFilter).ToList();
                    }
                    else
                    {
                        this.SupplierDetailsList = DefaultList.Where(x => x.Telephone == SearchFilter).ToList();
                    }

                    //DefaultList = DefaultList.Where(x => x.SupplierName == SearchFilter).ToList();
                }
                if (parameter == "SelectedEmail")
                {
                    this.ShowAllCount = this.ShowAllCount;
                    //var searchname = SearchFilter.Split('#')[0];
                    if (this.ShowAllTrue == true)
                    {
                        this.SupplierDetailsList = FullPQList.Where(x => x.Email == SearchFilter).ToList();
                    }
                    else
                    {
                        this.SupplierDetailsList = DefaultList.Where(x => x.Email == SearchFilter).ToList();
                    }

                    //DefaultList = DefaultList.Where(x => x.SupplierName == SearchFilter).ToList();
                }

                if (parameter == "SelectedFax")
                {
                    this.ShowAllCount = this.ShowAllCount;
                    //var searchname = SearchFilter.Split('#')[0];
                    if (this.ShowAllTrue == true)
                    {
                        this.SupplierDetailsList = FullPQList.Where(x => x.Fax == SearchFilter).ToList();
                    }
                    else
                    {
                        this.SupplierDetailsList = DefaultList.Where(x => x.Fax == SearchFilter).ToList();
                    }
                }
                if (parameter == "SelectedContact")
                {
                    this.ShowAllCount = this.ShowAllCount;
                    //var searchname = SearchFilter.Split('#')[0];
                    if (this.ShowAllTrue == true)
                    {
                        this.SupplierDetailsList = FullPQList.Where(x => x.ContactPerson == SearchFilter).ToList();
                    }
                    else
                    {
                        this.SupplierDetailsList = DefaultList.Where(x => x.ContactPerson == SearchFilter).ToList();
                    }
                }

                if (parameter == "SelectedBalance")
                {
                    this.ShowAllCount = this.ShowAllCount;
                    //var searchname = SearchFilter.Split('#')[0];
                    if (this.ShowAllTrue == true)
                    {
                        this.SupplierDetailsList = FullPQList.Where(x => x.BalanceStr == SearchFilter).ToList();
                    }
                    else
                    {
                        this.SupplierDetailsList = DefaultList.Where(x => x.BalanceStr == SearchFilter).ToList();
                    }
                }
                if (parameter == "SelectedType")
                {
                    this.ShowAllCount = this.ShowAllCount;
                    //var searchname = SearchFilter.Split('#')[0];
                    if (this.ShowAllTrue == true)
                    {
                        this.SupplierDetailsList = FullPQList.Where(x => x.Type == SearchFilter).ToList();
                    }
                    else
                    {
                        this.SupplierDetailsList = DefaultList.Where(x => x.Type == SearchFilter).ToList();
                    }
                }
                if (parameter == "SelectedSalesman")
                {
                    this.ShowAllCount = this.ShowAllCount;
                    //var searchname = SearchFilter.Split('#')[0];
                    if (this.ShowAllTrue == true)
                    {
                        this.SupplierDetailsList = FullPQList.Where(x => x.Salesman == SearchFilter).ToList();
                    }
                    else
                    {
                        this.SupplierDetailsList = DefaultList.Where(x => x.Salesman == SearchFilter).ToList();
                    }
                }
                if (parameter == "SelectedCreditLimitDays")
                {
                    this.ShowAllCount = this.ShowAllCount;
                    //var searchname = SearchFilter.Split('#')[0];
                    if (this.ShowAllTrue == true)
                    {
                        this.SupplierDetailsList = FullPQList.Where(x => x.CreditLimitDays == Convert.ToInt32(SearchFilter)).ToList();
                    }
                    else
                    {
                        this.SupplierDetailsList = DefaultList.Where(x => x.CreditLimitDays == Convert.ToInt32(SearchFilter)).ToList();
                    }
                }
                if (parameter == "SelectedCreditLimitAmount")
                {
                    this.ShowAllCount = this.ShowAllCount;
                    //var searchname = SearchFilter.Split('#')[0];
                    if (this.ShowAllTrue == true)
                    {
                        this.SupplierDetailsList = FullPQList.Where(x => x.CreditLimitAmountStr == SearchFilter).ToList();
                    }
                    else
                    {
                        this.SupplierDetailsList = DefaultList.Where(x => x.CreditLimitAmountStr == SearchFilter).ToList();
                    }
                }
                if (parameter == "SelectedDiscount")
                {
                    this.ShowAllCount = this.ShowAllCount;
                    //var searchname = SearchFilter.Split('#')[0];
                    if (this.ShowAllTrue == true)
                    {
                        this.SupplierDetailsList = FullPQList.Where(x => x.Discount == Convert.ToInt32(SearchFilter)).ToList();
                    }
                    else
                    {
                        this.SupplierDetailsList = DefaultList.Where(x => x.Discount == Convert.ToInt32(SearchFilter)).ToList();
                    }
                }
                if (parameter == "SelectedBillToLine1")
                {
                    this.ShowAllCount = this.ShowAllCount;
                    //var searchname = SearchFilter.Split('#')[0];
                    if (this.ShowAllTrue == true)
                    {
                        this.SupplierDetailsList = FullPQList.Where(x => x.BillToLine1 == SearchFilter).ToList();
                    }
                    else
                    {
                        this.SupplierDetailsList = DefaultList.Where(x => x.BillToLine1 == SearchFilter).ToList();
                    }
                }
                if (parameter == "SelectedBillToLine2")
                {
                    this.ShowAllCount = this.ShowAllCount;
                    //var searchname = SearchFilter.Split('#')[0];
                    if (this.ShowAllTrue == true)
                    {
                        this.SupplierDetailsList = FullPQList.Where(x => x.BillToLine2 == SearchFilter).ToList();
                    }
                    else
                    {
                        this.SupplierDetailsList = DefaultList.Where(x => x.BillToLine2 == SearchFilter).ToList();
                    }
                }
                if (parameter == "SelectedBillToCity")
                {
                    this.ShowAllCount = this.ShowAllCount;
                    //var searchname = SearchFilter.Split('#')[0];
                    if (this.ShowAllTrue == true)
                    {
                        this.SupplierDetailsList = FullPQList.Where(x => x.BillToCity == SearchFilter).ToList();
                    }
                    else
                    {
                        this.SupplierDetailsList = DefaultList.Where(x => x.BillToCity == SearchFilter).ToList();
                    }
                }
                if (parameter == "SelectedBillToState")
                {
                    this.ShowAllCount = this.ShowAllCount;
                    //var searchname = SearchFilter.Split('#')[0];
                    if (this.ShowAllTrue == true)
                    {
                        this.SupplierDetailsList = FullPQList.Where(x => x.BillToState == SearchFilter).ToList();
                    }
                    else
                    {
                        this.SupplierDetailsList = DefaultList.Where(x => x.BillToState == SearchFilter).ToList();
                    }
                }
                if (parameter == "SelectedBillToCountry")
                {
                    this.ShowAllCount = this.ShowAllCount;
                    //var searchname = SearchFilter.Split('#')[0];
                    if (this.ShowAllTrue == true)
                    {
                        this.SupplierDetailsList = FullPQList.Where(x => x.BillToCountry == SearchFilter).ToList();
                    }
                    else
                    {
                        this.SupplierDetailsList = DefaultList.Where(x => x.BillToCountry == SearchFilter).ToList();
                    }
                }
                if (parameter == "SelectedBillToPinCode")
                {
                    this.ShowAllCount = this.ShowAllCount;
                    //var searchname = SearchFilter.Split('#')[0];
                    if (this.ShowAllTrue == true)
                    {
                        this.SupplierDetailsList = FullPQList.Where(x => x.BillToPostCode == SearchFilter).ToList();
                    }
                    else
                    {
                        this.SupplierDetailsList = DefaultList.Where(x => x.BillToPostCode == SearchFilter).ToList();
                    }
                }
                if (parameter == "SelectedShipToLine1")
                {
                    this.ShowAllCount = this.ShowAllCount;
                    //var searchname = SearchFilter.Split('#')[0];
                    if (this.ShowAllTrue == true)
                    {
                        this.SupplierDetailsList = FullPQList.Where(x => x.ShipToLine1 == SearchFilter).ToList();
                    }
                    else
                    {
                        this.SupplierDetailsList = DefaultList.Where(x => x.ShipToLine1 == SearchFilter).ToList();
                    }
                }
                if (parameter == "SelectedShipToLine2")
                {
                    this.ShowAllCount = this.ShowAllCount;
                    //var searchname = SearchFilter.Split('#')[0];
                    if (this.ShowAllTrue == true)
                    {
                        this.SupplierDetailsList = FullPQList.Where(x => x.ShipToLine2 == SearchFilter).ToList();
                    }
                    else
                    {
                        this.SupplierDetailsList = DefaultList.Where(x => x.ShipToLine2 == SearchFilter).ToList();
                    }
                }
                if (parameter == "SelectedShipToCity")
                {
                    this.ShowAllCount = this.ShowAllCount;
                    //var searchname = SearchFilter.Split('#')[0];
                    if (this.ShowAllTrue == true)
                    {
                        this.SupplierDetailsList = FullPQList.Where(x => x.ShipToCity == SearchFilter).ToList();
                    }
                    else
                    {
                        this.SupplierDetailsList = DefaultList.Where(x => x.ShipToCity == SearchFilter).ToList();
                    }
                }
                if (parameter == "SelectedShipToState")
                {
                    this.ShowAllCount = this.ShowAllCount;
                    //var searchname = SearchFilter.Split('#')[0];
                    if (this.ShowAllTrue == true)
                    {
                        this.SupplierDetailsList = FullPQList.Where(x => x.ShipToState == SearchFilter).ToList();
                    }
                    else
                    {
                        this.SupplierDetailsList = DefaultList.Where(x => x.ShipToState == SearchFilter).ToList();
                    }
                }
                if (parameter == "SelectedShipToCountry")
                {
                    this.ShowAllCount = this.ShowAllCount;
                    //var searchname = SearchFilter.Split('#')[0];
                    if (this.ShowAllTrue == true)
                    {
                        this.SupplierDetailsList = FullPQList.Where(x => x.ShipToCountry == SearchFilter).ToList();
                    }
                    else
                    {
                        this.SupplierDetailsList = DefaultList.Where(x => x.ShipToCountry == SearchFilter).ToList();
                    }
                }
                if (parameter == "SelectedShipToPinCode")
                {
                    this.ShowAllCount = this.ShowAllCount;
                    //var searchname = SearchFilter.Split('#')[0];
                    if (this.ShowAllTrue == true)
                    {
                        this.SupplierDetailsList = FullPQList.Where(x => x.ShipToPostCode == SearchFilter).ToList();
                    }
                    else
                    {
                        this.SupplierDetailsList = DefaultList.Where(x => x.ShipToPostCode == SearchFilter).ToList();
                    }
                }
            }
            else
            {
                if (this.ShowAllTrue == true)
                {
                    this.SupplierDetailsList = FullPQList.ToList();
                }
                else
                {
                    this.SupplierDetailsList = DefaultList.ToList();
                }
            }

        }
        /// <summary>
        ///  Occurs when System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32) is called.
        /// </summary>
        /// <param name="sender">The sender.</param>
        /// <param name="e">The <see cref="ProgressChangedEventArgs"/> instance containing the event data.</param>
        private void LoadSupplierBackgroundProgress(object sender, ProgressChangedEventArgs e)
        {

        }

        ///// <summary>
        /////  Occurs when the background operation has completed, has been canceled, or has raised an exception.
        ///// </summary>
        ///// <param name="sender">The sender.</param>
        ///// <param name="e">The <see cref="RunWorkerCompletedEventArgs"/> instance containing the event data.</param>
        private void LoadSupplierBackgroundComplete(object sender, RunWorkerCompletedEventArgs e)
        {

            Mouse.OverrideCursor = null;
            Count = 1;
        }


        #endregion
    }
}
