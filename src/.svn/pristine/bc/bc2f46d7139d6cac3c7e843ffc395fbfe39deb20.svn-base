using Microsoft.Practices.Prism.Commands;
using Microsoft.Practices.Prism.Events;
using Microsoft.Practices.Prism.Regions;
using Microsoft.Practices.ServiceLocation;
using SDN.Common;
using SDN.Navigation.View;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Windows.Input;

namespace SDN.Navigation.ViewModel
{
    public class OpenCompanyFileViewModel : ViewModelBase
    {
        #region private properties
        private readonly IRegionManager regionManager;
        private bool isOpenCompanyFileTrue;
        private bool isNewCompanyFileTrue;
        private bool isExitTrue;

        /// <summary>
        /// The event aggregator
        /// </summary>
        private readonly IEventAggregator eventAggregator;

        internal void RaisePropertyChanged(string prop)
        {
            if (PropertyChanged != null) { PropertyChanged(this, new PropertyChangedEventArgs(prop)); }
        }
        public event PropertyChangedEventHandler PropertyChanged;
        #endregion
        #region public properties
        public bool IsOpenCompanyFileTrue
        {
            get
            {
                return this.isOpenCompanyFileTrue;
            }
            set
            {
                this.isOpenCompanyFileTrue = value;
                this.OnPropertyChanged("IsOpenCompanyFileTrue");
            }
        }
        public bool IsNewCompanyFileTrue
        {
            get
            {
                return this.isNewCompanyFileTrue;
            }
            set
            {
                this.isNewCompanyFileTrue = value;
                this.OnPropertyChanged("IsNewCompanyFileTrue");
            }
        }
        public bool IsExitTrue
        {
            get
            {
                return this.isExitTrue;
            }
            set
            {
                this.isExitTrue = value;
                this.OnPropertyChanged("sExitTrue");
            }
        }
        #endregion
        #region Contructor
        public OpenCompanyFileViewModel(IRegionManager regionManager, IEventAggregator eventAggregator)
        {
            this.regionManager = regionManager;
            this.eventAggregator = eventAggregator;
            SelectDBCommand = new DelegateCommand(SelectDatabase);
            CreateCompanyCommand = new DelegateCommand(NewCompany);
            eventAggregator.GetEvent<TitleChangedEvent>().Publish("");
            eventAggregator.GetEvent<HeaderVisibilityChangeEvent>().Publish(false);
            eventAggregator.GetEvent<BlankHeaderVisibilityChangeEvent>().Publish(true);
            eventAggregator.GetEvent<CompanynameChangedEvent>().Publish(" ");
            eventAggregator.GetEvent<FooterVisibilityChangeEvent>().Publish(false);
        }
        #endregion
        #region relay commands
        public ICommand CreateCompanyCommand { get; set; }
        public ICommand SelectDBCommand { get; set; }
    
        #endregion
        #region Button Commands
        public void SelectDatabase()
        {
            List<string> list = new List<string>();
            List<string> Storedlist = new List<string>();
            //StringBuilder Con = new StringBuilder("metadata=res://*/SASEntitiesEDM.csdl|res://*/SASEntitiesEDM.ssdl|res://*/SASEntitiesEDM.msl;provider=System.Data.SqlClient;provider connection string=';data source=(LocalDb)\\MSSQLLocalDB;Trusted_Connection=True;Integrated Security=True;MultipleActiveResultSets=True;App=EntityFramework;");
            StringBuilder Con = new StringBuilder("metadata=res://*/SASEntitiesEDM.csdl|res://*/SASEntitiesEDM.ssdl|res://*/SASEntitiesEDM.msl;provider=System.Data.SqlClient;provider connection string=';data source=108.168.203.227,7007;user id=SimpleAccounting;password=SimpleA@2017;MultipleActiveResultSets=True;App=EntityFramework;");            //Con.Append("res://*/SASEntitiesEDM.csdl|res://*/SASEntitiesEDM.ssdl|res://*/SASEntitiesEDM.msl;provider=System.Data.SqlClient;provider connection string=&quot;server=SDN-450\\SQLEXPRESS;Trusted_Connection=True;Integrated Security=True;MultipleActiveResultSets=True;App=EntityFramework&quot;");
            //Con.Append("res://*/SASEntitiesEDM.csdl|res://*/SASEntitiesEDM.ssdl|res://*/SASEntitiesEDM.msl;provider=System.Data.SqlClient;provider connection string=&quot;server=SDN-450\\SQLEXPRESS;Trusted_Connection=True;Integrated Security=True;MultipleActiveResultSets=True;App=EntityFramework&quot;");
            //Con.Append("initial catalog=simpleaccounting");
            Con.Append("';");
            //string connectionstring = "data source=(LocalDb)\\MSSQLLocalDB;Trusted_Connection=True;Integrated Security=True;";
            string connectionstring = "data source=108.168.203.227,7007;user id=SimpleAccounting;password=SimpleA@2017;";
            string finalconnectionstring = connectionstring;
            using (SqlConnection con = new SqlConnection(finalconnectionstring))
            {
                con.Open();

                // Set up a command with the given query and associate
                // this with the current connection.
                using (SqlCommand cmd = new SqlCommand("SELECT name from sys.databases WHERE name NOT IN ('master', 'model', 'tempdb', 'msdb')", con))
                {
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            list.Add(reader[0].ToString());
                        }
                    }
                    Storedlist = list;
                }
                if(Storedlist != null || Storedlist.Count != 0)
                {
                    var view = ServiceLocator.Current.GetInstance<OpenCompanyFileDBNameView>();
                    IRegion region1 = this.regionManager.Regions[RegionNames.MainRegion];
                    region1.Add(view);
                    if (region1 != null)
                    {
                        region1.Activate(view);
                    }
                    eventAggregator.GetEvent<TabVisibilityEvent>().Publish(false);
                    eventAggregator.GetEvent<SubTabVisibilityEvent>().Publish(false);
                }
                else
                {
                    MessageBox.Show("Not a single database is created , first create a database ");
                }
            }


            var config = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None);
            var connectionString1 = ConfigurationManager.ConnectionStrings["SASEntitiesEDM"].ConnectionString;
            var connectionStringsSection = (ConnectionStringsSection)config.GetSection("connectionStrings");
            connectionStringsSection.ConnectionStrings["SASEntitiesEDM"].ConnectionString = finalconnectionstring;
            config.Save();
            ConfigurationManager.RefreshSection("connectionStrings");

            //OpenFileDialog openFileDialog1 = new OpenFileDialog();
            //openFileDialog1.Filter = "Text files (*.bak)|*.bak|All files (*.*)|*.*";
            //if (openFileDialog1.ShowDialog() == DialogResult.OK)
            //{
            //    string filename = System.IO.Path.GetFileName(openFileDialog1.FileName);
            //    var path = System.IO.Path.GetFullPath(openFileDialog1.FileName);
            //    var view = ServiceLocator.Current.GetInstance<LoginUserView>();
            //    IRegion region1 = this.regionManager.Regions[RegionNames.MainRegion];
            //    region1.Add(view);
            //    if (region1 != null)
            //    {
            //        region1.Activate(view);
            //    }
            //    eventAggregator.GetEvent<TabVisibilityEvent>().Publish(false);
            //    eventAggregator.GetEvent<SubTabVisibilityEvent>().Publish(false);

            //}

        }
        public void NewCompany()
        {
            var view = ServiceLocator.Current.GetInstance<NewCompanyFileView>();
            IRegion region1 = this.regionManager.Regions[RegionNames.MainRegion];
            region1.Add(view);
            if (region1 != null)
            {
                region1.Activate(view);
            }
            eventAggregator.GetEvent<TabVisibilityEvent>().Publish(false);
            eventAggregator.GetEvent<SubTabVisibilityEvent>().Publish(false);
        }
    }
    #endregion
    #region public Methods

    #endregion
    #region Private Methods
    //protected override void OnPropertyChanged(string name)
    //{
    //    var eventHandler = this.PropertyChanged;
    //    if (eventHandler != null)
    //    {
    //        eventHandler(this, new PropertyChangedEventArgs(name));
    //    }


    //    base.OnPropertyChanged(name);
    //}
    #endregion
    #region Background work
    #endregion

}
