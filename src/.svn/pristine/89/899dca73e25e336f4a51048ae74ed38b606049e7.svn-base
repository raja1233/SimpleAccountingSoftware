using Microsoft.Practices.Prism.Commands;
using Microsoft.Practices.Prism.Events;
using Microsoft.Practices.Prism.Regions;
using Microsoft.Practices.ServiceLocation;
using SASClient.CloseRequest;
using SASClient.Reports.ReportsPage;
using SDN.CashBank.Views;
using SDN.Common;
using SDN.Customers.Services;
using SDN.Product.Services;
using SDN.Purchasing.View;
using SDN.Sales.Services;
using SDN.Sales.Views;
using SDN.Settings.Services;
using SDN.UI.Entities;
using SDN.UI.Entities.Sales;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using System.Globalization;
using System.Linq;
using System.Reflection;
using System.Windows;
using System.Windows.Input;

namespace SDN.Sales.ViewModel
{
    public class CreditNoteViewModel:CreditNoteEntity
    {
        #region "Private members"

        //private ObservableCollection<PandSDetailsModel> pands;
        private string currencyName;
        internal void RaisePropertyChanged(string prop)
        {
            if (PropertyChanged != null) { PropertyChanged(this, new PropertyChangedEventArgs(prop)); }
        }
        public event PropertyChangedEventHandler PropertyChanged;
        private string _DateErrors;
        ICompanyDetails CompanyD = new CompanyDetails();
        private DateTime? _CustomerDebitNoteDateCalender;
        //  private string taxName;
        private ObservableCollection<DataGridViewModel> pqDetailsEntity;
        private readonly IRegionManager regionManager;
        private readonly IEventAggregator eventAggregator;
        private ISalesInvoiceRepository pqRepository = new SalesInvoiceRepository();
        private ICreditNoteRepository dnRepository = new CreditNoteRepository();
        public IPandSDetailsRepository pandsRepository = new PandSDetailsRepository();
        private Customers.Services.ICustomerRepository supplierRepository = new CustomerRepository();
        public ObservableCollection<DataGridViewModel> lst;
        private DataGridViewModel pqdEntity;
        private CreditNoteEntity creditNoteEntity;
        //private SalesInvoiceDetailEntity selectedPandS;
        StackList itemlist = new StackList();
        private int customerId;

        private decimal? taxRate;
        //private ObservableCollection<PandSDetailsModel> productAndServices;
        private ObservableCollection<PandSListModel> productAndServices;

        private int? defaultPSID;

        private decimal? amountBeforeTax;
        private decimal? taxAmount;
        private string pqErrros;
        private bool isNew;
        private bool allFieldsReadonly;
        private bool allFieldsEnabled;
        private int decimalPlaces;
        private string dateFormat;

        #endregion

        #region "Public Properties"


        public string CurrencyName
        {
            get
            {
                return currencyName;
            }
            set
            {
                if (currencyName != value)
                {
                    currencyName = value;
                    OnPropertyChanged("CurrencyName");
                }
            }
        }

        public bool IsNew
        {
            get
            {
                return isNew;
            }
            set
            {
                isNew = value;
                OnPropertyChanged("IsNew");
            }
        }
        public DataGridViewModel PQDEntity
        {
            get
            {
                return pqdEntity;
            }
            set
            {
                if (pqdEntity != value)
                {
                    pqdEntity = value;
                    OnPropertyChanged("PQDEntity");
                }
            }
        }
        public string TandC
        {
            get; set;
        }

        public CreditNoteEntity CreditNoteEntity
        {
            get
            {
                return creditNoteEntity;
            }
            set
            {
                if (creditNoteEntity != value)
                {
                    creditNoteEntity = value;
                    OnPropertyChanged("CreditNoteEntity");
                }
            }
        }

        public ObservableCollection<DataGridViewModel> PQDetailsEntity
        {
            get
            {
                return pqDetailsEntity;
            }
            set
            {
                if (pqDetailsEntity != value)
                {
                    pqDetailsEntity = value;
                    OnPropertyChanged("PQDetailsEntity");
                }
            }
        }

        //public ObservableCollection<PandSDetailsModel> ProductAndServices
        //{
        //    get
        //    {
        //        return productAndServices;
        //    }
        //    set
        //    {
        //        if (productAndServices != value)
        //        {
        //            productAndServices = value;
        //            OnPropertyChanged("ProductAndServices");
        //        }
        //    }
        //}
        public string DateErrors
        {
            get
            {
                return _DateErrors;
            }
            set
            {
                _DateErrors = value;
                OnPropertyChanged("DateErrors");
            }
        }
        public DateTime? CustomerDebitNoteDateCalender
        {
            get
            {
                return _CustomerDebitNoteDateCalender;
            }
            set
            {
                _CustomerDebitNoteDateCalender = value;
                OnPropertyChanged("CustomerDebitNoteDateCalender");
            }
        }
        public ObservableCollection<PandSListModel> ProductAndServices
        {
            get
            {
                return productAndServices;
            }
            set
            {
                if (productAndServices != value)
                {
                    productAndServices = value;
                    OnPropertyChanged("ProductAndServices");
                }
            }
        }
        public decimal? TaxRate
        {
            get
            {                 
                if (taxRate != null)
                    Math.Round((decimal)taxRate, 2);
                return taxRate;
            }
            set
            {
                if (taxRate != value)
                {
                    taxRate = value;
                    OnPropertyChanged("TaxRate");
                }
            }
        }

        public bool AllFieldsEnabled
        {
            get
            {
                return allFieldsEnabled;
            }
            set
            {
                if (allFieldsEnabled != value)
                {
                    allFieldsEnabled = value;
                    OnPropertyChanged("AllFieldsEnabled");
                }
            }
        }

        public bool AllFieldsReadonly
        {
            get
            {
                return allFieldsReadonly;
            }
            set
            {
                if (allFieldsReadonly != value)
                {
                    allFieldsReadonly = value;
                    OnPropertyChanged("AllFieldsReadonly");
                }
            }
        }

        public string DateFormat
        {
            get
            {
                return dateFormat;
            }
            set
            {
                if (dateFormat != value)
                {
                    dateFormat = value;
                    OnPropertyChanged("DateFormat");
                }
            }
        }

        public int DecimalPlaces
        {
            get
            {
                return decimalPlaces;
            }
            set
            {
                if (decimalPlaces != value)
                {
                    decimalPlaces = value;
                    OnPropertyChanged("DecimalPlaces");
                }
            }
        }

        public string PQErrors
        {
            get
            {
                return pqErrros;
            }
            set
            {
                if (pqErrros != value)
                {
                    pqErrros = value;
                    OnPropertyChanged("PQErrors");
                }
            }
        }

        public int SelectedCustomerID
        {
            get
            {
                return customerId;
            }
            set
            {
                if (customerId != value)
                {
                    customerId = value;
                    OnPropertyChanged("SelectedCustomerID");
                }
            }
        }

        public int? DefaultPSID
        {
            get
            {
                return defaultPSID;
            }
            set
            {
                if (defaultPSID != value)
                {
                    defaultPSID = value;
                    OnPropertyChanged("DefaultPSID");
                }
            }
        }


        public decimal? AmountBeforeTax
        {
            get
            {
                return amountBeforeTax;
            }
            set
            {
                amountBeforeTax = value;
                OnPropertyChanged("AmountBeforeTax");
            }
        }
        public decimal? TaxAmount
        {
            get
            {
                return taxAmount;
            }
            set
            {
                taxAmount = value;
                OnPropertyChanged("TaxAmount");
            }
        }

        #endregion

        #region BackGround Worker
        private void LoadSupplierBackground()
        {
            Mouse.OverrideCursor = Cursors.Wait;

            //run time-consuming operations on a background thread
            BackgroundWorker worker = new BackgroundWorker();

            //Set the WorkerReportsProgress property to true if you want the BackgroundWorker to support progress updates.
            //When this property is true, user code can call the ReportProgress method to raise the ProgressChanged event.
            worker.WorkerReportsProgress = true;

            //This event is raised when you call the RunWorkerAsync method. This is where you start the time-consuming operation.
            worker.DoWork += new DoWorkEventHandler(this.LoadSupplierBackground);

            // This event is raised when you call the ReportProgress method.
            worker.ProgressChanged += new ProgressChangedEventHandler(this.LoadSupplierBackgroundProgress);

            //The RunWorkerCompleted event is raised when the background worker has completed. 
            //Depending on whether the background operation completed successfully, encountered an error,
            //or was canceled, update the user interface accordingly
            worker.RunWorkerCompleted += new RunWorkerCompletedEventHandler(this.LoadSupplierBackgroundComplete);

            //Starts running a background operation
            worker.RunWorkerAsync();
        }

        private void LoadSupplierBackground(object sender, DoWorkEventArgs e)
        {
            RefreshData();
        }


        /// <summary>
        ///  Occurs when System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32) is called.
        /// </summary>
        /// <param name="sender">The sender.</param>
        /// <param name="e">The <see cref="ProgressChangedEventArgs"/> instance containing the event data.</param>
        private void LoadSupplierBackgroundProgress(object sender, ProgressChangedEventArgs e)
        {

        }

        ///// <summary>
        /////  Occurs when the background operation has completed, has been canceled, or has raised an exception.
        ///// </summary>
        ///// <param name="sender">The sender.</param>
        ///// <param name="e">The <see cref="RunWorkerCompletedEventArgs"/> instance containing the event data.</param>
        private void LoadSupplierBackgroundComplete(object sender, RunWorkerCompletedEventArgs e)
        {
            Mouse.OverrideCursor = null;

        }

        #endregion

        #region "Constructors"

        // private static IEnumerable<PandSDetailsModel> ProductList;
        private static IEnumerable<PandSListModel> ProductList;

        public CreditNoteViewModel(IRegionManager regionManager, IEventAggregator eventAggregator)
        {
            Mouse.OverrideCursor = Cursors.Wait;
            this.regionManager = regionManager;
            this.eventAggregator = eventAggregator;

            CreditNoteEntity = new CreditNoteEntity();
            PQDetailsEntity = new ObservableCollection<DataGridViewModel>();

            int minHeight = 300;
            int headerRows = 369;
            var height = System.Windows.SystemParameters.PrimaryScreenHeight - headerRows - 90;
            bool validHeight = int.TryParse(height.ToString(), out minHeight);
            this.PIFormGridHeight = minHeight;
            clickCommand = new RelayCommand(PrintCommand, CanPrint);

            #region getting Options details
            GetOptionsData();
            #endregion

            AllFieldsEnabled = true;
            AllFieldsReadonly = false;
            RubberAdjusted = false;
            LoadSupplierBackground();

            NavigateToClientCommand = new RelayCommand(NavigatetoSupplier);
            SaveCommand = new RelayCommand(UpdateCreditNote, CanSave);
            RefundMoneyToCustomerCommand = new RelayCommand(RefundMoneyToCustomer, CanRefund);
            AdjustCreditNoteCommand = new RelayCommand(AdjustCreditNote, CanAdjust);
            NavigateToSICommand = new RelayCommand(NavigateToSI);
            CloseCommand = new DelegateCommand(Close);

            if (!String.IsNullOrEmpty(SharedValues.NewClick))
            {
                if (SharedValues.NewClick != "New")
                {
                    GetCreditNote(SharedValues.NewClick);
                }

            }
            Mouse.OverrideCursor = null;

        }

        #endregion

        #region Relay Commands
        public ICommand CloseCommand { get; set; }
        public RelayCommand NavigateToSICommand { get; set; }
        public RelayCommand SaveCommand { get; set; }
        public RelayCommand NavigateToClientCommand { get; set; }
        public RelayCommand RefundMoneyToCustomerCommand { get; set; }
        public RelayCommand AdjustCreditNoteCommand { get; set; }
        public RelayCommand clickCommand { get; set; }

        #endregion

        #region "Member Functions"

        public void RefreshData()
        {

            
            ProductList = pandsRepository.GetPandSComboList();
            ProductAndServices = new ObservableCollection<PandSListModel>(ProductList);

            #region "To get Category Contents"

            var cat1 = pqRepository.GetCategoryContent("CNR".Trim());

            if (cat1 != null)
            {
                this.TermsAndConditions = Convert.ToString(cat1);
                TandC = Convert.ToString(cat1);
            }
            #endregion

            #region "Get Supplier Details"

            var suppliers = supplierRepository.GetCustomerList();
            if (suppliers != null)
            {
                LstCustomers = suppliers.ToList();
            }
            #endregion

        }
        private void Close()
        {
            try
            {
                List<string> listview = (List<string>)Application.Current.Resources["views"];
                var secondlast = listview.AsEnumerable().Reverse().Skip(1).First();
                CloseView close = new CloseView(regionManager, eventAggregator);
                close.CloseViewRequest(secondlast, true);
                listview.RemoveAt(listview.Count - 1);
            }
            catch (Exception)
            {
                List<string> listview = (List<string>)Application.Current.Resources["views"];
                CloseView close = new CloseView(regionManager, eventAggregator);
                close.CloseViewRequest("MainView", true);
                listview.RemoveAt(listview.Count - 1);
            }
            //List<string> calledlist = stack.x();
        }

        public void NavigateToSI(object param)
        {
            SharedValues.ViewName = "SalesInvoiceView";
            if (param != null)
            {
                string obj = param.ToString();
                SharedValues.NewClick = obj;
                SharedValues.getValue = "SalesInvoiceTab";
            }
            var tabview = ServiceLocator.Current.GetInstance<SalesTabView>();

            var tabregion = this.regionManager.Regions[RegionNames.MenuBarRegion];
            tabregion.Add(tabview);
            if (tabregion != null)
            {
                tabregion.Activate(tabview);
            }

            var mainview = ServiceLocator.Current.GetInstance<SalesInvoiceView>();

            var mainregion = this.regionManager.Regions[RegionNames.MainRegion];
            mainregion.Add(mainview);
            if (mainregion != null)
            {
                mainregion.Activate(mainview);
            }////
            eventAggregator.GetEvent<TabVisibilityEvent>().Publish(true);
            eventAggregator.GetEvent<TitleChangedEvent>().Publish("Sales Invoice Form");
            itemlist.AddToList();
        }

        void NavigatetoSupplier(object param)
        {
            SharedValues.ViewName = "CustomersView";
            string obj = param.ToString();
            SharedValues.getValue = obj;
            var mainview = ServiceLocator.Current.GetInstance<Customers.Views.CustomersView>();
            var mainregion = this.regionManager.Regions[RegionNames.MainRegion];
            mainregion.Add(mainview);
            if (mainregion != null)
            {
                mainregion.Activate(mainview);
            }


            var tabview = ServiceLocator.Current.GetInstance<Customers.Views.CustomersTabView>();
            var tabregion = this.regionManager.Regions[RegionNames.MenuBarRegion];
            tabregion.Add(tabview);
            if (tabregion != null)
            {
                tabregion.Activate(tabview);
            }

            eventAggregator.GetEvent<TabVisibilityEvent>().Publish(true);
            eventAggregator.GetEvent<TitleChangedEvent>().Publish("Customers Details Form");
            itemlist.AddToList();
        }

        public void RefundMoneyToCustomer(object param)
        {
            MessageBoxResult result = System.Windows.MessageBox.Show("Do you want to save changes?", "Save Confirmation", MessageBoxButton.YesNo);
            if (result == MessageBoxResult.Yes)
            {
                Mouse.OverrideCursor = Cursors.Wait;

                PQErrors = string.Empty;
                CreditNoteForm PQForm = GetDataIntoModel();

                if (PQForm != null)
                {
                    dnRepository.UpdateCreditNote(PQForm);
                }
                
            if (param != null)
            {
                string obj = param.ToString();
                SharedValues.NewClick = obj;
            }
                SharedValues.ViewName = "RefundToCustomerView";
                SharedValues.getValue = "RefundToCustomerTab";
            SharedValues.CollectCommand =Convert.ToString(this.SelectedCustomerID);
            var mainview = ServiceLocator.Current.GetInstance<RefundToCustomerView>();
            var mainregion = this.regionManager.Regions[RegionNames.MainRegion];
            mainregion.Add(mainview);
            if (mainregion != null)
            {
                mainregion.Activate(mainview);
            }


            var tabview = ServiceLocator.Current.GetInstance<CashBankTabView>();
            var tabregion = this.regionManager.Regions[RegionNames.MenuBarRegion];
            tabregion.Add(tabview);
            if (tabregion != null)
            {
                tabregion.Activate(tabview);
            }

            eventAggregator.GetEvent<TabVisibilityEvent>().Publish(true);
            eventAggregator.GetEvent<TitleChangedEvent>().Publish("Refund To Customer Form");
            itemlist.AddToList();
            Mouse.OverrideCursor = null;
            }
        }
        public bool CanRefund(object param)
        {
            if (this.Status == Convert.ToByte(DN_Status.Adjusted))
            {
                return false;
            }
            else
            {
                return true;
            }
        }
        public void AdjustCreditNote(object param)
        {
            SharedValues.ViewName = "AdjustCreditNoteFormView";
            string obj = param.ToString();
            SharedValues.NewClick = obj;
            var mainview = ServiceLocator.Current.GetInstance<AdjustCreditNoteFormView>();
            var mainregion = this.regionManager.Regions[RegionNames.MainRegion];
            mainregion.Add(mainview);
            if (mainregion != null)
            {
                mainregion.Activate(mainview);
            }


            var tabview = ServiceLocator.Current.GetInstance<SalesTabView>();
            var tabregion = this.regionManager.Regions[RegionNames.MenuBarRegion];
            tabregion.Add(tabview);
            if (tabregion != null)
            {
                tabregion.Activate(tabview);
            }

            eventAggregator.GetEvent<TabVisibilityEvent>().Publish(true);
            eventAggregator.GetEvent<TitleChangedEvent>().Publish("Adjust Credit Note");
            itemlist.AddToList();
        }
        public bool CanAdjust(object param)
        {
            if (this.Status == Convert.ToByte(DN_Status.Adjusted))
            {
                return false;
            }
            else
            {
                return true;
            }
        }
        public DataTable LINQResultToDataTable<T>(IEnumerable<T> Linqlist)
        {
            DataTable dt = new DataTable();


            PropertyInfo[] columns = null;

            if (Linqlist == null) return dt;

            foreach (T Record in Linqlist)
            {

                if (columns == null)
                {
                    columns = ((Type)Record.GetType()).GetProperties();
                    foreach (PropertyInfo GetProperty in columns)
                    {
                        Type colType = GetProperty.PropertyType;

                        if ((colType.IsGenericType) && (colType.GetGenericTypeDefinition()
                        == typeof(Nullable<>)))
                        {
                            colType = colType.GetGenericArguments()[0];
                        }

                        dt.Columns.Add(new DataColumn(GetProperty.Name, colType));
                    }
                }

                DataRow dr = dt.NewRow();

                foreach (PropertyInfo pinfo in columns)
                {
                    dr[pinfo.Name] = pinfo.GetValue(Record, null) == null ? DBNull.Value : pinfo.GetValue
                    (Record, null);
                }

                dt.Rows.Add(dr);
            }
            return dt;
        }
        public void GetCreditNote(object param)
        {
            if (param != null)
            {
                CreditNoteForm pqf = dnRepository.GetCreditNoteDetails(Convert.ToString(param));

                this.ID = pqf.CreditNote.ID;
                this.CreditNo = pqf.CreditNote.CreditNo;
                this.CreditDate = pqf.CreditNote.CreditDate;
                this.CustomerDebitNoteNo = pqf.CreditNote.CustomerDebitNoteNo;
                this.CustomerDebitNoteDateStr = pqf.CreditNote.CustomerDebitNoteDate.ToString(); ;
                this.CustomerDebitNoteAmount = pqf.CreditNote.CustomerDebitNoteAmount;
                this.SelectedCustomerID = pqf.CreditNote.CustomerID;
                this.SalesInvoiceID = pqf.CreditNote.SalesInvoiceID;
                this.SalesInvoiceNo = pqf.CreditNote.SalesInvoiceNo;
                this.TermsAndConditions = pqf.CreditNote.TermsAndConditions;

                this.TotalBeforeTax =Convert.ToDecimal(pqf.CreditNote.TotalBeforeTax);
                this.TotalTax = Convert.ToDecimal(pqf.CreditNote.TotalTax);
                this.TotalAfterTax =Convert.ToDecimal(pqf.CreditNote.TotalAfterTax);
                this.TotalBeforeTaxStr = Convert.ToString(this.TotalBeforeTax);
                this.TotalTaxStr = Convert.ToString(TotalTax);
                this.TotalAfterTaxStr = Convert.ToString(TotalAfterTax);

                this.Status = pqf.CreditNote.Status;
                if (this.Status == 1)
                {
                    RubberAdjusted = true;
                }

                this.PQDetailsEntity = new ObservableCollection<DataGridViewModel>();
                foreach (var item in pqf.InvoiceDetails)
                {
                    DataGridViewModel pqEntity = new DataGridViewModel(ProductList);
                    pqEntity.SelectedPSID = Convert.ToString(item.SINo);
                    pqEntity.PandSCode = item.PandSCode;
                    pqEntity.PandSName = item.PandSName;
                    pqEntity.GSTRate = item.GSTRate;
                    pqEntity.SQQty = item.SIQty;
                    pqEntity.SQPrice = Convert.ToString(item.Price);
                    pqEntity.SQDiscount = item.SIDiscount;

                    //  PQDEntity.GSTRate = item.GSTRate;
                    pqEntity.SQAmount = item.SIAmount;

                    PQDetailsEntity.Add(pqEntity);
                }
            }
        }
        public override void OnPropertyChanged(string name)
        {
            var eventHandler = this.PropertyChanged;
            if (eventHandler != null)
            {
                eventHandler(this, new PropertyChangedEventArgs(name));
            }
            switch (name)
            {
                case "CustomerDebitNoteDateCalender":
                    FillStartDate();
                    break;


            }

            base.OnPropertyChanged(name);
        }
        void FillStartDate()
        {
            string date = this.DateFormat as string;
            CustomerDebitNoteDateStr = Convert.ToDateTime(this.CustomerDebitNoteDateCalender).ToString(date);
        }
        public void PrintCommand(object param)
        {

            var CreditNoteNumber = param.ToString();
            SharedValues.Print_Id = CreditNoteNumber;
            ///PrintSalesQuotation();
            //after calling the mwthod
            var mainview = ServiceLocator.Current.GetInstance<CreditNoteReport>();

            var mainregion = this.regionManager.Regions[RegionNames.MainRegion];
            mainregion.Add(mainview);
            if (mainregion != null)
            {
                mainregion.Activate(mainview);
            }////
        }
        public bool CanPrint(object param)
        {
            if (IsNew == false)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        public CreditNoteForm PrintCreditNote()
        {
            // Mouse.OverrideCursor = Cursors.Wait;
            var CNRepository = new CreditNoteRepository();
            var CNNo = SharedValues.Print_Id;
            var cnf = CNRepository.GetPrintCreditNote(CNNo);
            //  var qf = sqRepository.GetSalesQuotation(sqNo);

            ////  DataTable dt = new DataTable();
            //  DataTable dt = LINQResultToDataTable(qf);
            //  dt = (DataTable)sqf;
            return cnf;
        }

        /// <summary>
        /// This method is used to save and edit pq
        /// </summary>
        /// <param name="param"></param>
        public void UpdateCreditNote(object param)
        {
            MessageBoxResult result = System.Windows.MessageBox.Show("Do you want to save changes?", "Save Confirmation", MessageBoxButton.YesNo);
            if (result == MessageBoxResult.Yes)
            {
                Mouse.OverrideCursor = Cursors.Wait;

                PQErrors = string.Empty;
                CreditNoteForm PQForm = GetDataIntoModel();

                if (PQForm != null)
                {
                    dnRepository.UpdateCreditNote(PQForm);
                }

                Mouse.OverrideCursor = null;
            }
        }
        public bool CanSave(object param)
        {
            string date = this.DateFormat as string;
            var c = CompanyD.GetCompanyDetails().Comp_year_start_date;
            if (CustomerDebitNoteDateStr != null)
            {
                try
                {
                    if (!string.IsNullOrEmpty(CustomerDebitNoteDateStr) && !string.IsNullOrWhiteSpace(CustomerDebitNoteDateStr))
                    {

                        //item.StartDate = item.StartDate.Replace('.', '/');
                        //item.StartDate = item.StartDate.Replace('-', '/');
                        //item.EndDate = item.EndDate.Replace('.', '/');
                        //item.EndDate = item.EndDate.Replace('-', '/');
                        var Start = (DateTime.ParseExact(CustomerDebitNoteDateStr, date, CultureInfo.InvariantCulture));
                        this.DateErrors = "";
                        //var End = (DateTime.ParseExact(item.EndDate, date, CultureInfo.InvariantCulture));
                        if (Start < c)
                        {
                            this.DateErrors = "Date should be greater than Start Financial year";
                            return false;
                        }

                    }
                }
                catch (Exception ex)
                {
                    this.DateErrors = "Please enter the date in " + date + " format!";
                    return false;
                }
                return true;
            }
            else
            {
                return true;
            }
        }
        public CreditNoteForm GetDataIntoModel()
        {
            CreditNoteForm PQForm = new CreditNoteForm();
            PQForm.InvoiceDetails = new List<SalesInvoiceDetailEntity>();
            CreditNoteEntity model = new CreditNoteEntity();
            model.CreditNo = this.CreditNo;
            model.CreditDate = this.CreditDate;
            model.TotalBeforeTax = this.TotalBeforeTax;
            model.TotalTax = this.TotalTax;
            model.TotalAfterTax = this.TotalAfterTax;
            model.CustomerDebitNoteNo = this.CustomerDebitNoteNo;
            model.CustomerDebitNoteDateStr = this.CustomerDebitNoteDateStr;
            model.CustomerDebitNoteAmount = this.CustomerDebitNoteAmount;
            model.CustomerID = this.SelectedCustomerID;

            model.TermsAndConditions = this.TermsAndConditions;

            PQForm.CreditNote = model;

            foreach (var item in PQDetailsEntity)
            {
                SalesInvoiceDetailEntity pqEntity = new SalesInvoiceDetailEntity();
                pqEntity.SINo = Convert.ToString(item.SelectedPSID);
                pqEntity.PandSCode = item.PandSCode;
                pqEntity.PandSName = item.PandSName;
                pqEntity.SIQty = item.SQQty;
                pqEntity.SIPrice = item.SQPrice;
                pqEntity.SIDiscount = item.SQDiscount;
                pqEntity.GSTRate = item.GSTRate;
                pqEntity.SIAmount = item.SQAmount;
                if (item.SelectedPSID != null && Convert.ToInt32(item.SelectedPSID) > 0)
                {
                    PQForm.InvoiceDetails.Add(pqEntity);
                }
            }
            return PQForm;
        }

        private void GetOptionsData()
        {
            var lstOptions = pandsRepository.GetOptionDetails();

            if (lstOptions != null)
            {
                if (lstOptions.DecimalPlaces > 0)
                {
                    DecimalPlaces = lstOptions.DecimalPlaces;
                }
                else
                {
                    DecimalPlaces = 4;
                }
                if (lstOptions.DateFormat != null)
                {
                    DateFormat = lstOptions.DateFormat;
                }
                else
                {
                    DateFormat = "mm/dd/yy";
                }

                CurrencyName = lstOptions.CurrencyCode;
                bool? tax = lstOptions.ShowAmountIncGST;
                

                var data = pandsRepository.GetTaxes().Where(t => t.IsDefault == true).FirstOrDefault();
                if (data != null)
                {
                    TaxName = data.TaxName;
                    TaxRate = data.TaxRate;
                }
                else
                {
                    TaxName = "GST";
                    TaxRate = 0;
                }
            }
        }

        
        #endregion
    }
}
