using Microsoft.Practices.Prism.Commands;
using Microsoft.Practices.Prism.Events;
using Microsoft.Practices.Prism.Regions;
using Microsoft.Practices.ServiceLocation;
using SASClient.CloseRequest;
using SASClient.HomeScreen.Services;
using SDN.Common;
using SDN.Purchasing.Services;
using SDN.Purchasing.View;
using SDN.Sales.Views;
using SDN.UI.Entities;
using SDN.UI.Entities.HomeScreen;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;

namespace SASClient.HomeScreen.ViewModel
{
    public class TodoUnpaidDetailViewModel : TodoUnpaidDetailEntity
    {
        private readonly IRegionManager regionManager;
        private readonly IEventAggregator eventAggregator;
        public event PropertyChangedEventHandler PropertyChanged;
        StackList itemlist = new StackList();
        #region Constructor
        /// <summary>
        /// Initializes a new instance of the <see cref="PurchaseInvoiceListViewModel"/> class.
        /// </summary>
        public TodoUnpaidDetailViewModel(IRegionManager regionManager, IEventAggregator eventAggregator)
            : base()
        {
            this.regionManager = regionManager;
            this.eventAggregator = eventAggregator;
            this.LoadSupplierBackground();
            ShowSalesCommand = new RelayCommand(ShowSales);
            ShowPurchaseCommand = new RelayCommand(ShowPurchase);
            ShowBothCommand = new RelayCommand(ShowBoth);
            ShowSummaryCommand = new RelayCommand(ShowSummary);
            SavePromisedDate = new RelayCommand(SaveData, CanSave);
            NavigateToSupplierCommand = new RelayCommand(NavigateToInvoice);
            CloseCommand = new DelegateCommand(Close);
        }




        public TodoUnpaidDetailViewModel()
        {
        }
        #endregion
        public ICommand CloseCommand { get; set; }
        public RelayCommand ShowSalesCommand { get; set; }
        public RelayCommand ShowPurchaseCommand { get; set; }
        public RelayCommand ShowBothCommand { get; set; }
        public RelayCommand ShowSummaryCommand { get; set; }
        public RelayCommand SavePromisedDate { get; set; }
        public RelayCommand NavigateToSupplierCommand { get; set; }

        #region BackgroundWorked
        private void LoadSupplierBackground()
        {
            Mouse.OverrideCursor = Cursors.Wait;

            //run time-consuming operations on a background thread
            BackgroundWorker worker = new BackgroundWorker();

            //Set the WorkerReportsProgress property to true if you want the BackgroundWorker to support progress updates.
            //When this property is true, user code can call the ReportProgress method to raise the ProgressChanged event.
            worker.WorkerReportsProgress = true;


            //This event is raised when you call the RunWorkerAsync method. This is where you start the time-consuming operation.
            worker.DoWork += new DoWorkEventHandler(this.LoadSupplierBackground);

            // This event is raised when you call the ReportProgress method.
            worker.ProgressChanged += new ProgressChangedEventHandler(this.LoadSupplierBackgroundProgress);

            //The RunWorkerCompleted event is raised when the background worker has completed. 
            //Depending on whether the background operation completed successfully, encountered an error,
            //or was canceled, update the user interface accordingly
            worker.RunWorkerCompleted += new RunWorkerCompletedEventHandler(this.LoadSupplierBackgroundComplete);

            //Starts running a background operation
            worker.RunWorkerAsync();
        }
        List<TodoUnpaidDetailEntity> DefaultList = new List<TodoUnpaidDetailEntity>();
        private void LoadSupplierBackground(object sender, DoWorkEventArgs e)
        {
            int minHeight = 300;
            int headerRows = 300;//180+40+30+10;
            var height = System.Windows.SystemParameters.PrimaryScreenHeight - headerRows - 0;
            bool validHeight = int.TryParse(height.ToString(), out minHeight);
            this.GridHeight = minHeight;
            IPurchaseQuotationListRepository purchaseRepository = new PurchaseQuotationListRepository();
            this.DateFormat = purchaseRepository.GetDateFormat();

            RefreshData();
        }
        private void RefreshData()
        {
            ITodoUnpaidDetailRepository paymentRepository = new TodoUnpaidDetailRepository();
            GetOptionsandTaxValues();
            this.ListDueDays = paymentRepository.GetAllData(1);
            this.UnpaidPurchaseTrue = false;
            this.UnpaidPurSalesTrue = false;
            this.UnpaidSalesTrue = true;
            this.UnpaidSummaryTrue = false;
            DefaultList = this.ListDueDays;
            this.ListDueDayscmbSup = this.ListDueDays.GroupBy(x => x.Name).Select(y => y.First()).OrderBy(x => x.Name).ToList();
            this.ListDueDayscmbInv = this.ListDueDays.GroupBy(x => x.InvoiceNo).Select(y => y.First()).OrderBy(x => x.InvoiceNo).ToList();
            this.ShowDetailTrue = true;
            this.ShowSummaryTrue = false;
            this.TotalAmountDue = Convert.ToString(this.ListDueDays.Sum(e => e.AmountDue));
            this.ShowSelectedCount = this.ListDueDays.Count();

        }
        void GetOptionsandTaxValues()
        {
            OptionsEntity oData = new OptionsEntity();
            ITodoUnpaidDetailRepository paymentRepository = new TodoUnpaidDetailRepository();
            oData = paymentRepository.GetOptionSettings();
            if (oData != null)
            {
                this.CurrencyName = oData.CurrencyCode;     //there is no currency name field in database         
                this.CurrencyCode = oData.CurrencyCode;
                this.CurrencyFormat = oData.NumberFormat;
                this.DecimalPlaces = oData.DecimalPlaces;
            }
            else
            {
                this.CurrencyName = "USD";
                this.CurrencyCode = "USD";
                this.CurrencyFormat = "en-US";
            }
            TaxModel objDefaultTax = new TaxModel();
            objDefaultTax = paymentRepository.GetDefaultTaxes().FirstOrDefault();
            if (objDefaultTax != null)
            {
                this.TaxName = objDefaultTax.TaxName;
            }
            else
            {
                this.TaxName = "GST";
            }
        }

        /// <summary>
        ///  Occurs when System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32) is called.
        /// </summary>
        /// <param name="sender">The sender.</param>
        /// <param name="e">The <see cref="ProgressChangedEventArgs"/> instance containing the event data.</param>
        private void LoadSupplierBackgroundProgress(object sender, ProgressChangedEventArgs e)
        {

        }

        ///// <summary>
        /////  Occurs when the background operation has completed, has been canceled, or has raised an exception.
        ///// </summary>
        ///// <param name="sender">The sender.</param>
        ///// <param name="e">The <see cref="RunWorkerCompletedEventArgs"/> instance containing the event data.</param>
        private void LoadSupplierBackgroundComplete(object sender, RunWorkerCompletedEventArgs e)
        {
            Mouse.OverrideCursor = null;
        }
        #endregion

        protected override void OnPropertyChanged(string name)
        {
            var eventHandler = this.PropertyChanged;
            if (eventHandler != null)
            {
                eventHandler(this, new PropertyChangedEventArgs(name));
            }
            switch (name)
            {
                case "SelectedSearchName":
                    GetData(this.SelectedSearchName, "Name");
                    break;
                case "SelectedInvoiceNo":
                    GetData(this.SelectedInvoiceNo, "InvoiceNo");
                    break;
            }

            base.OnPropertyChanged(name);
        }

        public void GetData(string SearchFilter, string parameter)
        {
            //IPurchaseInvoiceListRepository purchaseRepository = new PurchaseInvoiceListRepository();
            //var result = purchaseRepository.GetAllPurInvoice().ToList();
            if (SearchFilter != null || SearchFilter == string.Empty)
            {
                if (parameter == "Name")
                {
                    this.ListDueDays = DefaultList.Where(x => (x.Name == SearchFilter)).ToList();
                    this.ShowSelectedCount = this.ListDueDays.Count();
                    this.TotalAmountDue = Convert.ToString(this.ListDueDays.Sum(e => e.AmountDue));

                }
                if (parameter == "InvoiceNo")
                {
                    this.ListDueDays = DefaultList.Where(x => (x.InvoiceNo == SearchFilter)).ToList();
                    this.ShowSelectedCount = this.ListDueDays.Count();
                    this.TotalAmountDue = Convert.ToString(this.ListDueDays.Sum(e => e.AmountDue));
                }

            }
            else
            {

                this.ListDueDays = DefaultList.ToList();
                this.ShowSelectedCount = this.ListDueDays.Count();
                this.TotalAmountDue = Convert.ToString(this.ListDueDays.Sum(e => e.AmountDue));

            }
            //TotalInvoiceAmount = Convert.ToString(PurchaseInvoiceList.Sum(e => e.InvoiceAmountValue));
            //TotalCCDAmount = Convert.ToString(PurchaseInvoiceList.Sum(e => e.CashChequeAmount));
        }

        //void NavigateToSupplier(object param)
        //{
        //    string obj = param.ToString();
        //    SharedValues.getValue = obj;
        //    var mainview = ServiceLocator.Current.GetInstance<SupplierDetailView>();
        //    var mainregion = this.regionManager.Regions[RegionNames.MainRegion];
        //    mainregion.Add(mainview);
        //    if (mainregion != null)
        //    {
        //        mainregion.Activate(mainview);
        //    }


        //    var tabview = ServiceLocator.Current.GetInstance<SupplierTabView>();
        //    var tabregion = this.regionManager.Regions[RegionNames.MenuBarRegion];
        //    tabregion.Add(tabview);
        //    if (tabregion != null)
        //    {
        //        tabregion.Activate(tabview);
        //    }

        //    eventAggregator.GetEvent<TabVisibilityEvent>().Publish(true);
        //    eventAggregator.GetEvent<SubTabVisibilityEvent>().Publish(false);
        //    eventAggregator.GetEvent<TitleChangedEvent>().Publish("Suppliers Details Form");
        //}
        void ShowSales(object param)
        {
            this.ShowDetailTrue = true;
            this.ShowSummaryTrue = false;
            ITodoUnpaidDetailRepository paymentRepository = new TodoUnpaidDetailRepository();
            //GetOptionsandTaxValues();
            this.ListDueDays = paymentRepository.GetAllData(1);
            this.UnpaidPurchaseTrue = false;
            this.UnpaidPurSalesTrue = false;
            this.UnpaidSalesTrue = true;
            this.UnpaidSummaryTrue = false;
            DefaultList = this.ListDueDays;
            this.ListDueDayscmbSup = this.ListDueDays.GroupBy(x => x.Name).Select(y => y.First()).OrderBy(x => x.Name).ToList();
            this.ListDueDayscmbInv = this.ListDueDays.GroupBy(x => x.InvoiceNo).Select(y => y.First()).OrderBy(x => x.InvoiceNo).ToList();
            this.ShowSelectedCount = this.ListDueDays.Count();
        }
        void ShowPurchase(object param)
        {
            this.ShowDetailTrue = true;
            this.ShowSummaryTrue = false;
            ITodoUnpaidDetailRepository paymentRepository = new TodoUnpaidDetailRepository();
            //GetOptionsandTaxValues();
            this.ListDueDays = paymentRepository.GetAllData(0);
            this.UnpaidPurchaseTrue = true;
            this.UnpaidPurSalesTrue = false;
            this.UnpaidSalesTrue = false;
            this.UnpaidSummaryTrue = false;
            DefaultList = this.ListDueDays;
            this.ListDueDayscmbSup = this.ListDueDays.GroupBy(x => x.Name).Select(y => y.First()).OrderBy(x => x.Name).ToList();
            this.ListDueDayscmbInv = this.ListDueDays.GroupBy(x => x.InvoiceNo).Select(y => y.First()).OrderBy(x => x.InvoiceNo).ToList();
            this.ShowSelectedCount = this.ListDueDays.Count();
        }
        void ShowBoth(object param)
        {
            this.ShowDetailTrue = true;
            this.ShowSummaryTrue = false;
            ITodoUnpaidDetailRepository paymentRepository = new TodoUnpaidDetailRepository();
            //GetOptionsandTaxValues();
            this.ListDueDays = paymentRepository.GetAllData(2);
            this.UnpaidPurchaseTrue = false;
            this.UnpaidPurSalesTrue = true;
            this.UnpaidSalesTrue = false;
            this.UnpaidSummaryTrue = false;
            DefaultList = this.ListDueDays;
            this.ListDueDayscmbSup = this.ListDueDays.GroupBy(x => x.Name).Select(y => y.First()).OrderBy(x => x.Name).ToList();
            this.ListDueDayscmbInv = this.ListDueDays.GroupBy(x => x.InvoiceNo).Select(y => y.First()).OrderBy(x => x.InvoiceNo).ToList();
            this.ShowSelectedCount = this.ListDueDays.Count();
        }
        /// <summary>
        /// Intial Calling method
        /// </summary>
        /// <param name="param"></param>
        void ShowSummary(object param)
        {

            this.ShowDetailTrue = false;
            this.ShowSummaryTrue = true;
            ITodoUnpaidDetailRepository paymentRepository = new TodoUnpaidDetailRepository();
            //GetOptionsandTaxValues();


            this.TodoSummary = paymentRepository.GetSummaryData();
            this.TotalSalesInvoice = Convert.ToString(this.TodoSummary.Sum(e => e.UnpaidSalesInvoice));
            this.TotalPurchaseInvoiceNo= Convert.ToString(this.TodoSummary.Sum(e => e.UnpaidPurchaseInvoice));
            this.TotalNetAmount = Convert.ToString(this.TodoSummary.Sum(e => e.NetAmount));
            this.UnpaidPurchaseTrue = false;
            this.UnpaidPurSalesTrue = false;
            this.UnpaidSalesTrue = false;
            this.UnpaidSummaryTrue = true;
            this.ShowSelectedCount = this.TodoSummary.Count();
            //DefaultList = this.ListDueDays;
            //this.ListDueDayscmbSup = this.ListDueDays.GroupBy(x => x.Name).Select(y => y.First()).OrderBy(x => x.Name).ToList();
            //this.ListDueDayscmbInv = this.ListDueDays.GroupBy(x => x.InvoiceNo).Select(y => y.First()).OrderBy(x => x.InvoiceNo).ToList();
        }
        /// <summary>
        /// Save Data
        /// </summary>
        /// <param name="param"></param>
        void SaveData(object param)
        {
            Mouse.OverrideCursor = Cursors.Wait;
            ITodoUnpaidDetailRepository todoRepository = new TodoUnpaidDetailRepository();
            var result = todoRepository.SavePromisedDate(this.ListDueDays, this.DateFormat);
            Mouse.OverrideCursor = null;
        }
        private void Close()
        {
            try
            {
                List<string> listview = (List<string>)Application.Current.Resources["views"];
                var secondlast = listview.AsEnumerable().Reverse().Skip(1).First();
                CloseView close = new CloseView(regionManager, eventAggregator);
                close.CloseViewRequest(secondlast, true);
                listview.RemoveAt(listview.Count - 1);
            }
            catch (Exception)
            {
                List<string> listview = (List<string>)Application.Current.Resources["views"];
                CloseView close = new CloseView(regionManager, eventAggregator);
                close.CloseViewRequest("MainView", true);
                listview.RemoveAt(listview.Count - 1);
            }
            //List<string> calledlist = stack.x();
        }
        void NavigateToInvoice(object Param)
        {
            if (Param != null)
            {
                List<object> values = Param as List<object>;
                var Type = values[1];
                if (Type.Equals("CUS"))
                {
                    SharedValues.ViewName = "SalesInvoiceView";
                    SharedValues.NewClick = values[0].ToString();
                    SharedValues.getValue = "SalesInvoiceTab";
                  
                    var tabview = ServiceLocator.Current.GetInstance<SalesTabView>();

                    var tabregion = this.regionManager.Regions[RegionNames.MenuBarRegion];
                    tabregion.Add(tabview);
                    if (tabregion != null)
                    {
                        tabregion.Activate(tabview);
                    }

                    var mainview = ServiceLocator.Current.GetInstance<SalesInvoiceView>();

                    var mainregion = this.regionManager.Regions[RegionNames.MainRegion];
                    mainregion.Add(mainview);
                    if (mainregion != null)
                    {
                        mainregion.Activate(mainview);
                    }////
                    eventAggregator.GetEvent<TabVisibilityEvent>().Publish(true);
                    eventAggregator.GetEvent<SubTabVisibilityEvent>().Publish(false);
                    eventAggregator.GetEvent<TitleChangedEvent>().Publish("Sales Invoice Form");
                    itemlist.AddToList();
                }


                else if (Type.Equals("SUP"))
                {
                    SharedValues.ViewName = "PurchaseInvoicePandSView";
                    SharedValues.NewClick = values[0].ToString();
                    SharedValues.getValue = "PurchaseInvoiceTab";
                    var tabview = ServiceLocator.Current.GetInstance<PurchaseTabView>();

                    var tabregion1 = this.regionManager.Regions[RegionNames.MenuBarRegion];
                    tabregion1.Add(tabview);
                    if (tabregion1 != null)
                    {
                        tabregion1.Activate(tabview);
                    }
                    //PurchaseTabEntity tabentity = new PurchaseTabEntity();
                    //var tabentityValue = tabentity as PurchaseTabEntity;
                    //tabentityValue.OrderTabTrue = true;

                    var mainview1 = ServiceLocator.Current.GetInstance<PurchaseInvoicePandSView>();

                    var mainregion1 = this.regionManager.Regions[RegionNames.MainRegion];
                    mainregion1.Add(mainview1);
                    if (mainregion1 != null)
                    {
                        mainregion1.Activate(mainview1);
                    }////
                    eventAggregator.GetEvent<TabVisibilityEvent>().Publish(true);
                    eventAggregator.GetEvent<SubTabVisibilityEvent>().Publish(false);
                    eventAggregator.GetEvent<TitleChangedEvent>().Publish("Purchase Invoice Form (Products & Services)");

                    itemlist.AddToList();
                }

            }

        }
        public bool CanSave(object param)
        {
            if (ListDueDays != null)
            {

                var check = ListDueDays.Where(x => x.PromisedDateStr != null).ToList();
                string date = this.DateFormat as string;
                int count = 0;
                if (check != null)
                {
                    foreach (var item in check)
                    {
                        try
                        {
                            if (!string.IsNullOrEmpty(item.PromisedDateStr) && !string.IsNullOrWhiteSpace(item.PromisedDateStr))
                            {
                                var Start = (DateTime.ParseExact(item.PromisedDateStr, date, CultureInfo.InvariantCulture));
                                count++;
                            }
                        }
                        catch (Exception ex)
                        {
                            //this.DateErrors = "Please enter the date in " + date + " format!";
                            return false;
                        }
                    }
                    var checkedcount = check.Count();
                    if (checkedcount == count && checkedcount > 0)
                        return true;
                    else
                        return false;
                }
                else
                {
                    return false;
                }

            }
            else
            {
                return false;
            }
        }
    }
}
